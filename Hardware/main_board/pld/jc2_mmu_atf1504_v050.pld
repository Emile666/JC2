/*---------------------------------------------------------------*/
/* Compiler       : WinCUPL                                      */
/* HW Version     : JC2 Main-Board V4.1                          */
/* Version history:                                              */
/*            V050: - A7, A6, A5 and VIA_CS added, RB_EN removed */
/*            V040: - BAS_EN added: BASIC, BIOS, MONITOR 1 eprom */
/*            V032: - Bug-fix $1C00-$1FFF RAM area               */
/*            V031: - JTAG pins now also used.                   */
/*            V030: - MMU 8-bit register added instead of PIA.   */
/*            V020: - Positive logic for RAM_SEL, K2, K3 and K4. */
/*                  - RB_EN (RAM-Bank enable) added.             */
/*                  - This version is meant for JC2 v4.0 PCB.    */
/*            V010: First dev. version, copy from jc2-mmu v0.40. */
/*---------------------------------------------------------------*/
Name     jc2_mmu_atf1504_v031;
PartNo   ATF1504_PLCC44 ;
Date     12-05-2025 ;
Revision 050 ;
Designer Emile ;
Company  - ;
Assembly None ;
Location IC2 ;
Device   f1504plcc44 ;

/* ---------------------------------------------------- */
/* JTAG: TDI pin  7, TMS pin 13, TCK pin 32, TDO pin 38 */
/* VCC :     pin  3,     pin 15,     pin 23,     pin 35 */
/* GND :     pin 10,     pin 22,     pin 30,     pin 42 */
/* ---------------------------------------------------- */

/* ******************************* INPUT PINS ****************************************/
PIN  [43,44,1,2,4,5,6,8,13,32,7] = [A15..5]; /* Address lines from CPU               */ 
PIN  [9,11,16,17,18,19,20,25] = [D0..7];  /* Data-bus line to/from CPU               */ 
PIN  12 = PHI2;                    /* CPU 1 MHz clock PHI2                           */ 
PIN  14 = RW;                      /* CPU R/!W signal                                */ 
PIN  41 = RES;                     /* Reset signal from CPU                          */
/* ******************************** OUTPUT PINS **************************************/
PIN  21 = !RAM_WE;                 /* RAM Write-enable                               */ 
PIN  24 = nRAM_SEL;                /* RAM Chip-select, OC-output                     */ 
PIN  26 = !ACIA_CS;                /* Chip-select for 6551 ACIA on JC2 board         */ 
PIN  27 = !RIOT_CS;                /* Chip-select for 6532 RIOT on JC2 board         */ 
PIN  28 = !ROM_SEL;                /* 0 = Enable ROM, !WE signal for eeprom          */ 
PIN  29 =  MA18;                   /* A18 address line for RAM IC                    */
PIN  31 = !MA17;                   /* A17 address line for RAM IC (= CS2 for 628128) */
PIN  33 =  MA16;                   /* A16 address line for RAM IC                    */
PIN  34 =  MA15;                   /* A15 address line for RAM IC                    */
PIN  36 =  MA14;                   /* A14 address line for RAM IC                    */
PIN  37 = nK2;                     /* K2 address line, $0800-$0BFF, OC-output        */
PIN  38 = !VIA_CS;                 /* CS for 6522 VIA $1740-$177F                    */
PIN  39 = nK3;                     /* K3 address line, $0C00-$0FFF, OC-output        */
PIN  40 = nK4;                     /* K4 address line, $1000-$13FF, OC-output        */
/* ***********************************************************************************/

/* ***********************************************************************************/
/* Internal buried nodes                                                             */
/* ***********************************************************************************/
NODE BIOS_EN; /* 1 = Enable BIOS ROM at $E000-$FFFF, 0 = Enable RAM */
NODE MON_EN;  /* 1 = Enable Monitor ROM at $1C00-$1FFF, 0 = Enable RAM */
NODE RAMB0;   /* RAM-Bank selection bit 0 */
NODE RAMB1;   /* RAM-Bank selection bit 1 */
NODE RAMB2;   /* RAM-Bank selection bit 2 */
NODE RAMB3;   /* RAM-Bank selection bit 3 */
NODE RAMB4;   /* RAM-Bank selection bit 4 */
NODE BAS_EN;  /* 1 = Enable BASIC ROM at $B000-$DFFF, 0 = Enable RAM */

/*-----------------------------------------------------------------------------*/
/* The AS6C4008 SRAM IC has 32 * 16K = 512K. The first 4 banks are for the JC2 */
/* main-memory, the other 28 banks are RAM-banks and are mapped to $4000-$7FFF */
/* of the main-memory.                                                         */
/* The 64K base memory is divided in 4 banks (16 K each) called M0, M2, M3     */
/* and R1 for the RAM bank area in $4000-$7FFF.                                */
/* The other RAM-banks (28 * 16K) are called R4 - R31, 448 K total.            */
/*                                                                             */
/*                -------- INPUTS ---------- | ---- OUTPUTS -----              */
/*                A15 A14  RAMB4..2 RAMB1..0 | MA18..16 MA15 MA14              */
/*--------------------------------------------------------------------------   */
/* M0 $0000-$3FFF  0   0     XXX      XX     |   000      0    0   (32)        */
/* M2 $8000-$BFFF  1   0     XXX      XX     |   000      1    0   (32)        */
/* M3 $C000-$FFFF  1   1     XXX      XX     |   000      1    1   (32)        */
/*                                                                             */
/* R1 $4000-$7FFF  0   1     000      XX     |   000      0    1    (4)        */
/*                                                                             */
/* R04..R07        0   1     001      ..     |   001   RAMB1 RAMB0  (4)        */
/* R08..R11        0   1     010      ..     |   010   RAMB1 RAMB0  (4)        */
/* R12..R15        0   1     011      ..     |   011   RAMB1 RAMB0  (4)        */
/* R16..R19        0   1     100      ..     |   100   RAMB1 RAMB0  (4)        */
/* R20..R23        0   1     101      ..     |   101   RAMB1 RAMB0  (4)        */
/* R24..R27        0   1     110      ..     |   110   RAMB1 RAMB0  (4)        */
/* R28..R31        0   1     111      ..     |   111   RAMB1 RAMB0  (4)        */
/*-----------------------------------------------------------------------------*/
MA18 =  !A15 & A14 & RAMB4;                   /* RAM-banks R16-R31 */
MA17 =  !A15 & A14 & RAMB3;                   /* RAM-banks R8-R15, R24-R31 */
MA16 =  !A15 & A14 & RAMB2;                   /* RAM-banks R4-R7, R12-R15, R20-R23, R28-R31 */
MA15 =  !A15 & A14 & RAMB1                    /* RAM-banks in R4-R31 with RAMB1=1 */
     #   A15;                                 /* Main-banks M2 & M3  */
MA14 =  !A15 & A14 &  RAMB4 &  RAMB0          /* RAM-banks in R4-R31 with RAMB0=1 */
     #  !A15 & A14 &  RAMB3 &  RAMB0          /* RAM-banks      */
     #  !A15 & A14 &  RAMB2 &  RAMB0          /* RAM-banks      */
     #  !A15 & A14 & !RAMB4 & !RAMB3 & !RAMB2 /* R1 $4000-$7FFF */
     #   A15 & A14;                           /* Main-bank M3   */

/*-----------------------------------------------------------------------------*/
/* The K2, K3 and K4 address lines were generated by U8 (74LS145), but are now */
/* generated here. With this design, U8 can be removed from the new design.    */
/*-----------------------------------------------------------------------------*/
nK4    = 'b'0; /* emulates open-collector output */ 
nK4.oe = !A15 & !A14 & !A13 &  A12 & !A11 & !A10; /* $1000-$13FF */
nK3    = 'b'0; /* emulates open-collector output */ 
nK3.oe = !A15 & !A14 & !A13 & !A12 &  A11 &  A10; /* $0C00-$0FFF */
nK2    = 'b'0; /* emulates open-collector output */  
nK2.oe = !A15 & !A14 & !A13 & !A12 &  A11 & !A10; /* $0800-$0BFF */

/*-----------------------------------------------------------------------------*/
/* The newly added MMU register will use the previously unused address range   */
/* $1700-$17FF, which is removed from the original !K5 signal. This MMU        */
/* register is present at $1700-$171F.                                         */
/*-----------------------------------------------------------------------------*/
[D0..7]    = [BIOS_EN, MON_EN, RAMB0, RAMB1, RAMB2, RAMB3, RAMB4, BAS_EN];
[D0..7].oe = PHI2 & RW & !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & !A6 & !A5; /* $1700-$171F READ */

BIOS_EN.ck = !RES;
BIOS_EN.d  = 'b'1; /* enable BIOS ROM at power-up */
BIOS_EN.ar = !D0 & PHI2 & !RW & !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & !A6 & !A5;
BIOS_EN.ap =  D0 & PHI2 & !RW & !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & !A6 & !A5;

MON_EN.ck  = !RES;
MON_EN.d   = 'b'1; /* enable MONITOR ROM at power-up */
MON_EN.ar  = !D1 & PHI2 & !RW & !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & !A6 & !A5;
MON_EN.ap  =  D1 & PHI2 & !RW & !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & !A6 & !A5;

RAMB0.ck  = !RES;
RAMB0.d   = 'b'0; /* disable at power-up */
RAMB0.ar  = !D2 & PHI2 & !RW & !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & !A6 & !A5;
RAMB0.ap  =  D2 & PHI2 & !RW & !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & !A6 & !A5;

RAMB1.ck  = !RES;
RAMB1.d   = 'b'0; /* disable at power-up */
RAMB1.ar  = !D3 & PHI2 & !RW & !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & !A6 & !A5;
RAMB1.ap  =  D3 & PHI2 & !RW & !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & !A6 & !A5;

RAMB2.ck  = !RES;
RAMB2.d   = 'b'0; /* disable at power-up */
RAMB2.ar  = !D4 & PHI2 & !RW & !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & !A6 & !A5;
RAMB2.ap  =  D4 & PHI2 & !RW & !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & !A6 & !A5;

RAMB3.ck  = !RES;
RAMB3.d   = 'b'0; /* disable at power-up */
RAMB3.ar  = !D5 & PHI2 & !RW & !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & !A6 & !A5;
RAMB3.ap  =  D5 & PHI2 & !RW & !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & !A6 & !A5;

RAMB4.ck  = !RES;
RAMB4.d   = 'b'0; /* disable at power-up */
RAMB4.ar  = !D6 & PHI2 & !RW & !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & !A6 & !A5;
RAMB4.ap  =  D6 & PHI2 & !RW & !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & !A6 & !A5;

BAS_EN.ck = !RES;
BAS_EN.d  = 'b'1; /* enable BASIC ROM at power-up */
BAS_EN.ar = !D7 & PHI2 & !RW & !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & !A6 & !A5;
BAS_EN.ap =  D7 & PHI2 & !RW & !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & !A6 & !A5;

/*-----------------------------------------------------------------------------*/
/* The original chip-select for the 6551 ACIA on the JC2 was the !K5 line      */
/* with address-range from $1400-$17FF (1K). A9 was coupled to CS0, so that    */
/* the effective ACIA address-range was $1600-$17FF. The area from $1400-$15FF */
/* was added to RAM with U5D/U5E/U6C. This is no longer needed when A4 is      */
/* added to the ACIA chip-select line.                                         */
/* The effective ACIA address range now becomes $1600-$160F (16 B).            */
/*                                                                             */
/* NOTE: unused address range $1700-$17FF is now meant for the MMU and the VIA */
/*-----------------------------------------------------------------------------*/
ACIA_CS = !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & !A8 & !A7 & !A6 & !A5; /* $1600-$161F */

/*-----------------------------------------------------------------------------*/
/* The original chip-select for the 6532 RIOT on the JC2 was the !K6 line with */
/* an address-range of $1800-$1BFF (1K). A9 was coupled to CS1 and A7 to !RS,  */
/* so the effective RIOT address-range was from $1A00-$1BFF. The area from     */
/* $1800-$19FF was not used. The RIOT registers were available from $1A80 and  */
/* the RIOT 128B RAM was available from $1A00. Now, A8 is added to the RIOT    */
/* address range, so that this new RIOT address range becomes $1A00-$1AFF.     */
/*-----------------------------------------------------------------------------*/
RIOT_CS = !A15 & !A14 & !A13 & A12 & A11 & !A10 & A9 & !A8; /* $1A00-$1AFF */

/*-----------------------------------------------------------------------------*/
/* An additional VIA is added to the JC2 main-board that was not present in    */
/* the original design. It is located on the same memory-page as the MMU.      */
/* With A4 coupled to CS1 (and A3..0 to RS3..0) the effective address-range    */
/* now becomes $1760-$176F.                                                    */
/*-----------------------------------------------------------------------------*/
VIA_CS = !A15 & !A14 & !A13 & A12 & !A11 & A10 & A9 & A8 & !A7 & A6 & !A5; /* $1760-$176F */

/*-----------------------------------------------------------------------------*/
/* The RAM_SEL output enables the RAM IC whenever there is RAM to be addressed.*/
/* This is done for both read- and write actions.                              */
/* The RAM_WE output enables the RAM IC for write operations.                  */
/* The BANK80_SEL, BANKA0_SEL & BANKC0_SEL signals were generated by U7, but   */
/* since we added BASIC control here, these signals are no longer needed.      */
/* U7 also used to handle the RAM area from $2000-$3FFF.                       */
/* U8 used to handles the RAM area from $0000-$07FF.                           */  
/*-----------------------------------------------------------------------------*/
nRAM_SEL    = 'b'0; /* emulates open-collector output */
nRAM_SEL.oe = PHI2 &  A15 &  A14 &  A13 & !BIOS_EN                      /* $E000-$FFFF 8K BIOS-area ROM -> RAM   */
            # PHI2 &  A15 &  A14 & !A13 & !BAS_EN                       /* $C000-$DFFF 8K BASIC-area ROM -> RAM  */
            # PHI2 &  A15 & !A14 &  A13 &  A12 & !BAS_EN                /* $B000-$BFFF 4K BASIC-area ROM -> RAM  */
            # PHI2 &  A15 & !A14 &  A13 & !A12                          /* $A000-$AFFF 4K area from BANKA0_SEL   */
            # PHI2 &  A15 & !A14 & !A13                                 /* $8000-$9FFF 8K area from BANK80_SEL   */
            # PHI2 & !A15 &  A14                                        /* $4000-$7FFF 16K RAM-bank area         */
            # PHI2 & !A15 & !A14 &  A13                                 /* $2000-$3FFF 8K RAM area (from U7)     */ 
            # PHI2 & !A15 & !A14 & !A13 &  A12 &  A11 &  A10 & !MON_EN  /* $1C00-$1FFF 1K Monitor ROM -> RAM     */
            # PHI2 & !A15 & !A14 & !A13 &  A12 &  A11 & !A10 &  A9 & A8 /* $1B00-$1BFF 256B RIOT shadow, now RAM */
            # PHI2 & !A15 & !A14 & !A13 &  A12 &  A11 & !A10 & !A9      /* $1800-$19FF 512B unused, now RAM      */
            # PHI2 & !A15 & !A14 & !A13 &  A12 & !A11 &  A10 & !A9      /* $1400-$15FF 512B (from U5D,U5E & U6C) */
            # PHI2 & !A15 & !A14 & !A13 & !A12 & !A11;                  /* $0000-$07FF 2K RAM area (from U8)     */ 

RAM_WE  = PHI2 & !RW; /* only enable RAM during write when clock is high */

/*-----------------------------------------------------------------------------*/
/* The ROM_SEL output switches both the Monitor ROM at $1C00-$1FFF, the BIOS   */
/* ROM at $E000-$FFFF and the BASIC ROM at $B000-$DFFF. These ROMs can now be  */
/* switched out and replaced by RAM. In order to prevent system-crashes a      */
/* special driver is needed, e.g. a copy ROM-to-RAM routine.                   */
/*-----------------------------------------------------------------------------*/
ROM_SEL =  A15 &  A14 &  A13 & BIOS_EN                   /* $E000-$FFFF BIOS ROM  */
        #  A15 &  A14 & !A13 & BAS_EN                    /* $C000-$DFFF BASIC ROM */
        #  A15 & !A14 &  A13 & A12 & BAS_EN              /* $B000-$BFFF BASIC ROM */
        # !A15 & !A14 & !A13 & A12 & A11 & A10 & MON_EN; /* $1C00-$1FFF MON ROM   */


