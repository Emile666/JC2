mads 2.1.7 build 33 (1 Aug 24)
Source: bootcf.asm
     1 				; ******************************************************************************
     2 				; The Micro (Disk) Operating System for 6502 Microprocessors
     3 				;
     4 				; M/OS-65 System I, Version 0.2.4 by Joerg Walke, CF-IDE updates by Emile
     5 				;
     6 				; Developed for the Junior Computer ][
     7 				;
     8 				; First implementation 6.7.2023, updated 20.06.2024, by Joerg Walke
     9 				; Assembled with A65, Converted to MADS by Emile
    10 				;
    11 				; M/OS-65 is primarily a small Disk Operation System (DOS) based on the FAT
    12 				; filesystem. This version is for the CF-IDE interface with FAT32 only.
    13 				; A CF-Card can be partitioned with up to four primary partitions.
    14 				; Using the MKBOOTCF program you can write the needed Partition Boot Block and
    15 				; the Master Boot Record which then holds a menu program to select one of the
    16 				; available partitions for booting.
    17 				;
    18 				; This code is freely available under the Creative Commons Attribution 4.0
    19 				; International license, see https://creativecommons.org/licenses/by/4.0/
    20 				; ******************************************************************************
    21
    22 = 0030			VERMAIN   	EQU     '0'    		; main version
    23 = 0032			VERPSUB    	EQU     '2'    		; primary sub version
    24 = 0034			VERSSUB		EQU	'4'		; secondary sub version
    25
    26 				; List Of Changes **************************************************************
    27 				; V0.2.1: 11-04-25 Emile boot.asm renamed in bootcf.asm and adapted for CF-IDE interface.
    28 				; V0.2.2: 19-05-25 ZP-vars reorganised, too much overlap with BIOS
    29 				; V0.2.3: - OS_LOAD_COM renamed in OS_LOAD_FILE, now loads .bas, .com and .exe files
    30 				;         - Macro's added, start of code-reorganisation.
    31 				;	  - File (3350 lines) split in separate smaller files.
    32 				; V0.2.4: - .BAS LOAD file now works, filename bug-fix and NUM32 bug-fix
    33 				;	  - Bug-fix MKDIR run after DIR command
    34 				;	  - SIS added + total KB printed with DIR command
    35 				; ******************************************************************************
    36 						OPT h- ; do not add file header
    37 						OPT f+ ; save as single block
    38
    39 				;------------------------------------------------------------------------------------------------
    40 				; TERMINOLOGY AND FORMULAS USED:
    41 				; 
    42 				; Sector                : A sector consists of 512 bytes.
    43 				; Cluster               : Consists of one or more sectors as defined by D_SECT_PER_CLST.
    44 				;                         This is a 24-bit number relative to the cluster_begin_lba number.
    45 				; LBA                   : Logical Block Address, a 32-bit address for a sector on the CF/SD-card.
    46 				; Cluster_nr            : number of a cluster relative to the cluster_begin_lba Number
    47 				; root_dir_1st_cluster  : the 1st cluster in a partition, contains the root directory
    48 				; 
    49 				; fat_begin_lba         : D_START_FAT1 = partition_lba_begin + nr_of_reserved_sectors
    50 				; cluster_begin_lba     : D_START_CLS_LBA = fat_begin_lba + (number_of_FATs * Sectors_per_FAT)
    51 				; Sectors_per_Cluster   : D_SECT_PER_CLST (written by bootcode.fat32 during boot)
    52 				; root_dir_first_cluster: D_START_DIR, this is usually 2
    53 				; lba_addr = cluster_begin_lba + (cluster_nr - 2) * sectors_per_cluster
    54 				;------------------------------------------------------------------------------------------------
    55
    56 = 0001			DBG_PRINT	EQU	1			; Set to 1 for debug print-outs
    57
    58 						ICL "macros.inc"		; boot.sys macro definitions for MADS
Source: macros.inc
     1 				;-------------------------------------------------
     2 				; Macro-definitions for BOOT.SYS file.
     3 				; Assembler: MADS-Assembler
     4 				; V0.1: 22-05-25, Emile first version
     5 				;-------------------------------------------------
     6
     7 				.macro	PRHEX16	b16				; Print WORD (16-bit) as 2 hex-bytes
     8 					LDA	:b16+1				; print MSB
     9 					JSR	HEXOUT
    10 					LDA	:b16
    11 					JSR	HEXOUT				; print LSB
    12 				.endm
    13
    14 				.macro	PRHEX32	b32				; Print DWORD (32-bit) as 4 hex-bytes
    15 					PRHEX16	:b32+2				; Print MSB word first
    16 					PRHEX16	:b32				; Print LSB word
    17 				.endm
    18
    19 				.macro	LDXYI	b16
    20 					LDX	<:b16				; MADS makes this immediate
    21 					LDY	>:b16
    22 				.endm
    23
    24 				.macro	LDXY	b16				; Load [X,Y] Pointer
    25 					LDX	:b16
    26 					LDY	:b16+1
    27 				.endm
    28
    29 				.macro	STXY	b16				; Store [X,Y] Pointer
    30 					STX	:b16
    31 					STY	:b16+1
    32 				.endm
    33
    34 				.macro	PRSTR	str				; Print String
    35 					LDXYI	:str
    36 					JSR	OS_STRING_OUT
    37 				.endm
    38
    39 				.macro	PRCH	ch				; Print single character
    40 					LDA	#:ch
    41 					JSR	COUT
    42 				.endm
    43 					
    44 				.macro	ASL32	b32				; ASL of 32-bit DWORD
    45 					ASL     :b32		  		; SHL with C=0
    46 				        ROL     :b32+1		  
    47 				        ROL     :b32+2
    48 				        ROL     :b32+3		  
    49 				.endm
    50
    51 				.macro	LSR32	b32				; LSR of 32-bit DWORD
    52 					LSR     :b32+3		  		; SHR with C=0
    53 				        ROR     :b32+2
    54 				        ROR     :b32+1
    55 				        ROR     :b32
    56 				.endm
    57
    58 				.macro	LSR16	b16				; LSR of 16-bit WORD
    59 					LSR	:b16+1
    60 					ROR	:b16
    61 				.endm
    62
    63 				.macro	PHW	b16				; Push WORD onto stack
    64 					LDA	:b16
    65 					PHA
    66 					LDA	:b16+1
    67 					PHA
    68 				.endm
    69
    70 				.macro	PLW	b16				; Pull WORD from stack
    71 					PLA
    72 					STA	:b16+1
    73 					PLA
    74 					STA	:b16
    75 				.endm
    76
    77 				.macro	PHY					; Push Y-register
    78 					TYA
    79 					PHA
    80 				.endm
    81
    82 				.macro	PLY					; Pull Y-register
    83 					PLA
    84 					TAY
    85 				.endm
    86
    87 				.macro	MVAX	n src dst			; Move n bytes from SRC to DST using X as index
    88 					LDX	#:n-1
    89 				lp	MVA	:src,X :dst,X-
    90 					BPL	lp
    91 				.endm
    92 					
    93 				.macro	MVAY	n src dst			; Move n bytes from SRC to DST using Y as index
    94 					LDY	#:n-1
    95 				lp	MVA	:src,Y :dst,Y-
    96 					BPL	lp
    97 				.endm
    98
    99 				; Macros used for printing a cluster nr, which consists of 2 words
   100 				.macro	PRCLB	c st				; This prints a byte and optionally saves it
   101 						LDA	(:c),Y
   102 					ift :0>1	; st also given?
   103 						STA	:st
   104 					eif	
   105 						JSR	HEXOUT			; changes Y!
   106 				.endm		
   107
   108 				.macro	PRCLW	indx	curr_dir stor		; Print a word of a cluster nr and save it (optional)
   109 						LDY	#:indx+1		; Print MSB of word
   110 					ift :0>2	; stor also given?	
   111 						PRCLB	:curr_dir :stor+1
   112 					els	
   113 						PRCLB	:curr_dir
   114 					eif
   115 						LDY	#:indx			; Print LSB of word
   116 					ift :0>2	; stor also given?	
   117 						PRCLB	:curr_dir :stor
   118 					els	
   119 						PRCLB	:curr_dir
   120 					eif
   121 				.endm
   122
   123 				BTST	.macro ' '	b1 b2 lbl1		; Bit test (7-0) combined with branch if equal
   124 					ift :b2>7
   125 						ERT "Only bits 7-0 allowed"
   126 					els
   127 						LDA	:b1
   128 						AND	#(1 << :b2)
   129 						BEQ	:lbl1
   130 					eif
   131 				.endm
   132 					
   133 				; ----------------------------------------------
   134 				; Compare + Branch Macros
   135 				; ----------------------------------------------
   136 				CMP.EQ	.macro ' '	b1 lbl			; Compare A with b1 and branch if equal
   137 						CMP	:b1
   138 						BEQ	:lbl
   139 				.endm		; A is now not equal to b1
   140 					
   141 				CMP.NE	.macro ' '	b1 lbl			; Compare A with b1 and branch if not equal
   142 						CMP	:b1
   143 						BNE	:lbl
   144 				.endm		; A is now equal to b1
   145
   146 					; Compare A with b1 and branch if Carry is 0 (A-b1 < 0)
   147 				CMP.CC	.macro ' '	b1 lbl
   148 						CMP	:b1			; 
   149 						BCC	:lbl			; branch if C=0 (A-b1 < 0)
   150 				.endm		; C is now 1 (A-b1 is >= 0)
   151
   152 					; Compare A with b1 and branch if Carry is 1 (A-b1 >= 0)
   153 				CMP.CS	.macro ' '	b1 lbl
   154 						CMP	:b1			; 
   155 						BCS	:lbl			; branch if C=1 (A-b1 >= 0)
   156 				.endm		; C is now 0 (A-b1 is < 0)
   157
   158 				CPX.EQ	.macro ' '	b1 lbl			; Compare X with b1 and branch if equal
   159 						CPX	:b1
   160 						BEQ	:lbl
   161 				.endm		; X is now not equal to b1
   162 					
   163 				CPX.NE	.macro ' '	b1 lbl			; Compare X with b1 and branch if not equal
   164 						CPX	:b1
   165 						BNE	:lbl
   166 				.endm		; X is now equal to b1
   167
   168 					; Compare X with b1 and branch if Carry is 0 (A-b1 < 0)
   169 				CPX.CC	.macro ' '	b1 lbl
   170 						CPX	:b1			; 
   171 						BCC	:lbl			; branch if C=0 (X-b1 < 0)
   172 				.endm		; C is now 1 (X-b1 is >= 0)
   173
   174 					; Compare X with b1 and branch if Carry is 1 (X-b1 >= 0)
   175 				CPX.CS	.macro ' '	b1 lbl
   176 						CPX	:b1			; 
   177 						BCS	:lbl			; branch if C=1 (X-b1 >= 0)
   178 				.endm		; C is now 0 (X-b1 is < 0)
   179
   180 				CPY.EQ	.macro ' '	b1 lbl			; Compare Y with b1 and branch if equal
   181 						CPY	:b1
   182 						BEQ	:lbl
   183 				.endm		; Y is now not equal to b1
   184 					
   185 				CPY.NE	.macro ' '	b1 lbl			; Compare Y with b1 and branch if not equal
   186 						CPY	:b1
   187 						BNE	:lbl
   188 				.endm		; Y is now equal to b1
   189
   190 					; Compare Y with b1 and branch if Carry is 0 (Y-b1 < 0)
   191 				CPY.CC	.macro ' '	b1 lbl
   192 						CPY	:b1			; 
   193 						BCC	:lbl			; branch if C=0 (Y-b1 < 0)
   194 				.endm		; C is now 1 (Y-b1 is >= 0)
   195
   196 					; Compare Y with b1 and branch if Carry is 1 (Y-b1 >= 0)
   197 				CPY.CS	.macro ' '	b1 lbl
   198 						CPY	:b1			; 
   199 						BCS	:lbl			; branch if C=1 (Y-b1 >= 0)
   200 				.endm		; C is now 0 (Y-b1 is < 0)
   201
   202 				; ----------------------------------------------
   203 				; Increment/Decrement + Branch Macros
   204 				; ----------------------------------------------
   205 				DEC.EQ	.macro 	' '	b1 lbl			; DEC + BEQ
   206 						DEC	:b1
   207 						BEQ	:lbl
   208 				.endm
   209
   210 				DEC.NE	.macro 	' '	b1 lbl			; DEC + BNE
   211 						DEC	:b1
   212 						BNE	:lbl
   213 				.endm
   214
   215 				INC.EQ	.macro 	' '	b1 lbl			; INC + BEQ
   216 						INC	:b1
   217 						BEQ	:lbl
   218 				.endm
   219
   220 				INC.NE	.macro 	' '	b1 lbl			; INC + BNE
   221 						INC	:b1
   222 						BNE	:lbl
   223 				.endm
   224
   225 				; ----------------------------------------------
   226 				DEX.NE	.macro 	lbl				; DEX + BNE
   227 						DEX
   228 						BNE	:lbl
   229 				.endm
   230
   231 				DEX.EQ	.macro 	lbl				; DEX + BEQ
   232 						DEX
   233 						BEQ	:lbl
   234 				.endm
   235
   236 				DEX.PL	.macro 	lbl				; DEX + BPL 
   237 						DEX
   238 						BPL	:lbl
   239 				.endm
   240
   241 				DEX.MI	.macro 	lbl				; DEX + BMI
   242 						DEX
   243 						BMI	:lbl
   244 				.endm
   245
   246 				DEX.CC	.macro 	lbl				; DEX + BCC 
   247 						DEX
   248 						BCC	:lbl
   249 				.endm
   250
   251 				DEX.CS	.macro 	lbl				; DEX + BCS
   252 						DEX
   253 						BCS	:lbl
   254 				.endm
   255
   256 				; ----------------------------------------------
   257 				DEY.EQ	.macro 	lbl				; DEY + BEQ
   258 						DEY
   259 						BEQ	:lbl
   260 				.endm
   261
   262 				DEY.NE	.macro 	lbl				; DEY + BNE
   263 						DEY
   264 						BNE	:lbl
   265 				.endm
   266
   267 				DEY.PL	.macro 	lbl				; DEY + BPL 
   268 						DEY
   269 						BPL	:lbl
   270 				.endm
   271
   272 				DEY.MI	.macro 	lbl				; DEY + BMI
   273 						DEY
   274 						BMI	:lbl
   275 				.endm
   276
   277 				DEY.CC	.macro 	lbl				; DEY + BCC 
   278 						DEY
   279 						BCC	:lbl
   280 				.endm
   281
   282 				DEY.CS	.macro 	lbl				; DEY + BCS
   283 						DEY
   284 						BCS	:lbl
   285 				.endm
   286 				; ----------------------------------------------
   287
   288 				; ----------------------------------------------
   289 				; LOAD/STORE + Branch Macros
   290 				; ----------------------------------------------
   291 				LDA.EQ	.macro 	' '	b1 lbl			; LDA + BEQ
   292 						LDA	:b1
   293 						BEQ	:lbl
   294 				.endm
   295
   296 				LDA.NE	.macro 	' '	b1 lbl			; LDA + BNE
   297 						LDA	:b1
   298 						BNE	:lbl
   299 				.endm
   300
   301 				STA.EQ	.macro 	' '	b1 lbl			; STA + BEQ
   302 						STA	:b1
   303 						BEQ	:lbl
   304 				.endm
   305
   306 				STA.NE	.macro 	' '	b1 lbl			; STA + BNE
   307 						STA	:b1
   308 						BNE	:lbl
   309 				.endm
   310
   311 				; ----------------------------------------------
   312 				; AND/OR + Branch Macros
   313 				; ----------------------------------------------
   314 				AND.EQ	.macro 	' '	p1 p2 p3		; LDA + AND + BEQ
   315 					ift :0>2	; LDA + AND + BEQ	
   316 						LDA	:p1
   317 						AND	:p2
   318 						BEQ	:p3
   319 					els		; AND + BEQ
   320 						AND	:p1
   321 						BEQ	:p2
   322 					eif
   323 				.endm
   324
   325 				AND.NE	.macro 	' '	p1 p2 p3		; LDA + AND + BNE
   326 					ift :0>2	; LDA + AND + BNE	
   327 						LDA	:p1
   328 						AND	:p2
   329 						BNE	:p3
   330 					els		; AND + BNE
   331 						AND	:p1
   332 						BNE	:p2
   333 					eif
   334 				.endm
    59 						ICL "defines.inc"		; boot.sys defines
Source: defines.inc
     1 				;-------------------------------------------------
     2 				; Register Definitions for BOOT.SYS file.
     3 				; Assembler: MADS-Assembler
     4 				; V0.1: 22-05-25, Emile first version
     5 				;-------------------------------------------------
     6
     7 				; Global Constants and Variables ***********************************************
     8 = 0000			LAB_WARM	= 	$00		; BASIC warm start entry point
     9 = 0001			Wrmjpl 		= 	LAB_WARM+1	; BASIC warm start vector jump low byte
    10 = 0002			Wrmjph 		= 	LAB_WARM+2	; BASIC warm start vector jump high byte
    11 = B000			LAB_COLD	=	$B000		; BASIC cold START
    12
    13 = 00A0			ZP_BASE         EQU     $A0		; Reserved for DOS and boot.sys
    14 = 00A0			CURR_CLUSTER    EQU     ZP_BASE         ; $A0..$A3 (32 bit) - current addressed cluster
    15 = 00A4			CURR_FAT_BLK    EQU     ZP_BASE+4       ; $A4..$A7 (32 bit) - current loaded FAT LBA
    16 = 00A8			CURR_DIR_ENTRY  EQU     ZP_BASE+8       ; $A8..$A9 (16 bit) - pointer to current addressed directory entry
    17 = 00AA			MASK            EQU     ZP_BASE+10	; $AA Mask for FAT table
    18 = 00AB			BCNT            EQU     ZP_BASE+11      ; $AB Block Counter
    19 = 00AC			NCNT            EQU     ZP_BASE+12	; $AC
    20 = 00AD			SCNT            EQU     ZP_BASE+13	; $AD Sector counter within a cluster
    21 = 00AE			RES             EQU     ZP_BASE+14	; $AE
    22
    23 = 0078			ssptr_l		EQU	$78		; BASIC filename pointer LSB
    24 = 0079			ssptr_h		EQU	$79		; BASIC filename pointer MSB
    25
    26 = 00C0			NUM32      	EQU   	$C0     	; low 32 bit number byte (moved from $F8)
    27 = 00C4			SUM32           EQU     $C4             ; low 32 bit number byte (moved from $FC)
    28 = 00CC			END_PTR		EQU	$CC		; CFC_LOAD destination pointer, also used by BIOS ROM checksum routine
    29 = 00D8			SAVEX		EQU 	$D8		; Temp. save X register (same as BIOS)
    30 = 00D9			SAVEY		EQU	$D9		; Temp. save Y register (same as BIOS)
    31 = 00DC			BLKBUF		EQU	$DC
    32 = 00DC			BLKBUFL		EQU	$DC             ; Pointer to block buffer, same in BIOS
    33 = 00DD			BLKBUFH		EQU	$DD
    34
    35 = 00E8			STOL      	EQU   	$E8     	; Store address Low, same in BIOS
    36 = 00E9			STOH      	EQU   	$E9     	; Store address High
    37 = 00EA			PSTR            EQU     $EA		; 2-byte ACIA output pointer, same in BIOS
    38 = 00EE			PSAV            EQU     $EE             ; Saved Partition Number in ASCII, same in BIOS
    39
    40 = 00F8			DIG0      	EQU   	$F8     	; 10^0 digit, used by NUMOUT and DEC2STR
    41 = 00F9			DIG1	  	EQU   	$F9	 	; 10^1 digit, used by NUMOUT and DEC2STR
    42 = 00FA			DIG2      	EQU   	$FA     	; 10^2 digit, used by NUMOUT and DEC2STR
    43
    44 = 1400			STRBUF	  	EQU   	$1400    	; input string buffer at $1400 (same as BIOS)
    45
    46 = 1806			CF_LOAD_VEC	EQU	$1806		; 2-byte vector for CF-card LOAD vector
    47 = 1808			CF_SAVE_VEC	EQU	$1808		; 2-byte vector for CF-card SAVE vector
    48 = 180A			RETURN_VECT     EQU     $180A           ; return vector to monitor caller in V1.2.1 (was $0001 in V1.2.0)
    49
    50 = 1810			NEXTINDEX       EQU     $1810		; command index
    51 = 1811			TERM_CHAR       EQU     $1811
    52 = 1812			F_ATTRIBS       EQU     $1812
    53 = 1813			TERM_FLAG       EQU     $1813		; set/clear counter termination flag
    54 = 1814			LINE_CNT        EQU     $1814		; line-counter for DIR command
    55 = 1815			CURR_FILE_CNT   EQU     $1815      	; (16 bit) - total number of files in dir
    56 = 1817			CURR_DIR_CNT    EQU     $1817      	; (16 bit) - total number of directories in dir
    57 = 1819			CURR_USED_SIZE  EQU     $1819      	; (32 bit) - total number of bytes in dir
    58 = 181D			CURR_BLK_NUM    EQU     $181D      	; directory block counter
    59 = 181E			CURR_DRIVE      EQU     $181E      	; current selected drive
    60 = 181F			CURR_CMD_PARAM  EQU     $181F      	; current command parameter
    61 = 1820			FREE_CLUSTER    EQU     $1820           ; (32 bit) - last free cluster
    62 = 1824			CURR_DIR_BLK    EQU     $1824       	; (32 bit) - current directory LBA
    63
    64 				; External Routines ************************************************************
    65
    66 = E003			MON_WARM_START  EQU     $E003
    67
    68 = E052			COUT            EQU     $E052
    69 = E05A			CROUT           EQU     $E05A
    70 = E05E			SPCOUT          EQU     $E05E
    71 = E047			CIN             EQU     $E047
    72 = E062			STRIN           EQU     $E062
    73 = E083			STROUT          EQU     $E083
    74 = E085			WRSTR           EQU     $E085
    75 = E091			HEXOUT          EQU     $E091
    76 = E09A			HEXDIG          EQU     $E09A
    77 = E0BD			DEC2STR         EQU     $E0BD
    78 = E0B5			CLRSCRN         EQU     $E0B5
    79 = E0BA			CMDDEV          EQU     $E0BA
    80 = E1AA			OPEN_DEVICE     EQU     $E1AA
    81 = E2DE			READTIME        EQU     $E2DE			; BIOS v1.2.1
    82 = E2E2			READDATE        EQU     $E2E2			; BIOS v1.2.1
    83 = F682			OS_STRING_OUT	EQU	$F682			; SPRINT in BIOS v1.2.1, but same routine
    84 = E00A			SWITCH_TO_ROM	EQU	$E00A			; Switch Basic to ROM Page ($B000-$DFFF)
    85
    86 				; Tables and Buffers ***********************************************************
    87 = 0200			DIR_BLK_BUF     EQU     $0200           	; Directory Block Buffer
    88 = 0200			DIR_BLK_BUFL    EQU     DIR_BLK_BUF     	; Lower page of directory buffer
    89 = 0300			DIR_BLK_BUFH    EQU     DIR_BLK_BUF+$100	; upper page of directory buffer
    90
    91 = 0400			CURR_VOLUME     EQU     $0400           	; Current Volume Descriptor
    92 = 0420			FILE_TABLE      EQU     CURR_VOLUME+$20  	; File Descriptor Table
    93 = 0500			MOUNT_TABLE     EQU     $0500           	; Table of mounted devices
    94 = 0600			BLOCK_BUFF      EQU     $0600           	; Data Block Buffer
    95
    96 = 5530			SIS_OFFSET	EQU	SIS_BUFF+$30		; 2-bytes: System Information Sector Offset
    97
    98 = 2000			BAS_LOAD_ADDR	EQU	$2000			; .BAS Load-address
    99 = 3000			COM_RUN_ADDR	EQU	$3000			; .COM load- and run-address
   100
   101 				; Device IDs *******************************************************************
   102 = 0000			NULL_ID		EQU	$00             	; the NULL device
   103 = 0022			FDD1_ID         EQU     $22             	; Floppy drive 1 device ID
   104 = 0023			FDD2_ID         EQU     $23             	; Floppy drive 2 device ID
   105 = 0024			SDC_ID		EQU     $24             	; SD-Card device ID
   106 = 0025			HDD1_ID		EQU     $25             	; CF-Card device ID
   107
   108 				; FAT Types ********************************************************************
   109 = 0002			FAT12_Type      EQU     $02
   110 = 0001			FAT16_Type      EQU     $01
   111 = 0000			FAT32_Type      EQU     $00
   112
   113 				; Device Driver Commands *******************************************************
   114 = 0022			CMD_READ	EQU	34              	; Read data block from device
   115 = 0023			CMD_WRITE	EQU	35              	; Write data block to device
   116 = 0025			CMD_READ_BUF	EQU	37              	; Read data block from device to standard buffer
   117 = 0026			CMD_WRITE_BUF	EQU	38              	; Write data block to device from standard buffer
   118
   119 				; Miscellaneous Constants ******************************************************
   120 = 000D			CR              EQU     $0D             	; Carriage Return ASCII Code
   121 = 0020			SPC             EQU     $20             	; Space ASCII Code
   122 = 005C			BSLASH          EQU     '\'             	; Backslash ASCII Code
   123 = 002F			FSLASH		EQU     '/'             	; Forward slash ASCII Code
   124 = 002E			DOT             EQU     '.'             	; Dot ASCII Code
   125 = 003A			COLON           EQU     ':'             	; Colon ASCII Code
   126 = 002C			COMMA           EQU     ','             	; Comma ASCII Code
   127 = 002D			MINUS           EQU     '-'             	; Minus ASCII Code
   128 = 005F			ULINE           EQU     '_'             	; Underline ASCII Code
   129
   130 				; Interchangeable Chars ********************************************************
   131 = 003E			PROMPT          EQU     '>'             	; Command Line Prompt Char
   132 = 002E			NUM_SEP         EQU     DOT	           	; Thousand Seperator Char
   133 = 005C			PATH_SEP        EQU     BSLASH          	; Path Seperator Char
   134 = 002F			OPT_SEP         EQU     FSLASH           	; Option Prefix Char
   135
   136 				; File Attributes **************************************************************
   137 = 0001			FA_READONLY     EQU     $01             	; file is read only
   138 = 0002			FA_HIDDEN       EQU     $02             	; file is hidden
   139 = 0004			FA_SYSTEM       EQU     $04             	; file is a system file
   140 = 0008			FA_LABEL        EQU     $08             	; file is a volume label
   141 = 0010			FA_DIRECTORY    EQU     $10             	; file is a directory
   142 = 0020			FA_ARCHIVE      EQU     $20             	; file is modified
   143 = 0040			FA_RESERVED1    EQU     $40
   144 = 0080			FA_LINK         EQU     $80             	; file is a link
   145
   146 				; Device Attributes ************************************************************
   147 = 0080			DA_DIRTY        EQU     $80             ; current FAT block is modified
   148
   149 				; Current Volume Descriptor (32 Bytes) *****************************************
   150 				; The BOOT routine in BIOS has already loaded the MBR into $0600, laoded the
   151 				; Volume-ID sector into $0400 and did set (most of) these variables.
   152 = 0400			D_PART_START	EQU	CURR_VOLUME+$00		; 4 Bytes - Volume ID sector LBA
   153 = 0404			D_ACTUAL_DIR    EQU     CURR_VOLUME+$04     	; 4 Bytes - Actual Directory cluster number
   154 = 0408			D_DEV_ID        EQU     CURR_VOLUME+$08 	; 1 Byte  - Device ID
   155 = 0409			D_MEDIUM_DESCR  EQU     CURR_VOLUME+$09 	; 1 Byte  - Medium Descriptor Byte
   156 										;           or Partition Number in ASCII if harddisk
   157 = 040A			D_FAT_TYPE      EQU     CURR_VOLUME+$0A 	; 1 Byte  - FAT Type (0=FAT32)
   158 = 040B			D_SECT_PER_CLST EQU     CURR_VOLUME+$0B 	; 1 Byte  - Sectors/Cluster
   159 = 040C			D_NUM_OF_FAT    EQU     CURR_VOLUME+$0C 	; 1 Byte  - Number of FATs
   160 = 040D			D_NUM_ROOT_DIR  EQU     CURR_VOLUME+$0D 	; 2 Bytes - Number of Root directory Entries
   161 = 040F			D_DEV_ATTRIBS   EQU     CURR_VOLUME+$0F 	; 1 Byte  - Device Attributes
   162 = 0410			D_START_CLS_LBA EQU     CURR_VOLUME+$10 	; 4 Bytes - Start LBA of Cluster Area (= cluster_begin_lba - 2)
   163 = 0414			D_START_FAT1    EQU     CURR_VOLUME+$14 	; 4 Bytes - Start LBA of FAT1
   164 = 0418			D_START_FAT2    EQU     CURR_VOLUME+$18 	; 4 Bytes - Start LBA of FAT2
   165 = 041C			D_START_DIR     EQU     CURR_VOLUME+$1C 	; 4 Bytes - root_dir_first_cluster (usually 2), also LBA nr for FAT16/12
   166
   167 = 0420			D_SUBDIR_NAME	EQU	FILE_TABLE+$00		; 11 Bytes - Name of entire path (root dir is \)
   168 					
   169 				; Directory Descriptor (32 Bytes) **********************************************
   170
   171 = 0000			D_FILENAME      EQU     $00             	; 8 Bytes - 8 Character Filename
   172 = 0008			D_FILEEXT       EQU     $08             	; 3 Bytes - 3 Character File Extension
   173 = 000B			D_ATTRIBUTES    EQU     $0B             	; 1 Byte  - File Attributes
   174 = 000E			D_CREATE_TIME   EQU     $0E             	; 2 Bytes - Creation Time
   175 = 0010			D_CREATE_DATE	EQU	$10			; 2 Bytes - Create Date 
   176 = 0012			D_ACCESS_DATE   EQU     $12             	; 2 Bytes - Last Accessed Date
   177 = 0014			D_START_CLSTH   EQU     $14             	; 2 Bytes - Start Cluster High Word (FAT32)
   178 = 0016			D_LAST_WR_TIME  EQU     $16             	; 2 Bytes - Last Write Time
   179 = 0018			D_LAST_WR_DATE  EQU     $18             	; 2 Bytes - Last Write Date
   180 = 001A			D_START_CLST    EQU     $1A             	; 2 Bytes - Start Cluster Low Word
   181 = 001C			D_FILE_SIZE     EQU     $1C             	; 4 Bytes - File Size
   182
   183
    60 						
    61 				.if	USE_XMODEM = 1
    62 					.word	PROG_START			; Needed for XMODEM lm command loading .bin files
    63 				.endif
    64
    65 				; ******************************************************************************
    66 				; Start of 1st Block of BOOT.SYS ***********************************************
    67 				; ******************************************************************************
    68 = 4000			LOAD_ADDRESS	EQU	$4000
    69 						ORG	LOAD_ADDRESS		; the program start address
    70 				PROG_START					; Program Start Address
    71 						ICL 	"boot_sys_block1.asm"	; boot.sys first block (< 512 bytes)
Source: boot_sys_block1.asm
     1 				;-------------------------------------------------------------------------------
     2 				; This file contains the first block of the BOOT.SYS file. This first block
     3 				; MUST fit into a single sector of 512 bytes. This first sector is already
     4 				; loaded into memory by the boot-block loader on the CF-card.
     5 				;
     6 				; The main purpose of this first block is to load the remainder of BOOT.sys
     7 				; into memory and then to execute it.
     8 				; 
     9 				; Assembler: MADS-Assembler
    10 				; V0.1: 22-05-25, Emile first version
    11 				;-------------------------------------------------------------------------------
    12
    13 				; subtract two clusters from START_CLUSTER address *****************************
    14 4000 AD 0B 04		INIT            LDA     D_SECT_PER_CLST		; Written by FAT32 boot-code
    15 4003 0A			                ASL     			; A = 2 * D_SECT_PER_CLST
    16 4004 AA			                TAX				; X = 2 * D_SECT_PER_CLST 
    17 4005 AD 10 04		                LDA     D_START_CLS_LBA		; This is cluster_begin_lba
    18 4008 8E 10 04		                STX     D_START_CLS_LBA		; D_START_CLS_LBA = 2 * D_SECT_PER_CLST
    19 400B 38 ED 10 04				SUB	D_START_CLS_LBA		; A = D_START_CLS_LBA - 2 * D_SECT_PER_CLST
    20 400F 8D 10 04		                STA     D_START_CLS_LBA		; D_START_CLS_LBA -= 2 * D_SECT_PER_CLST
    21 4012 A2 01		                LDX     #$01
    22 4014 A0 03		                LDY     #$03
    23 4016 BD 10 04		INIT2           LDA     D_START_CLS_LBA,X	; D_START_CLS_LBA is 32-bits
    24 4019 E9 00		                SBC     #$00
    25 401B 9D 10 04 E8		                STA     D_START_CLS_LBA,X+
    26 401F			                DEY.NE	INIT2			; branch if not done yet
Macro: DEY.NE [Source: macros.inc]
     1 401F 88					DEY
     2 4020 D0 F4				BNE	INIT2
Source: boot_sys_block1.asm
    27 				                
    28 				; initialize current FAT block value with 0 ************************************
    29 4022 84 A4		                STY     CURR_FAT_BLK		; CURR_FAT_BLK = 0L
    30 4024 84 A5		                STY     CURR_FAT_BLK+1
    31 4026 84 A6		                STY     CURR_FAT_BLK+2
    32 4028 84 A7		                STY     CURR_FAT_BLK+3
    33 				                
    34 				; set first cluster of BOOT.SYS as the current cluster *************************
    35 402A A0 15		INIT3           LDY     #$15
    36 402C A2 03		                LDX     #$03
    37 402E 20 74 40		                JSR     SET_WORD            	; store cluster start byte [3:2]
    38 4031 A0 1B		                LDY     #$1B
    39 4033 20 74 40		                JSR     SET_WORD            	; store cluster start byte [1:0]
    40 				                
    41 				; calculate BOOTS.SYS file size in blocks **************************************
    42 4036 A9 54		INIT4           LDA     #>BOOT_SYS_END      	; Cal. total nr of blocks needed to load the complete
    43 4038 38 E9 40		                SUB     #>PROG_START        	; BOOT.SYS file into memory
    44 403B 4A			                LSR     		    	; 2 pages = 1 sector of 512 bytes
    45 403C 85 AB		                STA     BCNT                	; store result into block counter
    46 403E			                LDA.EQ  #<BOOT_SYS_END BOOT_SYS	; branch if LSB is 0
Macro: LDA.EQ [Source: macros.inc]
     1 403E A9 D3				LDA	#<BOOT_SYS_END
     2 4040 F0 02				BEQ	BOOT_SYS
Source: boot_sys_block1.asm
    47 4042 E6 AB		                INC     BCNT                	; some bytes are left, so increment block counter
    48 				                
    49 				; load all blocks of BOOT.SYS file into memory *********************************
    50 4044			BOOT_SYS        DEC.EQ  BCNT OS_START          	; first block is already read in, branch if no more blocks to read
Macro: DEC.EQ [Source: macros.inc]
     1 4044 C6 AB				DEC	BCNT
     2 4046 F0 29				BEQ	OS_START
Source: boot_sys_block1.asm
    51 4048 AD 0B 04 85 AD	                MVA	D_SECT_PER_CLST SCNT	; SCNT = D_SECT_PER_CLST
    52 404D			LOAD_NEXT_BLK   DEC.EQ  SCNT NEXT_CLUSTER      	; branch if all blocks in cluster read
Macro: DEC.EQ [Source: macros.inc]
     1 404D C6 AD				DEC	SCNT
     2 404F F0 10				BEQ	NEXT_CLUSTER
Source: boot_sys_block1.asm
    53 4051 20 81 41		                JSR     INC_32              	; no, increment block address
    54 4054			LOAD_BLK        LDXYI   NUM32			; NUM32 contains LBA of a boot.sys cluster
Macro: LDXYI [Source: macros.inc]
     1 4054 A2 C0			LDX	<NUM32				; MADS makes this immediate
     2 4056 A0 00			LDY	>NUM32
Source: boot_sys_block1.asm
    55 4058 20 4B 41		                JSR     DEV_RD_LBLK         	; and read next block of BOOT.SYS
    56 405B			                DEC.EQ  BCNT OS_START		; branch if no more blocks to read
Macro: DEC.EQ [Source: macros.inc]
     1 405B C6 AB				DEC	BCNT
     2 405D F0 12				BEQ	OS_START
Source: boot_sys_block1.asm
    57 405F D0 EC		                BNE     LOAD_NEXT_BLK       	; yes, read next block in cluster
    58
    59 				; next cluster needs to be loaded considering the volume FAT type **************
    60 4061 20 7E 40		NEXT_CLUSTER    JSR     GET_NEXT_CLSTR      	; get next cluster in chain in CURR_CLUSTER
    61 4064 B0 0B		                BCS     OS_START            	; if EOF then start OS
    62 						
    63 4066 20 F8 40		                JSR     CLUSTER_TO_BLK      	; convert CURR_CLUSTER to LBA number in NUM32
    64 4069 AD 0B 04 85 AD	                MVA	D_SECT_PER_CLST SCNT	; SCNT = D_SECT_PER_CLST
    65 406E 4C 54 40		                JMP     LOAD_BLK            	; load first block of cluster
    66 				                
    67 4071 4C 22 42		OS_START        JMP     OS_MAIN             	; jump to OS entry point
    68
    69 				;-------------------------------------------------------------------------------
    70 				; Copy a word, that is part of a cluster nr for boot.sys, into CURR_CLUSTER.
    71 				; PSTR is already set by the FAT boot-block routine.
    72 				;-------------------------------------------------------------------------------
    73 4074 20 77 40		SET_WORD        JSR     SET_BYTE
    74 4077 B1 EA 88 95 A0 CA	SET_BYTE        MVA	(PSTR),Y- CURR_CLUSTER,X- 	; load a byte from dir entry and store in CURR_CLUSTER
    75 407D 60			                RTS
    76 						
    77 				; **** Get Next Cluster Of Cluster Chain ***************************************
    78 				; Input:  CURR_CLUSTER[0:3] - current cluster
    79 				; Output: C = 0 valid cluster in CURR_CLUSTER[0:3]; C = 1 EOF
    80 				; ******************************************************************************
    81 407E			GET_NEXT_CLSTR  LDXYI   D_START_FAT1      	; load base block address of FAT into NUM32[0:3]
Macro: LDXYI [Source: macros.inc]
     1 407E A2 14			LDX	<D_START_FAT1				; MADS makes this immediate
     2 4080 A0 04			LDY	>D_START_FAT1
Source: boot_sys_block1.asm
    82 4082 20 61 41		                JSR     LOAD_32		    	; NUM32 = LBA nr. of FAT
    83
    84 4085			                LDA.EQ  D_FAT_TYPE  FAT32      	; check FAT type and branch if FAT32 (0)
Macro: LDA.EQ [Source: macros.inc]
     1 4085 AD 0A 04				LDA	D_FAT_TYPE
     2 4088 F0 14				BEQ	FAT32
Source: boot_sys_block1.asm
    85 408A					CMP.EQ	#FAT16_Type FAT16	; branch if FAT16
Macro: CMP.EQ [Source: macros.inc]
     1 408A C9 01				CMP	#FAT16_TYPE
     2 408C F0 01				BEQ	FAT16
Source: boot_sys_block1.asm
    86 				                
    87 				; **** Decode FAT12 Entry ******************************************************
    88 				; **** Two FAT12 entries A and B coded together as AA BA BB ********************
    89 408E 60			FAT12           RTS				; Removed for DEBUG
    90
    91 				; **** Decode FAT16 Entry ******************************************************
    92 				; **** a FAT16 cluster C is coded as CC CC *************************************
    93 408F A6 A1		FAT16           LDX     CURR_CLUSTER+1      	; load byte 2 of current cluster
    94 4091 20 83 41		                JSR     ADD_32_8            	; and add it to FAT base block address
    95 4094 20 1D 41		                JSR     LOAD_FAT_BLK        	; load this block
    96 4097 A5 A0		                LDA     CURR_CLUSTER        	; load index into the FAT block
    97 4099 A2 02		                LDX     #$02                	; two bytes to read for a FAT16 entry
    98 409B 4C BE 40				JMP	READ_FAT_ENTRY
    99 						
   100 				; **** Decode FAT32 Entry ******************************************************
   101 				; **** a FAT32 cluster C is coded as CC CC CC 0C *******************************
   102 409E			FAT32           LDXYI	(CURR_CLUSTER+1)		; Get CURR_CLUSTER+1 into SUM32
Macro: LDXYI [Source: macros.inc]
     1 409E A2 A1			LDX	<(CURR_CLUSTER+1)				; MADS makes this immediate
     2 40A0 A0 00			LDY	>(CURR_CLUSTER+1)
Source: boot_sys_block1.asm
   103 40A2 20 5B 41				JSR     LOAD_S32            	; load CURR_CLUSTER[1:3] into SUM[0:2] = FAT block index
   104 40A5 A2 00 86 C7				MVX	#$00 SUM32+3		; clear garbage byte SUM[3]: SUM32 = CURR_CLUSTER / 256
   105 40A9 A0 03		                LDY     #$03
   106 40AB A5 A0		                LDA     CURR_CLUSTER        	; load CURR_CLUSTER[0] = FAT entry index byte
   107 40AD 0A			                ASL                         	; shift bit 7 into carry flag and multiply entry index by 2
   108 40AE 48			                PHA                         	; save entry index to stack
   109 40AF 36 C4 E8		FAT32_LOOP      ROL     SUM32,X+             	; shift bit 7 of entry index into bit 0 of block index
   110 40B2			                DEY.NE  FAT32_LOOP	    	; branch if not done yet
Macro: DEY.NE [Source: macros.inc]
     1 40B2 88					DEY
     2 40B3 D0 FA				BNE	FAT32_LOOP
Source: boot_sys_block1.asm
   111 						
   112 						; A FAT entry is 4 bytes and there are 128 FAT entries in one FAT-sector
   113 40B5 20 8F 41		                JSR     ADD_32_32	    	; NUM32 = START_FAT1 + CURR_CLUSTER / 128
   114 40B8 20 1D 41		                JSR     LOAD_FAT_BLK	    	; Load FAT sector into standard buffer ($600)
   115 40BB 68			                PLA                         	; restore entry index
   116 40BC A2 04		                LDX     #$04                	; four bytes to read for a FAT32 entry
   117 				;               JMP     (RW_FAT_ENTRY)      	; Fall-through to READ_FAT_ENTRY
   118 				                
   119 				; **** Read FAT 16 or FAT 32 Entry *********************************************
   120 				; INPUT : X - Length of FAT Entry in Bytes
   121 				; OUTPUT: C = 0: Valid Cluster in CURR_CLUSTER[0:3]; C = 1: EOF
   122 				; example: 08000000 => next cluster = 8: A=RES=$00, C=0
   123 				;          FFFFFF0F => EOF: A=RES=$FF, C=1 
   124 				; ******************************************************************************
   125 				;RW_FAT_ENTRY    .word      READ_FAT_ENTRY
   126 40BE			READ_FAT_ENTRY  
   127 40BE A0 FF 84 AA				MVY     #$FF MASK              	; standard EOF mask is $FF
   128 40C2 0A			                ASL                         	; multiply entry index by 2 (4 in total now)
   129 40C3 A8			                TAY                         	; store entry index into Y
   130 40C4 86 AC		                STX     NCNT                	; store length of entry
   131 40C6 A2 00 86 AE		                MVX     #$00 RES		;
   132 40CA 20 EA 40		LOOP_FAT_ENTRY  JSR     READ_ENTRY_BYTE     	; read entry byte
   133 40CD 95 A0		SET_ENTRY_BYTE  STA     CURR_CLUSTER,X      	; store byte in curr_cluster
   134 40CF 08			                PHP                         	; save carry flag
   135 40D0			                CPX.NE  #$03 CMP_MASK          	; branch if not the upper byte of a FAT32 entry
Macro: CPX.NE [Source: macros.inc]
     1 40D0 E0 03				CPX	#$03
     2 40D2 D0 04				BNE	CMP_MASK
Source: boot_sys_block1.asm
   136 40D4 A2 0F 86 AA		                MVX     #$0F MASK              	; yes, we must change the mask to $0F
   137 40D8			CMP_MASK        CMP.NE 	MASK READ_FAT_ENTRY1   	; cluster byte = EOF mask? Read next byte if not
Macro: CMP.NE [Source: macros.inc]
     1 40D8 C5 AA				CMP	MASK
     2 40DA D0 02				BNE	READ_FAT_ENTRY1
Source: boot_sys_block1.asm
   138 40DC 85 AE		                STA     RES                 	; compare cluster byte is equal EOF mask
   139 40DE 28			READ_FAT_ENTRY1 PLP                         	; restore carry flag
   140 40DF C8			                INY
   141 40E0 E8			                INX
   142 40E1			                DEC.NE  NCNT LOOP_FAT_ENTRY   	; loop until all bytes copied
Macro: DEC.NE [Source: macros.inc]
     1 40E1 C6 AC				DEC	NCNT
     2 40E3 D0 E5				BNE	LOOP_FAT_ENTRY
Source: boot_sys_block1.asm
   143 40E5 A5 AE		                LDA     RES
   144 40E7 C9 FF		                CMP     #$FF                	; check if result cluster is $FFFF or $0FFFFFFF (EOF)
   145 40E9 60			                RTS
   146 				                
   147 				; **** Read a Single FAT Entry Byte From Block Buffer **************************
   148 				; INPUT : Y - Index To FAT Entry Byte
   149 				; OUTPUT: A = Read Byte from FAT table
   150 				; ******************************************************************************
   151 40EA			READ_ENTRY_BYTE AND.NE  #$01 CURR_CLUSTER+1 RD_UPPER_PAGE	; check bit 0 (= bit 7 of CURR_CLUSTER[0:3] because of ASL in FAT32 routine)
Macro: AND.NE [Source: macros.inc]
     2 40EA A9 01				LDA	#$01
     3 40EC 25 A1				AND	CURR_CLUSTER+1
     4 40EE D0 04				BNE	RD_UPPER_PAGE
Source: boot_sys_block1.asm
   152 40F0 B9 00 06		                LDA     BLOCK_BUFF,Y        			; read entry byte from lower half of block buffer
   153 40F3 60			                RTS			    			; return
   154 40F4 B9 00 07		RD_UPPER_PAGE   LDA     BLOCK_BUFF+256,Y    			; read entry byte from upper half of block buffer
   155 40F7 60			                RTS			    			; return
   156 				                
   157 				; **** Calculate LBA From Given Cluster Address ********************************
   158 				; At the start of boot.sys, 2 clusters were already subtracted from D_START_CLS_LBA.
   159 				; Used formula: lba_addr = cluster_begin_lba + (cluster_number-2) * sectors_per_cluster.
   160 				;
   161 				; INPUT : CURR_CLUSTER[0:3] - Current File Cluster number
   162 				; OUTPUT: NUM32[0:3]        - LBA of current file cluster number
   163 				; ******************************************************************************
   164 40F8			CLUSTER_TO_BLK  LDXYI   CURR_CLUSTER
Macro: LDXYI [Source: macros.inc]
     1 40F8 A2 A0			LDX	<CURR_CLUSTER				; MADS makes this immediate
     2 40FA A0 00			LDY	>CURR_CLUSTER
Source: boot_sys_block1.asm
   165 40FC 20 61 41		CLSTR_TO_BLK    JSR     LOAD_32		     	; NUM32 = CURR_CLUSTER
   166 40FF AD 0B 04		CLSTR_TO_LBA    LDA     D_SECT_PER_CLST
   167 4102 4A			                LSR      		     	; A = D_SECT_PER_CLST / 2
   168 4103 F0 0E		                BEQ     ADD_START_CLSTR	     	; branch if D_SECT_PER_CLST = 1
   169 						
   170 4105 A2 00		LOOP1           LDX     #$00		     	; NUM32 = CURR_CLUSTER * D_SECT_PER_CLST
   171 4107 A0 04		                LDY     #$04
   172 4109 18			                CLC
   173 410A 36 C0 E8		LOOP2           ROL     NUM32,X+	     	; NUM32 <<= 1
   174 410D			                DEY.NE	LOOP2		     	; branch if not done yet
Macro: DEY.NE [Source: macros.inc]
     1 410D 88					DEY
     2 410E D0 FA				BNE	LOOP2
Source: boot_sys_block1.asm
   175 						
   176 4110 4A			                LSR      		     	; A = D_SECT_PER_CLST >>= 1
   177 4111 D0 F2		                BNE     LOOP1		     	; 
   178 						
   179 4113			ADD_START_CLSTR LDXYI   D_START_CLS_LBA    	; D_START_CLS_LBA = Cluster_begin_lba
Macro: LDXYI [Source: macros.inc]
     1 4113 A2 10			LDX	<D_START_CLS_LBA				; MADS makes this immediate
     2 4115 A0 04			LDY	>D_START_CLS_LBA
Source: boot_sys_block1.asm
   180 4117 20 5B 41		                JSR     LOAD_S32	     	; NUM32 = Cluster_begin_lba
   181 411A 4C 8F 41		                JMP     ADD_32_32	     	; NUM32 = Cluster_begin_lba + CURR_CLUSTER * D_SECT_PER_CLST
   182
   183 				; **** Load A Block From FAT Into The Std Buffer ($600) ************************
   184 				; Input: NUM32: LBA number of FAT sector to load
   185 				; ******************************************************************************
   186 411D A2 03		LOAD_FAT_BLK    LDX     #$03
   187 411F 86 AE		                STX     RES                 	; initialize byte counter
   188 				                
   189 				; check if current FAT block and last loaded FAT block are identical ***********
   190 4121 B5 C0		CHK_FAT_BLK     LDA     NUM32,X             		; load one byte of new block pointer
   191 4123			                CMP.NE 	CURR_FAT_BLK,X SET_CURR_FATBLK	; branch if not the same as the old one
Macro: CMP.NE [Source: macros.inc]
     1 4123 D5 A4				CMP	CURR_FAT_BLK,X
     2 4125 D0 02				BNE	SET_CURR_FATBLK
Source: boot_sys_block1.asm
   192 						
   193 4127 C6 AE		                DEC     RES                 	; if equal decrement number of unequal bytes
   194 4129 95 A4 CA		SET_CURR_FATBLK STA     CURR_FAT_BLK,X-      	; store new block pointer byte as current byte
   195 412C 10 F3		                BPL     CHK_FAT_BLK         	; compare and store more bytes if X >= 0
   196 						
   197 412E A5 AE		                LDA     RES                 	; RES is decremented down to -1 if all bytes equal
   198 4130 30 13		                BMI     LOAD_FAT_END        	; RES = $FF -> FAT block is already loaded, just exit
   199 				                
   200 4132			                PHW	BLKBUF			; save old memory pointer to stack
Macro: PHW [Source: macros.inc]
     1 4132 A5 DC			LDA	BLKBUF
     2 4134 48				PHA
     3 4135 A5 DD			LDA	BLKBUF+1
     4 4137 48				PHA
Source: boot_sys_block1.asm
   201 4138			                LDXYI   NUM32
Macro: LDXYI [Source: macros.inc]
     1 4138 A2 C0			LDX	<NUM32				; MADS makes this immediate
     2 413A A0 00			LDY	>NUM32
Source: boot_sys_block1.asm
   202 413C 20 46 41		                JSR     DEV_RD_LBLK_BUF     	; load FAT block into standard buffer ($600)
   203 413F					PLW	BLKBUF			; restore old memory pointer from stack
Macro: PLW [Source: macros.inc]
     1 413F 68				PLA
     2 4140 85 DD			STA	BLKBUF+1
     3 4142 68				PLA
     4 4143 85 DC			STA	BLKBUF
Source: boot_sys_block1.asm
   204 4145 60			LOAD_FAT_END    RTS
   205 				                
   206 				; **** Read Logical Block To Standard Buffer ($0600) ***************************
   207 				; Input: [X,Y] points to 32-bit LBA
   208 				; ******************************************************************************
   209 4146 A9 25		DEV_RD_LBLK_BUF  LDA    #CMD_READ_BUF	        ; Read sector with LBA nr into $0600
   210 4148 4C BA E0		                 JMP    CMDDEV			; Call Device-driver Read routine
   211 				                
   212 				; **** Read Logical Block ******************************************************
   213 				; Input: [X,Y] points to 32-bit LBA
   214 				;        BLKBUF,BLKBUFH = 16 Bit Destination Address
   215 				; ******************************************************************************
   216 414B A9 22		DEV_RD_LBLK     LDA     #CMD_READ	        ; Read sector with LBA nr into BLKBUF
   217 414D 4C BA E0		                JMP     CMDDEV			; Call Device-driver Read routine
   218 				                
   219 				; Arithmetic Functions *********************************************************
   220 				; ******************************************************************************
   221
   222 				; **** Load a 16 Bit Value Into NUM32 ******************************************
   223 				; Input:  UInt16[X,Y] = 16 Bit Unsigned Integer
   224 				; ******************************************************************************
   225 4150			LOAD_16         STXY	NUM32			; Load LSB in NUM32 and MSB in NUM32+1
Macro: STXY [Source: macros.inc]
     1 4150 86 C0			STX	NUM32
     2 4152 84 C1			STY	NUM32+1
Source: boot_sys_block1.asm
   226 4154 A2 00 86 C2 86 C3			MWX	#0 NUM32+2		; Zero upper 16-bits
   227 415A 60			                RTS			   	; return
   228 				                
   229 				; **** Load a 32 Bit Value Into SUM32 ******************************************
   230 				; Input:  X,Y = Ptr[LO:HI] to 32 Bit Integer
   231 				; ******************************************************************************
   232 415B 86 E8		LOAD_S32        STX     STOL		   	; store pointer LSB
   233 415D A2 07		                LDX     #$07		   	; SUM32 is 4 bytes above NUM32 in memory
   234 415F D0 04		                BNE     LOAD_32_1	   	; branch always
   235
   236 				; **** Load a 32 Bit Value Into NUM32 ******************************************
   237 				; Input:  X,Y = Ptr[LO:HI] to 32 Bit Integer
   238 				; ******************************************************************************
   239 4161 86 E8		LOAD_32         STX     STOL		   	; store pointer LSB
   240 4163 A2 03		                LDX     #$03
   241 4165 84 E9		LOAD_32_1       STY     STOH		   	; store pointer MSB
   242 4167 A0 03		                LDY     #$03
   243 4169 B1 E8 95 C0 CA	LOOP_LOAD_32    MVA 	(STOL),Y NUM32,X-	; get byte and store in NUM32 (or SUM32)
   244 416E			                DEY.PL  LOOP_LOAD_32	   	; branch if not done yet
Macro: DEY.PL [Source: macros.inc]
     1 416E 88					DEY
     2 416F 10 F8				BPL	LOOP_LOAD_32
Source: boot_sys_block1.asm
   245 4171 60			                RTS			   	; return
   246 				                
   247 				; **** Store 32 Bit Value In NUM32 To Destination At Ptr[X,Y] ******************
   248 				; Input:  X,Y = Ptr[LO:HI] to 32 Bit Integer
   249 				; ******************************************************************************
   250 4172			STORE_32        STXY	STOL			; store pointer LSB and MSB
Macro: STXY [Source: macros.inc]
     1 4172 86 E8			STX	STOL
     2 4174 84 E9			STY	STOL+1
Source: boot_sys_block1.asm
   251 4176 A0 03		STORE_32_D      LDY     #$03		   	; 1 DWORD = 4 bytes
   252 4178 B9 C0 00 91 E8 88	LOOP_STORE_32   MVA     NUM32,Y (STOL),Y-   	; get number and store it
   253 417E 10 F8		                BPL     LOOP_STORE_32	   	; branch if not done yet
   254 4180 60			                RTS			   	; return
   255
   256 				; **** Increment a 32 Bit Value ************************************************
   257 				; NUM32[0:3] = 32 Bit Integer - NUM32 = NUM32 + 1
   258 				; ******************************************************************************
   259 4181 A2 01		INC_32          LDX     #$01
   260
   261 				; **** Add a 8 Bit Value To a 32 Bit Value *************************************
   262 				; Input X = 8 Bit Integer, NUM32[0:3] = 32 Bit Integer - NUM32 = UInt[X] + NUM32
   263 				; ******************************************************************************
   264 4183 A0 00		ADD_32_8        LDY     #$00
   265
   266 				; **** Add a 16 Bit Value To a 32 Bit Value ************************************
   267 				; Input X,Y = 16 Bit Integer, NUM32[0:3] = 32 Bit Integer - NUM32 = UInt[X,Y] + NUM32
   268 				; ******************************************************************************
   269 4185			ADD_32_16       STXY	SUM32			; Store byte or word in lower word
Macro: STXY [Source: macros.inc]
     1 4185 86 C4			STX	SUM32
     2 4187 84 C5			STY	SUM32+1
Source: boot_sys_block1.asm
   270 4189 A2 00 86 C6 86 C7			MWX	#0 SUM32+2		; Clear upper 16-bits of DWORD
   271
   272 				; **** Add a 32 Bit Value To a 32 Bit Value ************************************
   273 				; Input SUM32[0:3] = 32 Bit Integer, NUM32[0:3] = 32 Bit Integer  - NUM32 = SUM32 + NUM32
   274 				; ******************************************************************************
   275 418F 18			ADD_32_32       CLC			   	; clear carry flag
   276 4190 A2 00		                LDX     #$00		   	; start with byte 0
   277 4192 08			                PHP			   	; save carry flag
   278 4193 28			ADD_LOOP        PLP			   	; get carry flag back
   279 4194 B5 C4		                LDA     SUM32,X		   	; Get SUM32 byte
   280 4196 75 C0 95 C0		                ADC:STA NUM32,X		   	; num32 = num32 + sum32, save in num32
   281 419A 08			                PHP			   	; save carry flag
   282 419B E8			                INX			   	; next byte
   283 419C			                CPX.NE  #$04 ADD_LOOP		; branch if not all bytes done yet
Macro: CPX.NE [Source: macros.inc]
     1 419C E0 04				CPX	#$04
     2 419E D0 F3				BNE	ADD_LOOP
Source: boot_sys_block1.asm
   284 41A0 28			                PLP			   	; restore stack
   285 41A1 60			                RTS			   	; return
    72 				               
    73 				; ******************************************************************************
    74 				; Start of remaining BOOT.SYS blocks *******************************************
    75 				; ******************************************************************************
    76 41A2					ORG     LOAD_ADDRESS + $0200
    77 4200			BLOCK_2
    78 4200					ICL 	"boot_sys_os.asm"	; OS portion of boot.sys
Source: boot_sys_os.asm
     1 				;-------------------------------------------------------------------------------
     2 				; This file contains the OS portion of the BOOT.SYS file.
     3 				; 
     4 				; Assembler: MADS-Assembler
     5 				; V0.1: 22-05-25, Emile first version
     6 				;-------------------------------------------------------------------------------
     7
     8 				; ******************************************************************************
     9 				; NUM32 shl X
    10 				; ******************************************************************************
    11 4200			SHL_32          ASL32	NUM32		  	; SHL with C=0
Macro: ASL32 [Source: macros.inc]
     1 4200 06 C0			ASL     NUM32		  		; SHL with C=0
     2 4202 26 C1		        ROL     NUM32+1		  
     3 4204 26 C2		        ROL     NUM32+2
     4 4206 26 C3		        ROL     NUM32+3		  
Source: boot_sys_os.asm
    12 4208			                DEX.NE	SHL_32		  	; decrement #shifts, branch if not done yet
Macro: DEX.NE [Source: macros.inc]
     1 4208 CA					DEX
     2 4209 D0 F5				BNE	SHL_32
Source: boot_sys_os.asm
    13 420B 60			                RTS			  	; return
    14
    15 				; ******************************************************************************
    16 				; NUM32 shr X
    17 				; ******************************************************************************
    18 420C			SHR_32          LSR32	NUM32			; SHR with C=0
Macro: LSR32 [Source: macros.inc]
     1 420C 46 C3			LSR     NUM32+3		  		; SHR with C=0
     2 420E 66 C2		        ROR     NUM32+2
     3 4210 66 C1		        ROR     NUM32+1
     4 4212 66 C0		        ROR     NUM32
Source: boot_sys_os.asm
    19 4214			                DEX.NE  SHR_32		  	; decrement #shifts, branch if not done yet
Macro: DEX.NE [Source: macros.inc]
     1 4214 CA					DEX
     2 4215 D0 F5				BNE	SHR_32
Source: boot_sys_os.asm
    20 4217 60			                RTS			  	; return
    21 				                
    22 				; **** Write Logical Block From Standard Buffer ********************************
    23 				; Input: [X,Y] points to 32-bit LBA
    24 4218 A9 26		DEV_WR_LBLK_BUF  LDA    #CMD_WRITE_BUF	  	; Call Device-driver Write routine
    25 421A 4C BA E0		                 JMP    CMDDEV
    26
    27 				; **** Write Logical Block *****************************************************
    28 				; Input: [X,Y] points to 32-bit destination LBA
    29 				;        BLKBUF,BLKBUFH = 16 Bit Source Address
    30 421D A9 23		DEV_WR_LBLK      LDA     #CMD_WRITE		; Call Device-driver Write routine
    31 421F 4C BA E0		                 JMP     CMDDEV
    32
    33 				; ******************************************************************************
    34 				; *                               OS Entry Point                               *
    35 				; ******************************************************************************
    36 4222			OS_MAIN         PRSTR	MSG_BOOT			; Print boot-message
Macro: PRSTR [Source: macros.inc]
     1 4222 A2 B6			LDX	<MSG_BOOT				; MADS makes this immediate
     2 4224 A0 49			LDY	>MSG_BOOT
Source: boot_sys_os.asm
     2 4226 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_os.asm
    37 4229 20 C4 47		                JSR     OS_SET_ROOT_DIR	     		; set D_ACTUAL_DIR and CURR_DIR_BLK to root-dir
    38 				                
    39 				; Init CFC LOAD and SAVE VECTORS ***********************************************
    40 422C A9 DA 8D 06 18 A9 + 		MWA	#CFC_LOAD CF_LOAD_VEC		; macro CF_LOAD_VEC = CFC_LOAD, Used by BASIC with CMD_LOAD
    41 4236 A9 10 8D 08 18 A9 + 		MWA	#CFC_SAVE CF_SAVE_VEC		; macro CF_SAVE_VEC = CFC_SAVE, Used by BASIC with CMD_SAVE
    42 4240 A9 9E 8D 0A 18 A9 + 		MWA	#OS_SHELL_ENTRY RETURN_VECT	; Return-vector for Monitor and BASIC
    43 424A A2 00 86 01 86 02			MWX	#0 Wrmjpl			; Reset BASIC warm-start vector, so that a reboot is also a BASIC cold-start
    44 				                
    45 				; Clear Mount Table ************************************************************
    46 4250 18			                CLC
    47 4251 A9 00 9D 08 05	CLR_MOUNT_TABLE MVA	#NULL_ID MOUNT_TABLE+8,X	; set device ID to NULL device
    48 4256 8A					TXA                          		; index to mount table into A
    49 4257 69 20		                ADC     #$20                 		; set to next entry
    50 4259 AA			                TAX
    51 425A 90 F5		                BCC     CLR_MOUNT_TABLE      		; repeat until all entries cleared
    52 				                
    53 				; Set Boot Device As Current Device ********************************************
    54 425C A2 00		                LDX     #$00		     	; X=0
    55 425E A0 00		                LDY     #$00                 	; set index to mount table = 0
    56 4260 AD 08 04		                LDA     D_DEV_ID             	; get boot device ID
    57 4263			CHECK_FDC1      CMP.EQ  #FDD1_ID SET_BOOT_DRV	; If boot drive is FDD1, set current drive to A:
Macro: CMP.EQ [Source: macros.inc]
     1 4263 C9 22				CMP	#FDD1_ID
     2 4265 F0 0A				BEQ	SET_BOOT_DRV
Source: boot_sys_os.asm
    58 4267 E8			                INX		     	     	; X=2
    59 4268 A0 20		                LDY     #$20                 	; set index to mount table = 32
    60 426A			CHECK_FDC2      CMP.EQ  #FDD2_ID SET_BOOT_DRV	; If boot drive is FDD2, set current drive to B:
Macro: CMP.EQ [Source: macros.inc]
     1 426A C9 23				CMP	#FDD2_ID
     2 426C F0 03				BEQ	SET_BOOT_DRV
Source: boot_sys_os.asm
    61 426E E8			                INX                          	; else set current drive (SDD or a HDD) to C:
    62 426F A0 40		                LDY     #$40                 	; set index to mount table = 64
    63 4271 8E 1E 18		SET_BOOT_DRV    STX     CURR_DRIVE	     	; 0=FDD1, 1=FDD2, 2=SD/CF card
    64
    65 				; Add Boot Device To Mount Table ***********************************************
    66 4274 A2 00		                LDX     #$00
    67 4276 BD 00 04 E8 99 00 + ADD_DEVBLK      MVA 	CURR_VOLUME,X+ MOUNT_TABLE,Y+	; read from current device block and write to mount table
    68 427E			                CPX.NE  #32 ADD_DEVBLK         		; 32 bytes to copy
Macro: CPX.NE [Source: macros.inc]
     1 427E E0 20				CPX	#32
     2 4280 D0 F4				BNE	ADD_DEVBLK
Source: boot_sys_os.asm
    69 4282 A9 F8		                LDA     #$F8
    70 4284			                CMP.NE  D_MEDIUM_DESCR CHK_FAT_TYPE	; Branch if boot device is not a harddisk
Macro: CMP.NE [Source: macros.inc]
     1 4284 CD 09 04				CMP	D_MEDIUM_DESCR
     2 4287 D0 05				BNE	CHK_FAT_TYPE
Source: boot_sys_os.asm
    71 4289 A5 EE 8D 09 04	                MVA     PSAV D_MEDIUM_DESCR  		; yes, load partition number (ASCII) and save it as medium descr. byte
    72 428E			CHK_FAT_TYPE    LDA.EQ  D_FAT_TYPE OS_SHELL_ENTRY 	; get type of FAT, branch if FAT32 (0), has no static root directory blocks
Macro: LDA.EQ [Source: macros.inc]
     1 428E AD 0A 04				LDA	D_FAT_TYPE
     2 4291 F0 0B				BEQ	OS_SHELL_ENTRY
Source: boot_sys_os.asm
    73 4293 A2 04		                LDX     #$04		     		; D_NUM_ROOT_DIR is 0 for FAT32
    74 4295			CALC_DIR_BLKS   LSR16	D_NUM_ROOT_DIR	     		; divide #root-dir entries by 16 to get total #blocks
Macro: LSR16 [Source: macros.inc]
     1 4295 4E 0E 04			LSR	D_NUM_ROOT_DIR+1
     2 4298 6E 0D 04			ROR	D_NUM_ROOT_DIR
Source: boot_sys_os.asm
    75 429B					DEX.NE	CALC_DIR_BLKS	     		; branch if not done yet
Macro: DEX.NE [Source: macros.inc]
     1 429B CA					DEX
     2 429C D0 F7				BNE	CALC_DIR_BLKS
Source: boot_sys_os.asm
    76 				                
    77 				; TODO: ADD MORE DEVICES #######################################################
    78
    79 				; **** Shell Entry Point *******************************************************
    80 				; ******************************************************************************
    81 429E 20 9C 52		OS_SHELL_ENTRY  JSR	GET_SIS		     		; Get sys. info sector		
    82 42A1 4C 1C 4A				JMP     SH_CMD_PROMPT			; start of command shell
    83
    84 				; **** Read First Block Of Actual Directory ************************************
    85 				; The first block of D_ACTUAL_DIR cluster is read into DIR_BLK_BUF
    86 				; ******************************************************************************
    87 42A4			OS_FIRST_DIR_BLK
    88 42A4			                LDA.EQ  D_FAT_TYPE SET_DIR_CLUSTER  	; load type of FAT, branch if FAT32 (set cluster)
Macro: LDA.EQ [Source: macros.inc]
     1 42A4 AD 0A 04				LDA	D_FAT_TYPE
     2 42A7 F0 15				BEQ	SET_DIR_CLUSTER
Source: boot_sys_os.asm
    89 42A9 20 B3 47		                JSR     OS_IS_ROOT_DIR       		; No FAT32, is it the root directory?
    90 42AC 90 10		                BCC     SET_DIR_CLUSTER      		; no, set cluster
    91
    92 42AE					MVAX	4 D_START_DIR CURR_DIR_BLK	; CURR_DIR_BLK = LBA root dir., FAT16/FAT12 only
Macro: MVAX [Source: macros.inc]
     1 42AE A2 03			LDX	#4-1
     2 42B0 BD 1C 04 9D 24 18 + lp	MVA	D_START_DIR,X CURR_DIR_BLK,X-
     3 42B7 10 F7			BPL	lp
Source: boot_sys_os.asm
    93 42B9 AE 0D 04		                LDX     D_NUM_ROOT_DIR       		; set block counter
    94 42BC D0 17		                BNE     SET_NUM_BLOCKS       		; branch always
    95
    96 42BE			SET_DIR_CLUSTER MVAX	4 D_ACTUAL_DIR CURR_CLUSTER	; CURR_CLUSTER = D_ACTUAL_DIR, FAT32 and FAT16/FAT12 subdir
Macro: MVAX [Source: macros.inc]
     1 42BE A2 03			LDX	#4-1
     2 42C0 BD 04 04 95 A0 CA	lp	MVA	D_ACTUAL_DIR,X CURR_CLUSTER,X-
     3 42C6 10 F8			BPL	lp
Source: boot_sys_os.asm
    97 42C8 20 F8 40		CONVERT_CLUSTER JSR     CLUSTER_TO_BLK       		; convert CURR_CLUSTER to LBA number in NUM32
    98 42CB			                LDXYI   CURR_DIR_BLK
Macro: LDXYI [Source: macros.inc]
     1 42CB A2 24			LDX	<CURR_DIR_BLK				; MADS makes this immediate
     2 42CD A0 18			LDY	>CURR_DIR_BLK
Source: boot_sys_os.asm
    99 42CF 20 72 41		                JSR     STORE_32             		; and save result as current directory block
   100 42D2 AE 0B 04		                LDX     D_SECT_PER_CLST      		; load number of blocks per clusters
   101 42D5 8E 1D 18		SET_NUM_BLOCKS  STX     CURR_BLK_NUM	     		; CURR_BLK_NUM = D_SECT_PER_CLST
   102
   103 				; **** Load Directory Block ****************************************************
   104 				; This routine reads a directory block into DIR_BLK_BUF.
   105 				; It is called from OS_NEXT_DIR_BLK.
   106 				; ******************************************************************************
   107 42D8 A9 00 85 DC A9 02 + OS_LOAD_DIR     MWA	#DIR_BLK_BUF BLKBUF  ; BLKBUF now points to dir block buffer
   108 42E0					LDXYI	CURR_DIR_BLK         ; block number (LBA) to be loaded
Macro: LDXYI [Source: macros.inc]
     1 42E0 A2 24			LDX	<CURR_DIR_BLK				; MADS makes this immediate
     2 42E2 A0 18			LDY	>CURR_DIR_BLK
Source: boot_sys_os.asm
   109 42E4 4C 4B 41		                JMP     DEV_RD_LBLK          ; read directory block into DIR_BLK_BUF and return
   110
   111 				; **** Read Next Directory Block ***********************************************
   112 				; The LBA nr in CURR_DIR_BLK is incremented by 1. It is called from OS_DIR_LOOP
   113 				; when CURR_BLK_NUM is between D_SECT_PER_CLST and 1.
   114 				; ******************************************************************************
   115 42E7 A2 00		OS_NEXT_DIR_BLK LDX     #$00
   116 42E9			INC_DIR_BLK     INC.NE  CURR_DIR_BLK,X OS_LOAD_DIR	; increment current directory block and branch if no overflow
Macro: INC.NE [Source: macros.inc]
     1 42E9 FE 24 18				INC	CURR_DIR_BLK,X
     2 42EC D0 EA				BNE	OS_LOAD_DIR
Source: boot_sys_os.asm
   117 42EE E8			                INX                          		; overflow, increment next byte
   118 42EF			                CMP.NE  #$04 INC_DIR_BLK     		; increment next byte if not all four bytes updated
Macro: CMP.NE [Source: macros.inc]
     1 42EF C9 04				CMP	#$04
     2 42F1 D0 F6				BNE	INC_DIR_BLK
Source: boot_sys_os.asm
   119 42F3 F0 E3		                BEQ     OS_LOAD_DIR          		; branch always
   120
   121 				; **** Read Next Directory Cluster *********************************************
   122 				; Reads a first sector of a directory cluster into DIR_BLK_BUF. It is called
   123 				; from OS_DIR_LOOP and resets CURR_BLK_NUM to D_SECT_PER_CLST.
   124 				; ******************************************************************************
   125 42F5			OS_NEXT_DIR_CLSTR
   126 42F5 20 7E 40		                JSR     GET_NEXT_CLSTR       ; load next directory cluster nr from FAT
   127 42F8 90 CE		                BCC     CONVERT_CLUSTER      ; if not EOF convert it to LBA + load from disk
   128 42FA 60			                RTS			     ; return
   129 				                
   130 				; **** Save Directory Block ****************************************************
   131 				; Write directory in DIR_BLK_BUF to disk with LBA nr in X,Y.
   132 				; Input: X,Y = Pointer to LBA nr.
   133 				; ******************************************************************************
   134 42FB 86 D8		OS_SAVE_DIR     STX	SAVEX
   135 42FD 84 D9				STY	SAVEY
   136 42FF A9 00 85 DC A9 02 + 		MWA	#DIR_BLK_BUF BLKBUF	; set source block buffer to DIR_BLK_BUF
   137 4307 A6 D8		                LDX     SAVEX       		; pointer to block number (LBA) to be saved
   138 4309 A4 D9		                LDY     SAVEY
   139 430B 4C 1D 42		                JMP     DEV_WR_LBLK          	; write directory block in DIR_BLK_BUF to LBA in NUM32 and return
   140 				                
   141 				; **** Create New File on Disk *************************************************
   142 				; Input: FILENAME = String8_3
   143 				;        A        = File Attributes
   144 				;        FREE_CLUSTER: contains cluster nr for new File/Dir
   145 				; An empty dir. entry is written with: Filename, Attribute, Date, Time and Cluster Nr.
   146 				; ******************************************************************************
   147 430E AA			OS_CREATE_FILE  TAX                         		; save attributes into X
   148 430F A0 00		                LDY     #D_FILENAME         		; set index to filename
   149 4311 B9 10 4A 91 A8 C8	FILL_FILENAME   MVA     FILENAME,Y (CURR_DIR_ENTRY),Y+	; copy filename into current directory entry
   150 4317			                CPY.CC  #D_ATTRIBUTES FILL_FILENAME 	; branch if not all characters copied?
Macro: CPY.CC [Source: macros.inc]
     1 4317 C0 0B				CPY	#D_ATTRIBUTES			; 
     2 4319 90 F6				BCC	FILL_FILENAME			; branch if C=0 (Y-b1 < 0)
Source: boot_sys_os.asm
   151 						
   152 						; Write Attribute
   153 431B 8A			                TXA                         	; yes, get attribute back to A
   154 431C 91 A8		CLEAR_ENTRY     STA     (CURR_DIR_ENTRY),Y  	; copy attributes into current directory entry
   155 431E A9 00		                LDA     #$00                	; and clear all following bytes to 0
   156 4320 C8			                INY
   157 4321			                CPY.CC  #$20 CLEAR_ENTRY	; branch if not everything cleared yet
Macro: CPY.CC [Source: macros.inc]
     1 4321 C0 20				CPY	#$20			; 
     2 4323 90 F7				BCC	CLEAR_ENTRY			; branch if C=0 (Y-b1 < 0)
Source: boot_sys_os.asm
   158 						
   159 						; Write create-Date and Last-write Date
   160 4325 20 93 43		GET_DATE_TIME   JSR     OS_FILEDATE         	; get current date as file date
   161 4328 98			                TYA				; Y = MSB
   162 4329 A0 19		                LDY     #D_LAST_WR_DATE+1     	; set index to last write date MSB
   163 432B 91 A8		                STA     (CURR_DIR_ENTRY),Y  	; store MSB of file last write date
   164 432D A0 11		                LDY     #D_CREATE_DATE+1     	; set index to create date MSB
   165 432F 91 A8 88		                STA     (CURR_DIR_ENTRY),Y-  	; store MSB of file create date
   166 4332 8A			                TXA				; X = LSB
   167 4333 91 A8		                STA     (CURR_DIR_ENTRY),Y  	; store LSB of file create date
   168 4335 A0 18		                LDY     #D_LAST_WR_DATE     	; set index to last write date LSB
   169 4337 91 A8		                STA     (CURR_DIR_ENTRY),Y  	; store LSB of file date
   170
   171 						; Write create-Time and last-write Time
   172 4339 20 6E 43		                JSR     OS_FILETIME         	; get current time as file time
   173 433C 98			                TYA				; Y = MSB
   174 433D A0 17		                LDY     #D_LAST_WR_TIME+1     	; set index to last write time MSB
   175 433F 91 A8		                STA     (CURR_DIR_ENTRY),Y  	; store MSB of file last write time
   176 4341 A0 0F		                LDY     #D_CREATE_TIME+1     	; set index to create time MSB
   177 4343 91 A8 88		                STA     (CURR_DIR_ENTRY),Y-  	; store MSB of file create date
   178 4346 8A			                TXA				; X = LSB
   179 4347 91 A8		                STA     (CURR_DIR_ENTRY),Y  	; store LSB byte of file create time
   180 4349 A0 16		                LDY     #D_LAST_WR_TIME     	; set index to last write time LSB
   181 434B 91 A8		                STA     (CURR_DIR_ENTRY),Y  	; store LSB of file last write time
   182
   183 						; Write File Cluster Nr High and Low
   184 434D A0 15				LDY	#D_START_CLSTH+1			; index of MSB of 1st_cluster_high
   185 434F AD 23 18 91 A8 88			MVA	FREE_CLUSTER+3  (CURR_DIR_ENTRY),Y-	; MSB of new cluster nr
   186 4355 AD 22 18 91 A8			MVA	FREE_CLUSTER+2  (CURR_DIR_ENTRY),Y	; LSB of 1st_cluster_high
   187 435A A0 1B				LDY	#D_START_CLST+1				; index of MSB of 1st_cluster_low
   188 435C AD 21 18 91 A8 88			MVA	FREE_CLUSTER+1  (CURR_DIR_ENTRY),Y-	; store in MSB of 1st_cluster_low
   189 4362 AD 20 18 91 A8			MVA	FREE_CLUSTER    (CURR_DIR_ENTRY),Y	; store in LSB of 1st_cluster_low
   190 						
   191 4367					LDXYI	CURR_DIR_BLK		; Write new subdir entry in current dir (CURR_DIR_BLK is LBA of current dir block)
Macro: LDXYI [Source: macros.inc]
     1 4367 A2 24			LDX	<CURR_DIR_BLK				; MADS makes this immediate
     2 4369 A0 18			LDY	>CURR_DIR_BLK
Source: boot_sys_os.asm
   192 436B 4C FB 42		                JMP     OS_SAVE_DIR	    	; write this dir entry back to disk and return
   193 				                
   194 				; **** Get Current Time As File Time *******************************************
   195 				; Output: File Time = Word[X,Y]
   196 				; ******************************************************************************
   197 436E 20 DE E2		OS_FILETIME     JSR     READTIME            ; read current time
   198
   199 				; **** Convert Time To File Time ***********************************************
   200 				; Input:  A - HOUR 	in BCD ($00-$23)
   201 				;	  X - MINUTE 	in BCD ($00-$59)
   202 				;	  Y - SECONDS	in BCD ($00-$59)
   203 				; Output: File Time = Word[X,Y]
   204 				; ******************************************************************************
   205 4371			OS_TIME_TO_FILETIME
   206 4371 20 BA 43		                JSR     CONVERT_DATETIME    ; convert BCD date values into binary
   207 4374 85 C0		                STA     NUM32               ; store HOUR into lower byte of Word[NUM32:NUM32+1]
   208 4376 A9 00 85 C1				MVA	#$00 NUM32+1	    ; clear upper byte of result
   209 437A A2 06		                LDX     #$06
   210 437C 20 00 42		                JSR     SHL_32              ; shift left NUM32 by 6 bits
   211 437F A5 C5		                LDA     SUM32+1             ; load MINUTE into A
   212 4381 05 C0 85 C0		                ORA:STA NUM32               ; and add value into result
   213 4385 A2 05		                LDX     #$05
   214 4387 20 00 42		                JSR     SHL_32              ; shift left NUM32 by 5 bits
   215 438A A5 C6		                LDA     SUM32+2             ; load SECONDS into A
   216 438C 6A			                ROR                         ; divide SECONDS by 2
   217 438D 05 C0		                ORA     NUM32               ; and add value into result
   218 438F AA			                TAX
   219 4390 A4 C1		                LDY     NUM32+1             ; result is in Word[X,Y]
   220 4392 60			                RTS
   221 				                
   222 				; **** Get Current Date As File Date *******************************************
   223 				; Output: File Date = Word[X,Y]
   224 				; ******************************************************************************
   225 4393 20 E2 E2		OS_FILEDATE     JSR     READDATE            ; read current date
   226
   227 				; **** Convert Date To File Date ***********************************************
   228 				; Input:  A - YEAR 	in BCD ($00-$99)
   229 				; 	  X - MONTH 	in BCD ($01-$12)
   230 				; 	  Y - DAY	in BCD ($01-$31)
   231 				; Output: File Date = Word[X,Y]
   232 				; ******************************************************************************
   233 4396			OS_DATE_TO_FILEDATE
   234 4396 20 BA 43		                JSR     CONVERT_DATETIME    ; converte BCD date values into binary
   235 4399 18 69 14		                ADD     #20                 ; file date starts from 1980, so we have to add 20 to our year 2000 based RTC date
   236 439C 85 C0		                STA     NUM32               ; store YEAR into lower byte of Word[NUM32:NUM32+1]
   237 439E A9 00 85 C1		                MVA     #$00 NUM32+1	    ; clear upper byte of result
   238 43A2 A2 04		                LDX     #$04
   239 43A4 20 00 42		                JSR     SHL_32              ; shift left NUM32 by 4 bits
   240 43A7 A5 C5		                LDA     SUM32+1             ; load MONTH into A
   241 43A9 05 C0 85 C0		                ORA:STA NUM32               ; and add value into result
   242 43AD A2 05		                LDX     #$05
   243 43AF 20 00 42		                JSR     SHL_32              ; shift left NUM32 by 5 bits
   244 43B2 A5 C6		                LDA     SUM32+2             ; load DAY into A
   245 43B4 05 C0		                ORA     NUM32               ; and add value into result
   246 43B6 AA			                TAX
   247 43B7 A4 C1		                LDY     NUM32+1             ; result is in Word[X,Y]
   248 43B9 60			                RTS
   249 				                
   250 				; **** Convert BCD Date Or Time Values Into Unpacked Binary ********************
   251 43BA			CONVERT_DATETIME
   252 43BA 85 C4		                STA     SUM32		    ; Year or Hour
   253 43BC					STXY	SUM32+1		    ; X=Month/Minutes, Y=Day/Seconds
Macro: STXY [Source: macros.inc]
     1 43BC 86 C5			STX	SUM32+1
     2 43BE 84 C6			STY	SUM32+1+1
Source: boot_sys_os.asm
   254 43C0 A0 02		                LDY     #$02		    ; 3 bytes to convert
   255 43C2 B9 C4 00		CONVERT_BCD     LDA     SUM32,Y		    ; Get byte
   256 43C5 20 FA 4C		                JSR     BCD_TO_BIN	    ; Convert BCD to 8-bit binary
   257 43C8 99 C4 00 88		                STA     SUM32,Y-	    ; Store result back
   258 43CC 10 F4		                BPL     CONVERT_BCD	    ; branch if not done yet
   259 43CE 60			                RTS			    ; return
   260
   261 				; **** Copy First block of File to memory **************************************
   262 				; Input:
   263 				; ******************************************************************************
   264 43CF 20 53 44		COPY_BLK0_DEST	JSR	INIT_FBUF_PTR		; PSTR = Ptr(FILE_BUFF)
   265 43D2					LDA.EQ	FTYPE BASFILE		; 0 = .BAS, 1=.COM, 2=.EXE, branch if .BAS file
Macro: LDA.EQ [Source: macros.inc]
     1 43D2 AD 49 44				LDA	FTYPE
     2 43D5 F0 2A				BEQ	BASFILE
Source: boot_sys_os.asm
   266 43D7					CMP.EQ	#1 COMFILE		; branch if a .COM file
Macro: CMP.EQ [Source: macros.inc]
     1 43D7 C9 01				CMP	#1
     2 43D9 F0 16				BEQ	COMFILE
Source: boot_sys_os.asm
   267 						
   268 						; .EXE file (FTYPE=2)
   269 43DB AD 00 57 8D E8 44			MVA	FILE_BUFF OS_PROG	; load- and run-address LSB = FILE_BUFF LSB
   270 43E1 85 CC				STA	END_PTR			; destination address LSB
   271 43E3 AD 01 57 8D E9 44			MVA	FILE_BUFF+1 OS_PROG+1	; load- and run-address MSB = FILE_BUFF MSB
   272 43E9 85 CD				STA	END_PTR+1		; destination address MSB
   273 43EB A9 02 85 EA				MVA	#<FILE_BUFF+2 PSTR	; load-address offset: start-address = 2nd byte in FILE_BUFF
   274 43EF D0 1C				BNE	COPY_BLK_DEST		; branch always
   275 						
   276 						; .COM file  (FTYPE=1)
   277 43F1 A9 00 8D E8 44	COMFILE		MVA	#<COM_RUN_ADDR OS_PROG	 ; Load- and run-address LSB
   278 43F6 85 CC				STA	END_PTR			 ; destination address LSB
   279 43F8 A9 30 8D E9 44			MVA	#>COM_RUN_ADDR OS_PROG+1	 ; load- and run-address MSB
   280 43FD 85 CD				STA	END_PTR+1		 ; destination address MSB
   281 43FF D0 0C				BNE	COPY_BLK_DEST		 ; branch always
   282 						
   283 						; .BAS file (FTYPE=0)
   284 4401 A9 00 85 CC A9 20 + BASFILE		MWA	#BAS_LOAD_ADDR END_PTR	; destination = BAS_LOAD_ADDR, 1st 2 bytes contain end-address
   285 4409 A9 02 85 EA				MVA	#<FILE_BUFF+2 PSTR	; skip first 2 bytes of .BAS file (contains $00 $20)
   286 						
   287 				; **** Copy Second and other blocks of File to Memory **************************
   288 				; Input:
   289 				; ******************************************************************************
   290 440D			COPY_BLK_DEST	PRCH	'['
Macro: PRCH [Source: macros.inc]
     1 440D A9 5B			LDA	#'['
     2 440F 20 52 E0			JSR	COUT
Source: boot_sys_os.asm
   291 4412					PRHEX16	PSTR
Macro: PRHEX16 [Source: macros.inc]
     1 4412 A5 EB			LDA	PSTR+1				; print MSB
     2 4414 20 91 E0			JSR	HEXOUT
     3 4417 A5 EA			LDA	PSTR
     4 4419 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_os.asm
   292 441C					PRCH	','
Macro: PRCH [Source: macros.inc]
     1 441C A9 2C			LDA	#','
     2 441E 20 52 E0			JSR	COUT
Source: boot_sys_os.asm
   293 4421					PRHEX16	END_PTR
Macro: PRHEX16 [Source: macros.inc]
     1 4421 A5 CD			LDA	END_PTR+1				; print MSB
     2 4423 20 91 E0			JSR	HEXOUT
     3 4426 A5 CC			LDA	END_PTR
     4 4428 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_os.asm
   294 442B					PRCH	']'
Macro: PRCH [Source: macros.inc]
     1 442B A9 5D			LDA	#']'
     2 442D 20 52 E0			JSR	COUT
Source: boot_sys_os.asm
   295 4430 A0 00				LDY	#0
   296 4432 B1 EA 91 CC		CP_BLK0_LP	MVA	(PSTR),Y (END_PTR),Y		; Get byte from buffer and store in destination
   297 4436 E6 CC D0 02 E6 CD			INW	END_PTR				; Increment destination pointer (macro)
   298 443C E6 EA D0 02 E6 EB			INW	PSTR				; Increment buffer pointer (macro)
   299 4442 A5 EB				LDA	PSTR+1				; MSB of buffer pointer
   300 4444					CMP.NE	#>FILE_BUFF+2 CP_BLK0_LP		; branch if not 2 pages (512 bytes) increased yet
Macro: CMP.NE [Source: macros.inc]
     1 4444 C9 59				CMP	#>FILE_BUFF+2
     2 4446 D0 EA				BNE	CP_BLK0_LP
Source: boot_sys_os.asm
   301 4448 60					RTS					; return
   302 						
   303 4449 00			FTYPE		.byte  	$00				; 0 = .BAS, 1=.COM, 2=.EXE
   304
   305 				; **** Init File Buffer ********************************************************
   306 				; This routine sets BLKBUFL/BLKBUFH to FILE_BUFF
   307 				; ******************************************************************************
   308 444A A9 00 85 DC A9 57 + INIT_FILE_BUFF	MWA	#FILE_BUFF BLKBUFL	; macro BLKBUF = FILE_BUFF
   309 4452 60					RTS				; return
   310 						
   311 				; **** Init File-buffer pointer ************************************************
   312 				; This routine sets PSTR to FILE_BUFF
   313 				; ******************************************************************************
   314 4453 A9 00 85 EA A9 57 + INIT_FBUF_PTR	MWA	#FILE_BUFF PSTR		; macro PSTR = FILE_BUFF
   315 445B 60					RTS				; return
   316
   317 				; **** Load BAS/COM/EXE File ***************************************************
   318 				; Input: CURR_CLUSTER: cluster nr of file to load
   319 				; ******************************************************************************
   320 445C 20 C6 46		OS_LOAD_FILE    JSR     OS_FILE_EMPTY       		; check if filesize is 0
   321 445F 90 01		                BCC     OS_LOAD_COM2			; branch if file is not empty
   322 						
   323 4461 60			                RTS                         		; filesize is 0, just do nothing
   324 						
   325 4462			OS_LOAD_COM2    LDXYI   CURR_CLUSTER      		; current cluster nr
Macro: LDXYI [Source: macros.inc]
     1 4462 A2 A0			LDX	<CURR_CLUSTER				; MADS makes this immediate
     2 4464 A0 00			LDY	>CURR_CLUSTER
Source: boot_sys_os.asm
   326 4466 20 FC 40		                JSR     CLSTR_TO_BLK        		; convert cluster number to LBA number in NUM32
   327 4469 A9 00 85 AB		                MVA     #$00 BCNT              		; init. block counter
   328 						; Emile: This was apparently an error: SCNT was not initialized, now added here
   329 446D AD 0B 04 85 AD	                MVA     D_SECT_PER_CLST SCNT   		; SCNT = numbers of sectors per cluster
   330 4472 A0 1D		                LDY     #D_FILE_SIZE+1      		; index to file size in dir. entry
   331 4474 B1 A8		                LDA     (CURR_DIR_ENTRY),Y  		; load file size byte 1
   332 4476 4A			                LSR                         		; check if bit 0 is set (bytes 256-511 of buffer)
   333 4477 48			                PHA			    		; save byte: now contains file-size in blocks of 512 bytes
   334 4478 B0 06		                BCS     LOAD_COM1           		; yes, add one block
   335 						
   336 447A 88			                DEY					; now points to D_FILE_SIZE LSB
   337 447B			                LDA.EQ  (CURR_DIR_ENTRY),Y LOAD_COM1	; load file size byte 0, branch if 0
Macro: LDA.EQ [Source: macros.inc]
     1 447B B1 A8				LDA	(CURR_DIR_ENTRY),Y
     2 447D F0 01				BEQ	LOAD_COM1
Source: boot_sys_os.asm
   338 447F 38			                SEC                         		; yes, add one block
   339 4480 68			LOAD_COM1       PLA
   340 4481 65 AB 85 AB		                ADC:STA BCNT                		; calc used blocks, BCNT now contains number of blocks
   341 4485			                CMP.CS  #89 OS_SIZE_ERR         	; branch if file is too big (>88 blocks, 44 KB, $3000-$E000)
Macro: CMP.CS [Source: macros.inc]
     1 4485 C9 59				CMP	#89			; 
     2 4487 B0 24				BCS	OS_SIZE_ERR			; branch if C=1 (A-b1 >= 0)
Source: boot_sys_os.asm
   342 						
   343 4489 A0 1E		                LDY     #D_FILE_SIZE+2      		; index to file size entry
   344 448B			                LDA.NE  (CURR_DIR_ENTRY),Y OS_SIZE_ERR	; load file size byte 2, branch if > 0 -> file is too big
Macro: LDA.NE [Source: macros.inc]
     1 448B B1 A8				LDA	(CURR_DIR_ENTRY),Y
     2 448D D0 1E				BNE	OS_SIZE_ERR
Source: boot_sys_os.asm
   345 448F C8			                INY					; D_FILE_SIZE+3
   346 4490			                LDA.NE  (CURR_DIR_ENTRY),Y OS_SIZE_ERR 	; load D_FILE_SIZE+3, branch if > 0 -> file is too big
Macro: LDA.NE [Source: macros.inc]
     1 4490 B1 A8				LDA	(CURR_DIR_ENTRY),Y
     2 4492 D0 19				BNE	OS_SIZE_ERR
Source: boot_sys_os.asm
   347 						
   348 						; Read first part of file into FILE_BUFF
   349 4494 20 4A 44				JSR	INIT_FILE_BUFF			; Set BLKBUF pointer to FILE_BUFF
   350 4497			                LDXYI   NUM32		    		; NUM32 contains LBA of cluster to read
Macro: LDXYI [Source: macros.inc]
     1 4497 A2 C0			LDX	<NUM32				; MADS makes this immediate
     2 4499 A0 00			LDY	>NUM32
Source: boot_sys_os.asm
   351 449B 20 4B 41		                JSR     DEV_RD_LBLK         		; Read first block of file into FILE_BUFF
   352 449E C6 AD				DEC     SCNT                		; First block is already read in
   353 44A0 C6 AB				DEC	BCNT				; Number of blocks to read
   354 44A2 20 CF 43				JSR	COPY_BLK0_DEST			; Copy first block to destination
   355 						
   356 44A5 20 B4 44		                JSR     LOAD_NEXT_BLKS	    		; Load next blocks of file and execute it
   357 44A8 A9 25		                LDA     #HDD1_ID   	    		; Replace by D_DEV_ID?
   358 44AA 4C AA E1				JMP     OPEN_DEVICE			; Init. device driver again and return
   359 						
   360 44AD			OS_SIZE_ERR     LDXYI   MSG_SIZE_ERR      		; load error message...
Macro: LDXYI [Source: macros.inc]
     1 44AD A2 01			LDX	<MSG_SIZE_ERR				; MADS makes this immediate
     2 44AF A0 4A			LDY	>MSG_SIZE_ERR
Source: boot_sys_os.asm
   361 44B1 4C 48 48		                JMP     OS_PRINT_ERR			; Print it
   362
   363 				; **** Read Next File Blocks ***************************************************
   364 				; ******************************************************************************
   365 44B4 20 81 41		LOAD_NEXT_BLKS  JSR     INC_32              	; Increment LBA block address in NUM32
   366 44B7 20 4A 44		LOAD_BLK0       JSR	INIT_FILE_BUFF		; Set BLKBUF pointer to FILE_BUFF
   367 44BA					LDXYI   NUM32		    	; NUM32 contains LBA of cluster to read
Macro: LDXYI [Source: macros.inc]
     1 44BA A2 C0			LDX	<NUM32				; MADS makes this immediate
     2 44BC A0 00			LDY	>NUM32
Source: boot_sys_os.asm
   368 44BE 20 4B 41		                JSR     DEV_RD_LBLK         	; and read next block of file into FILE_BUFF
   369 44C1 20 53 44				JSR	INIT_FBUF_PTR		; reset file-buffer pointer PSTR to FILE_BUFF again
   370 44C4 20 0D 44				JSR	COPY_BLK_DEST	    	; Copy block to destination
   371 44C7			                DEC.EQ  BCNT OS_EXEC_CHK      	; branch if no more blocks to read
Macro: DEC.EQ [Source: macros.inc]
     1 44C7 C6 AB				DEC	BCNT
     2 44C9 F0 14				BEQ	OS_EXEC_CHK
Source: boot_sys_os.asm
   372 44CB					DEC.NE  SCNT LOAD_NEXT_BLKS    	; branch if more blocks in cluster to read
Macro: DEC.NE [Source: macros.inc]
     1 44CB C6 AD				DEC	SCNT
     2 44CD D0 E5				BNE	LOAD_NEXT_BLKS
Source: boot_sys_os.asm
   373
   374 				; next cluster needs to be loaded considering the volume FAT type **************
   375 44CF 20 7E 40		NEXT_CLUSTER0   JSR     GET_NEXT_CLSTR	   	; Get next cluster from FAT table in CURR_CLUSTER.
   376 44D2 B0 0B		                BCS     OS_EXEC_CHK	    	; C=1, EOF, go execute File
   377 							
   378 44D4 20 F8 40		                JSR     CLUSTER_TO_BLK	    	; convert CURR_CLUSTER to LBA number in NUM32.
   379 44D7 AD 0B 04 85 AD	                MVA     D_SECT_PER_CLST SCNT   	; SCNT = numbers of sectors per cluster
   380 44DC 4C B7 44		                JMP     LOAD_BLK0	    	; branch always
   381 						
   382 				; Run file if needed ***********************************************************
   383 				; ******************************************************************************
   384 44DF			OS_EXEC_CHK	LDA.NE	FTYPE OS_EXECUTE	; 0 = .BAS, 1=.COM, 2=.EXE, branch if an executable file
Macro: LDA.NE [Source: macros.inc]
     1 44DF AD 49 44				LDA	FTYPE
     2 44E2 D0 01				BNE	OS_EXECUTE
Source: boot_sys_os.asm
   385 44E4 60					RTS				; return in case of a .BAS file
   386
   387 				; **** Execute File ************************************************************
   388 				; Input:  Ptr[OS_PROG] to Start Address
   389 				; Output: A - Result Code
   390 				; ******************************************************************************
   391 44E5 6C E8 44		OS_EXECUTE      JMP     (OS_PROG)           	; run .com or .exe file
   392 44E8 00 00		OS_PROG         .word      $0000
   393 				                
   394 				; ******************************************************************************
   395 44EA			INIT_FREE_CLUSTER
   396 44EA A9 02 8D 20 18 A9 + 		MWA	#$02 FREE_CLUSTER	; first data cluster is $000002
   397 44F4 8D 22 18				STA     FREE_CLUSTER+2
   398 44F7 8D 23 18		                STA     FREE_CLUSTER+3
   399 44FA 60			                RTS
   400 				                
   401 				; ******************************************************************************
   402 				; Input: FREE_CLUSTER: number of possible free cluster
   403 				; Output: C=1: cluster is free ; C=0: 
   404 				; ******************************************************************************
   405 44FB			OS_NEXT_FREE_CLUSTER
   406 44FB			                MVAX	4 FREE_CLUSTER CURR_CLUSTER	; CURR_CLUSTER = FREE_CLUSTER
Macro: MVAX [Source: macros.inc]
     1 44FB A2 03			LDX	#4-1
     2 44FD BD 20 18 95 A0 CA	lp	MVA	FREE_CLUSTER,X CURR_CLUSTER,X-
     3 4503 10 F8			BPL	lp
Source: boot_sys_os.asm
   407 4505 20 7E 40		                JSR     GET_NEXT_CLSTR      		; get FAT entry for current cluster
   408 4508 A2 03		                LDX     #$03
   409 450A			CHK_FREE        LDA.NE  CURR_CLUSTER,X SET_NEXT_CLSTR	; branch if cluster is not free
Macro: LDA.NE [Source: macros.inc]
     1 450A B5 A0				LDA	CURR_CLUSTER,X
     2 450C D0 05				BNE	SET_NEXT_CLSTR
Source: boot_sys_os.asm
   410 450E			                DEX.PL	CHK_FREE	    		; branch if not all bytes checked
Macro: DEX.PL [Source: macros.inc]
     1 450E CA					DEX
     2 450F 10 F9				BPL	CHK_FREE
Source: boot_sys_os.asm
   411 4511 38			                SEC                         		; cluster is free, exit with C = 1
   412 4512 60			                RTS
   413
   414 				; ******************************************************************************
   415 				; This routines increments FREE_CLUSTER by 1, called from OS_NEXT_FREE_CLUSTER.
   416 				; ******************************************************************************
   417 4513 A2 00		SET_NEXT_CLSTR  LDX     #$00
   418 4515			INC_FREE_CLSTR  INC.NE  FREE_CLUSTER,X CHK_MAX_FAT 		; increment FREE_CLUSTER[0:3], branch if no overflow
Macro: INC.NE [Source: macros.inc]
     1 4515 FE 20 18				INC	FREE_CLUSTER,X
     2 4518 D0 05				BNE	CHK_MAX_FAT
Source: boot_sys_os.asm
   419 451A E8			                INX						; next byte of FREE_CLUSTER
   420 451B			                CPX.NE  #$04 INC_FREE_CLSTR	 		; branch if not done yet
Macro: CPX.NE [Source: macros.inc]
     1 451B E0 04				CPX	#$04
     2 451D D0 F6				BNE	INC_FREE_CLSTR
Source: boot_sys_os.asm
   421 						
   422 451F A2 03		CHK_MAX_FAT     LDX     #03					; 3 bytes to check
   423 4521 B5 A4		CHK_MAX_FAT2    LDA     CURR_FAT_BLK,X	    			; LBA of current FAT block
   424 4523			                CMP.CC  D_START_FAT2,X OS_NEXT_FREE_CLUSTER	; end of FAT1 reached? No, check next FAT entry
Macro: CMP.CC [Source: macros.inc]
     1 4523 DD 18 04				CMP	D_START_FAT2,X			; 
     2 4526 90 D3				BCC	OS_NEXT_FREE_CLUSTER			; branch if C=0 (A-b1 < 0)
Source: boot_sys_os.asm
   425 4528			                DEX.PL  CHK_MAX_FAT2	      			; branch if not done yet
Macro: DEX.PL [Source: macros.inc]
     1 4528 CA					DEX
     2 4529 10 F6				BPL	CHK_MAX_FAT2
Source: boot_sys_os.asm
   426 452B 18			                CLC                         			; no emtpy cluster found, exit with error
   427 452C 60			                RTS
   428
   429 				; ******************************************************************************
   430 				; This routine sets a DWORD in the FAT sector from free to allocated, it is 
   431 				; called from OS_ADD_CLUSTER. The correct FAT page has already been loaded into 
   432 				; BLOCK_BUFF ($600) by OS_NEXT_FREE_CLUSTER -> GET_NEXT_CLUSTER. So the cluster nr
   433 				; in CURR_CLUSTER needs to be allocated in the FAT table.
   434 				; ******************************************************************************
   435 452D			WRITE_FAT_ENTRY	PRCH	'['			; Print [
Macro: PRCH [Source: macros.inc]
     1 452D A9 5B			LDA	#'['
     2 452F 20 52 E0			JSR	COUT
Source: boot_sys_os.asm
   436 4532					PRHEX16	CURR_CLUSTER		; Print CURR_CLUSTER
Macro: PRHEX16 [Source: macros.inc]
     1 4532 A5 A1			LDA	CURR_CLUSTER+1				; print MSB
     2 4534 20 91 E0			JSR	HEXOUT
     3 4537 A5 A0			LDA	CURR_CLUSTER
     4 4539 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_os.asm
   437 453C					PRCH	']'
Macro: PRCH [Source: macros.inc]
     1 453C A9 5D			LDA	#']'
     2 453E 20 52 E0			JSR	COUT
Source: boot_sys_os.asm
   438 4541 A5 A0				LDA	CURR_CLUSTER		; get LSB of cluster nr
   439 4543 0A 0A			:2	ASL				; SHL2, DWORD index in FAT page
   440 4545 A8					TAY				; Y = DWORD byte 0 in FAT page
   441 					.rept 3					; Write 3 x $FF into FAT entry
   442 						LDA	#$FF			
   443 						JSR	WRITE_ENTRY_BYTE	
   444 						INY				
   445 					.endr	
Source: REPT
   442 4546 A9 FF				LDA	#$FF			
   442 4548 20 64 45				JSR	WRITE_ENTRY_BYTE	
   442 454B C8					INY				
   442 454C A9 FF				LDA	#$FF			
   442 454E 20 64 45				JSR	WRITE_ENTRY_BYTE	
   442 4551 C8					INY				
   442 4552 A9 FF				LDA	#$FF			
   442 4554 20 64 45				JSR	WRITE_ENTRY_BYTE	
   442 4557 C8					INY				
Source: boot_sys_os.asm
   446 4558 A9 0F				LDA	#$0F			; write end marker
   447 455A 20 64 45				JSR	WRITE_ENTRY_BYTE	; Write 4th byte ($0F) and return
   448 455D					LDXYI	CURR_FAT_BLK		; LBA of current FAT block
Macro: LDXYI [Source: macros.inc]
     1 455D A2 A4			LDX	<CURR_FAT_BLK				; MADS makes this immediate
     2 455F A0 00			LDY	>CURR_FAT_BLK
Source: boot_sys_os.asm
   449 4561 4C 18 42				JMP	DEV_WR_LBLK_BUF		; write FAT block back to disk and return
   450 						
   451 				; **** Write a Single FAT Entry Byte To Block Buffer ***************************
   452 				; INPUT : A = Write Data
   453 				;         Y - Index To FAT Entry Byte
   454 				; ******************************************************************************
   455 4564			WRITE_ENTRY_BYTE
   456 4564 AA					TAX
   457 4565 A5 A1		                LDA     CURR_CLUSTER+1
   458 4567 4A			                LSR				; check bit 0 of free_cluster[1]
   459 4568 8A			                TXA
   460 4569 B0 04		                BCS     WR_UPPER_PAGE       	; if bit 0 = 1 then write byte to upper half of block
   461 						
   462 456B 99 00 06		                STA     BLOCK_BUFF,Y		; write entry byte to lower half of block buffer
   463 456E 60					RTS				
   464 						
   465 456F 99 00 07		WR_UPPER_PAGE   STA     BLOCK_BUFF+256,Y	; write entry byte to upper half of block buffer
   466 4572 60					RTS
   467 				                
   468 				; **** Add Date and Time to subdir entry ***************************************
   469 				; ******************************************************************************
   470 4573			ADD_DATE_TIME	; Write create-Date and Last-write Date
   471 4573 20 93 43				JSR     OS_FILEDATE         	; get current date as file date
   472 4576 98			                TYA				; Y = MSB
   473 4577 A0 19		                LDY     #D_LAST_WR_DATE+1     	; set index to last write date MSB
   474 4579 91 DC		                STA     (BLKBUF),Y  		; store MSB of file last write date
   475 457B A0 11		                LDY     #D_CREATE_DATE+1     	; set index to create date MSB
   476 457D 91 DC 88		                STA     (BLKBUF),Y-  		; store MSB of file create date
   477 4580 8A			                TXA				; X = LSB
   478 4581 91 DC		                STA     (BLKBUF),Y  		; store LSB of file create date
   479 4583 A0 18		                LDY     #D_LAST_WR_DATE     	; set index to last write date LSB
   480 4585 91 DC		                STA     (BLKBUF),Y  		; store LSB of file date
   481
   482 						; Write create-Time and last-write Time
   483 4587 20 6E 43		                JSR     OS_FILETIME         	; get current time as file time
   484 458A 98			                TYA				; Y = MSB
   485 458B A0 17		                LDY     #D_LAST_WR_TIME+1     	; set index to last write time MSB
   486 458D 91 DC		                STA     (BLKBUF),Y  		; store MSB of file last write time
   487 458F A0 0F		                LDY     #D_CREATE_TIME+1     	; set index to create time MSB
   488 4591 91 DC 88		                STA     (BLKBUF),Y-  		; store MSB of file create date
   489 4594 8A			                TXA				; X = LSB
   490 4595 91 DC		                STA     (BLKBUF),Y  		; store LSB byte of file create time
   491 4597 A0 16		                LDY     #D_LAST_WR_TIME     	; set index to last write time LSB
   492 4599 91 DC		                STA     (BLKBUF),Y  		; store LSB of file last write time
   493 459B 60					RTS
   494 						
   495 				; **** Add new subdirectory entry to dir buffer ********************************
   496 				; Input: X=1: . subdir, X=2: .. subdir
   497 				; ******************************************************************************
   498 459C 8A			ADD_NEW_SUBDIR	TXA					; . or .. subdir
   499 459D 48					PHA					; save it
   500 459E A0 00				LDY	#D_FILENAME			; Filename entry
   501 45A0 A9 20 91 DC C8	ANS_FILL_FN	MVA     #' ' (BLKBUF),Y+			; Fill filename entry with spaces
   502 45A5			                CPY.CC  #D_ATTRIBUTES ANS_FILL_FN	; branch if not all chars copied
Macro: CPY.CC [Source: macros.inc]
     1 45A5 C0 0B				CPY	#D_ATTRIBUTES			; 
     2 45A7 90 F7				BCC	ANS_FILL_FN			; branch if C=0 (Y-b1 < 0)
Source: boot_sys_os.asm
   503
   504 45A9 A9 10 91 DC				MVA	#FA_DIRECTORY (BLKBUF),Y		; set directory attribute
   505 45AD A0 00				LDY	#D_FILENAME			; Filename entry
   506 45AF A9 2E				LDA	#'.'				; 1 or 2 dots for subdir name
   507 45B1 91 DC C8		ANS_LP1		STA	(BLKBUF),Y+
   508 45B4					DEX.NE	ANS_LP1				; branch if name not done yet
Macro: DEX.NE [Source: macros.inc]
     1 45B4 CA					DEX
     2 45B5 D0 FA				BNE	ANS_LP1
Source: boot_sys_os.asm
   509
   510 45B7 20 73 45				JSR	ADD_DATE_TIME			; Add date and time to subdir entry
   511 45BA 68					PLA
   512 45BB					CMP.NE	#1 PARENT_DIR			; branch if .. Subdir
Macro: CMP.NE [Source: macros.inc]
     1 45BB C9 01				CMP	#1
     2 45BD D0 1B				BNE	PARENT_DIR
Source: boot_sys_os.asm
   513 					
   514 						; Current subdir .: Write File Cluster Nr High and Low
   515 45BF A0 15				LDY	#D_START_CLSTH+1		; index of MSB of 1st_cluster_high
   516 45C1 AD 23 18 91 DC 88			MVA	FREE_CLUSTER+3 (BLKBUF),Y-	; store in MSB of 1st_cluster_high
   517 45C7 AD 22 18 91 DC			MVA	FREE_CLUSTER+2 (BLKBUF),Y	; store in LSB of 1st_cluster_high
   518 45CC A0 1B				LDY	#D_START_CLST+1			; index of MSB of 1st_cluster_low
   519 45CE AD 21 18 91 DC 88			MVA	FREE_CLUSTER+1 (BLKBUF),Y-	; store in MSB of 1st_cluster_low
   520 45D4 AD 20 18 91 DC			MVA	FREE_CLUSTER   (BLKBUF),Y	; store in LSB of 1st_cluster_low
   521 45D9 60					RTS					; return
   522 						
   523 						; Parent subdir ..: Write File Cluster Nr High and Low
   524 45DA A0 15		PARENT_DIR	LDY	#D_START_CLSTH+1		; index of MSB of 1st_cluster_high
   525 45DC AD 07 04 91 DC 88			MVA	D_ACTUAL_DIR+3 (BLKBUF),Y-	; store in MSB of 1st_cluster_high
   526 45E2 AD 06 04 91 DC			MVA	D_ACTUAL_DIR+2 (BLKBUF),Y	; store in LSB of 1st_cluster_high
   527 45E7 A0 1B				LDY	#D_START_CLST+1			; index of MSB of 1st_cluster_low
   528 45E9 AD 05 04 91 DC 88			MVA	D_ACTUAL_DIR+1 (BLKBUF),Y-	; store in MSB of 1st_cluster_low
   529 45EF AD 04 04 91 DC			MVA	D_ACTUAL_DIR   (BLKBUF),Y	; store in LSB of 1st_cluster_low
   530 45F4 60					RTS
   531 						
   532 				; **** Add new Directory Cluster to Disk ***************************************
   533 				; Create a new Directory Cluster in DIR_BLK_BUF and write . and .. subdirs in it.
   534 				; ******************************************************************************
   535 45F5			ADD_NEW_DIR_CLST
   536 45F5 A9 00 85 DC A9 02 + 		MWA	#DIR_BLK_BUF BLKBUF	; BLKBUF now points to dir block buffer
   537 45FD A2 01				LDX	#1
   538 45FF A9 00				LDA	#0
   539 4601			ANDIR_LP1	STA.NE	(BLKBUF),Y+ ANDIR_LP1	; Clear dir block buffer (512 bytes) and loop
Macro: STA.NE [Source: macros.inc]
     1 4601 91 DC C8				STA	(BLKBUF),Y+
     2 4604 D0 FB				BNE	ANDIR_LP1
Source: boot_sys_os.asm
   540 4606 E6 DD				INC	BLKBUF+1		; next page
   541 4608					DEX.PL	ANDIR_LP1		; branch always
Macro: DEX.PL [Source: macros.inc]
     1 4608 CA					DEX
     2 4609 10 F6				BPL	ANDIR_LP1
Source: boot_sys_os.asm
   542 						
   543 460B A9 02 85 DD				MVA	#>DIR_BLK_BUF BLKBUF+1	; Set to begin of buffer again
   544 460F A2 01				LDX	#1			; 1 = . subdir entry
   545 4611 20 9C 45				JSR	ADD_NEW_SUBDIR		; add subdir . (current dir)
   546 4614 A5 DC 18 69 20 85 + 		ADB	BLKBUFL #$20		; BLKBUF += $20, next dir entry
   547 461B A2 02				LDX	#2			; 2 = .. subdir entry
   548 461D 20 9C 45				JSR	ADD_NEW_SUBDIR		; add subdir .. (parent dir)
   549
   550 						; and write it to disk
   551 				.if	DBG_PRINT = 1
   552 4620					PRSTR	TXT_CURR_CLST3		; Print 'ADD_NEW_DIR, FREE=$'
Macro: PRSTR [Source: macros.inc]
     1 4620 A2 50			LDX	<TXT_CURR_CLST3				; MADS makes this immediate
     2 4622 A0 46			LDY	>TXT_CURR_CLST3
Source: boot_sys_os.asm
     2 4624 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_os.asm
   553 4627					PRHEX32	FREE_CLUSTER		; print FREE_CLUSTER in hex
Macro: PRHEX32 [Source: macros.inc]
     1 4627 AD 23 18			LDA	FREE_CLUSTER+2+1				; print MSB
     2 462A 20 91 E0			JSR	HEXOUT
     3 462D AD 22 18			LDA	FREE_CLUSTER+2
     4 4630 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_os.asm
     1 4633 AD 21 18			LDA	FREE_CLUSTER+1				; print MSB
     2 4636 20 91 E0			JSR	HEXOUT
     3 4639 AD 20 18			LDA	FREE_CLUSTER
     4 463C 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_os.asm
Source: boot_sys_os.asm
   554 463F 20 5A E0				JSR	CROUT			; Print CR
   555 				.endif
   556 4642					LDXYI	FREE_CLUSTER		; Write new subdir in cluster with FREE_CLUSTER nr
Macro: LDXYI [Source: macros.inc]
     1 4642 A2 20			LDX	<FREE_CLUSTER				; MADS makes this immediate
     2 4644 A0 18			LDY	>FREE_CLUSTER
Source: boot_sys_os.asm
   557 4646 20 FC 40				JSR	CLSTR_TO_BLK		; Convert FREE_CLUSTER nr to LBA nr in num32
   558 4649					LDXYI	NUM32			; LBA nr
Macro: LDXYI [Source: macros.inc]
     1 4649 A2 C0			LDX	<NUM32				; MADS makes this immediate
     2 464B A0 00			LDY	>NUM32
Source: boot_sys_os.asm
   559 464D 4C FB 42				JMP	OS_SAVE_DIR		; Save new subdir to disk and return
   560 						
   561 4650 41 44 44 5F 4E 45 + TXT_CURR_CLST3	.by	'ADD_NEW_DIR_CLST, Free=$' $00
   562
   563 				; **** Add First Cluster To Empty File *****************************************
   564 				; ******************************************************************************
   565 4669 20 EA 44		OS_ADD_CLUSTER  JSR	INIT_FREE_CLUSTER	; FREE_CLUSTER = 0L
   566 466C 20 FB 44				JSR     OS_NEXT_FREE_CLUSTER	; Get free cluster in FREE_CLUSTER
   567 466F 90 03		                BCC     ADD_CLUSTER_END     	; no free cluster found
   568 						
   569 4671 20 2D 45		                JSR     WRITE_FAT_ENTRY	    	; Allocate CURR_CLUSTER, also writes FAT block back to disk
   570 4674 60			ADD_CLUSTER_END RTS
   571
   572 				; **** Create New File *********************************************************
   573 				; Input:  A = File Attributes
   574 				; Output: C = 0 - Error; C = 1 - No Error
   575 				;         A = $FF - File/Directory already exists; A <> $FF Write Error Codes
   576 				; ******************************************************************************
   577 4675 8D 12 18		OS_CREATE       STA     F_ATTRIBS           	; save attributes
   578 4678			                AND.EQ  #FA_DIRECTORY ADD_FILE 	; create a directory? Branch if not (add a file)
Macro: AND.EQ [Source: macros.inc]
     6 4678 29 10				AND	#FA_DIRECTORY
     7 467A F0 07				BEQ	ADD_FILE
Source: boot_sys_os.asm
   579 467C 20 DB 46		                JSR     OS_DIR_EXISTS       	; C=1: dirname already exists
   580 467F 90 05				BCC	OS_CREATE_CONT		; branch if dirname does not exist yet
   581 4681 B0 2C				BCS	OS_CREATE_ERR		; branch on error
   582
   583 4683 20 E1 46		ADD_FILE        JSR     OS_FILE_EXISTS      	; check if file already exists
   584 4686			OS_CREATE_CONT	
   585 4686 A9 FF				LDA     #$FF                	; error result -1 if file/dir exists
   586 4688 B0 25		                BCS     OS_CREATE_ERR       	; file already exists, exit with error $FF
   587
   588 468A 20 69 46				JSR	OS_ADD_CLUSTER		; Return free cluster in CURR_CLUSTER and write FAT
   589 						
   590 						; Find a Free dir. entry and fill it with file info and save it to disk
   591 468D 20 D5 46				JSR 	OS_FIND_FREE		; Find a free directory entry in the current directory
   592 				.if	DBG_PRINT = 1
   593 4690					PRSTR	TXT_FFREE1		; DEBUG
Macro: PRSTR [Source: macros.inc]
     1 4690 A2 B1			LDX	<TXT_FFREE1				; MADS makes this immediate
     2 4692 A0 46			LDY	>TXT_FFREE1
Source: boot_sys_os.asm
     2 4694 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_os.asm
   594 4697					PRHEX16	CURR_DIR_ENTRY
Macro: PRHEX16 [Source: macros.inc]
     1 4697 A5 A9			LDA	CURR_DIR_ENTRY+1				; print MSB
     2 4699 20 91 E0			JSR	HEXOUT
     3 469C A5 A8			LDA	CURR_DIR_ENTRY
     4 469E 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_os.asm
   595 46A1 20 5A E0				JSR	CROUT			; Print CR
   596 				.endif
   597 46A4 AD 12 18		                LDA     F_ATTRIBS		; Get file/dir attributes
   598 46A7 20 0E 43				JSR	OS_CREATE_FILE		; create the file/dir on disk
   599 						
   600 46AA 20 F5 45				JSR	ADD_NEW_DIR_CLST	; Add new dir cluster with . and .. and save it to disk
   601 46AD 38					SEC				; C=1, OK
   602 46AE 60			                RTS
   603 46AF 18			OS_CREATE_ERR   CLC				; C=0, error
   604 46B0 60			OS_CREATE_END   RTS				; return
   605 				                
   606 46B1 46 72 65 65 20 44 + TXT_FFREE1	.by	'Free Dir Entry $' $00
   607
   608 				; **** Open File ***************************************************************
   609 				; ******************************************************************************
   610 46C2 60			OS_OPEN         RTS
   611
   612 				; **** Close File **************************************************************
   613 				; ******************************************************************************
   614 46C3 60			OS_CLOSE        RTS
   615
   616 				; **** Set File Size ***********************************************************
   617 				; ******************************************************************************
   618 46C4 60			OS_SET_SIZE     RTS
   619
   620 				; **** Delete File *************************************************************
   621 				; ******************************************************************************
   622 46C5 60			OS_DELETE       RTS
   623
   624 				; **** Test If File Is Empty ************** ************************************
   625 				; Input:  Ptr(CURR_DIR_ENTRY)
   626 				; Output: C = 1 - File is empty; C = 0 - File not empty
   627 				; ******************************************************************************
   628 46C6 A2 04		OS_FILE_EMPTY   LDX     #$04
   629 46C8 A0 1C		                LDY     #D_FILE_SIZE        			; index to file size
   630 46CA 18			                CLC
   631 46CB			NEXT_SIZE_BYTE  LDA.NE  (CURR_DIR_ENTRY),Y OS_FILE_EMPTY2	; branch if file-size byte > 0 (file is not empty)
Macro: LDA.NE [Source: macros.inc]
     1 46CB B1 A8				LDA	(CURR_DIR_ENTRY),Y
     2 46CD D0 05				BNE	OS_FILE_EMPTY2
Source: boot_sys_os.asm
   632 46CF C8			                INY
   633 46D0			                DEX.NE	NEXT_SIZE_BYTE      			; test next byte
Macro: DEX.NE [Source: macros.inc]
     1 46D0 CA					DEX
     2 46D1 D0 F8				BNE	NEXT_SIZE_BYTE
Source: boot_sys_os.asm
   634 46D3 38			                SEC			    			; C=1: File is empty
   635 46D4 60			OS_FILE_EMPTY2  RTS			    			; return
   636
   637 				; **** Check If a directory entry is free or deleted ***************************
   638 				; ******************************************************************************
   639 46D5			OS_FIND_FREE   	LDXYI	CB_FIND_FREE_DIR_ENTRY
Macro: LDXYI [Source: macros.inc]
     1 46D5 A2 96			LDX	<CB_FIND_FREE_DIR_ENTRY				; MADS makes this immediate
     2 46D7 A0 49			LDY	>CB_FIND_FREE_DIR_ENTRY
Source: boot_sys_os.asm
   640 46D9 D0 1A		                BNE     OS_FIND			; branch always
   641
   642 				; **** Check If Directory Already Exists ***************************************
   643 				; ******************************************************************************
   644 46DB			OS_DIR_EXISTS   LDXYI   CB_DIR_EXISTS
Macro: LDXYI [Source: macros.inc]
     1 46DB A2 4A			LDX	<CB_DIR_EXISTS				; MADS makes this immediate
     2 46DD A0 49			LDY	>CB_DIR_EXISTS
Source: boot_sys_os.asm
   645 46DF D0 14		                BNE     OS_FIND			; branch always
   646 				                
   647 				; **** Check If Directory Is Available *****************************************
   648 				; ******************************************************************************
   649 46E1			OS_FILE_EXISTS  LDXYI   CB_FILE_EXISTS
Macro: LDXYI [Source: macros.inc]
     1 46E1 A2 6E			LDX	<CB_FILE_EXISTS				; MADS makes this immediate
     2 46E3 A0 49			LDY	>CB_FILE_EXISTS
Source: boot_sys_os.asm
   650 46E5 D0 0E		                BNE     OS_FIND			; branch always
   651
   652 				; **** Find Directory **********************************************************
   653 				; ******************************************************************************
   654 46E7			OS_FIND_PATH    LDXYI   CB_FIND_SUBDIR
Macro: LDXYI [Source: macros.inc]
     1 46E7 A2 4D			LDX	<CB_FIND_SUBDIR				; MADS makes this immediate
     2 46E9 A0 49			LDY	>CB_FIND_SUBDIR
Source: boot_sys_os.asm
   655 46EB D0 08		                BNE     OS_FIND			; branch always
   656
   657 				; **** Find File ***************************************************************
   658 				; ******************************************************************************
   659 46ED			OS_FIND_FILE    LDXYI   CB_FIND_FILE
Macro: LDXYI [Source: macros.inc]
     1 46ED A2 71			LDX	<CB_FIND_FILE				; MADS makes this immediate
     2 46EF A0 49			LDY	>CB_FIND_FILE
Source: boot_sys_os.asm
   660 				                                           ; fall through to OS_FIND
   661 				                                           
   662 				; **** Find All Files **********************************************************
   663 				; ******************************************************************************
   664 46F1 A9 FF		OS_FIND_ALL     LDA     #$FF                ; disable total file counting
   665 46F3 D0 02		                BNE     OS_FIND2
   666
   667 				; **** Main Find Routine *******************************************************
   668 				; ******************************************************************************
   669 46F5 A9 00		OS_FIND         LDA     #$00                ; enable total file counting
   670 46F7			OS_FIND2        STXY    CMD_ADDR            ; set command function address
Macro: STXY [Source: macros.inc]
     1 46F7 8E B4 49			STX	CMD_ADDR
     2 46FA 8C B5 49			STY	CMD_ADDR+1
Source: boot_sys_os.asm
   671 				                                            ; fall through to OS_DIR_LOOP
   672
   673 				; **** Loop Through Actual Directory *******************************************
   674 				; Input:  Ptr[X:Y] = Address to command specific function
   675 				;         A = $00 - Enable total file counting; A <> $00 - counting disabled
   676 				; Output: C = 1 - Found; C = 0 - Not Found
   677 				; ******************************************************************************
   678 46FD 8D 13 18		OS_DIR_LOOP     STA     TERM_FLAG           			; set/clear counter termination flag
   679 4700 A9 00 8D 15 18 8D +                 MWA	#0 CURR_FILE_CNT    			; clear total file counter
   680 4708 20 A4 42		                JSR     OS_FIRST_DIR_BLK    			; load first block of actual directory
   681 470B			LOWER_DIR_BLK   LDXYI   DIR_BLK_BUFL        			; set pointer to lower page of block buffer
Macro: LDXYI [Source: macros.inc]
     1 470B A2 00			LDX	<DIR_BLK_BUFL				; MADS makes this immediate
     2 470D A0 02			LDY	>DIR_BLK_BUFL
Source: boot_sys_os.asm
   682 470F			SET_CURR_ENTRY  STXY	CURR_DIR_ENTRY	    			; select current directory entry
Macro: STXY [Source: macros.inc]
     1 470F 86 A8			STX	CURR_DIR_ENTRY
     2 4711 84 A9			STY	CURR_DIR_ENTRY+1
Source: boot_sys_os.asm
   683 4713 A0 0B		GET_CURR_ENTRY  LDY     #D_ATTRIBUTES       			; index to file attributes
   684 4715 B1 A8		                LDA     (CURR_DIR_ENTRY),Y  			; load file attributes
   685 4717 AA			                TAX                         			; load attributes into X
   686 4718 A0 00		                LDY     #D_FILENAME         			; index to filename
   687 471A			                LDA.EQ  (CURR_DIR_ENTRY),Y OS_DIR_LOOP_EOF	; load first char of filename and branch if NULL (= last entry)
Macro: LDA.EQ [Source: macros.inc]
     1 471A B1 A8				LDA	(CURR_DIR_ENTRY),Y
     2 471C F0 47				BEQ	OS_DIR_LOOP_EOF
Source: boot_sys_os.asm
   688 471E 20 3D 4A		                JSR     CMD_EXECUTE         			; call command routine
   689 4721 B0 43		                BCS     OS_DIR_LOOP_END	    			; C=1: OK and return
   690 						
   691 4723			NEXT_ITEM       LDA.NE  TERM_FLAG END_LOOP_CHK           	; check if count is terminated, branch if flag > 0
Macro: LDA.NE [Source: macros.inc]
     1 4723 AD 13 18				LDA	TERM_FLAG
     2 4726 D0 08				BNE	END_LOOP_CHK
Source: boot_sys_os.asm
   692 4728 EE 15 18 D0 03 EE + 		INW	CURR_FILE_CNT	    			; yes, increment total file counter
   693 4730 A5 A8 18 69 20 85 + END_LOOP_CHK    ADB	CURR_DIR_ENTRY #$20 			; CURR_DIR_ENTRY += $20, next dir. entry
   694 4737 90 DA		                BCC     GET_CURR_ENTRY	    			; LSB overflow?
   695 						
   696 4739 A9 00		                LDA     #$00
   697 473B 65 A9 85 A9		                ADC:STA	CURR_DIR_ENTRY+1    			; MSB +1
   698 473F			                CMP.NE  #(> DIR_BLK_BUFH)+1 UPPER_DIR_BLK	; branch if we are in 2nd page above 512 B dir buffer
Macro: CMP.NE [Source: macros.inc]
     1 473F C9 04				CMP	#(> DIR_BLK_BUFH)+1
     2 4741 D0 1B				BNE	UPPER_DIR_BLK
Source: boot_sys_os.asm
   699
   700 4743			                DEC.NE  CURR_BLK_NUM LOAD_DIR_BLK	    	; CURR_BLK_NUM counts from D_SECT_PER_CLST down to 0, load next block if > 0
Macro: DEC.NE [Source: macros.inc]
     1 4743 CE 1D 18				DEC	CURR_BLK_NUM
     2 4746 D0 10				BNE	LOAD_DIR_BLK
Source: boot_sys_os.asm
   701 4748			                LDA.EQ  D_FAT_TYPE LOAD_DIR_CLSTR          	; get FAT type, branch if FAT32 (load next dir cluster)
Macro: LDA.EQ [Source: macros.inc]
     1 4748 AD 0A 04				LDA	D_FAT_TYPE
     2 474B F0 04				BEQ	LOAD_DIR_CLSTR
Source: boot_sys_os.asm
   702 474D 24 0B		                BIT     D_ATTRIBUTES        			; else check if root directory
   703 474F B0 14		                BCS     OS_DIR_LOOP_EOF     			; if root dir and not FAT32, all directory blocks read. Exit
   704
   705 4751 20 F5 42		LOAD_DIR_CLSTR  JSR     OS_NEXT_DIR_CLSTR   ; load next directory cluster from device
   706 4754 90 B5		                BCC     LOWER_DIR_BLK       ; and reset read pointer to lower page of block buffer
   707 4756 B0 0D		                BCS     OS_DIR_LOOP_EOF     ; directory EOF reached. Exit
   708
   709 4758 20 E7 42		LOAD_DIR_BLK    JSR     OS_NEXT_DIR_BLK     ; load next directory block from device
   710 475B 4C 0B 47		                JMP     LOWER_DIR_BLK       ; and reset read pointer to lower page of block buffer
   711
   712 475E			UPPER_DIR_BLK   LDXYI   DIR_BLK_BUFH        ; set pointer to upper page of block buffer
Macro: LDXYI [Source: macros.inc]
     1 475E A2 00			LDX	<DIR_BLK_BUFH				; MADS makes this immediate
     2 4760 A0 03			LDY	>DIR_BLK_BUFH
Source: boot_sys_os.asm
   713 4762 4C 0F 47		                JMP     SET_CURR_ENTRY	    ; branch to begin of loop
   714
   715 4765 18			OS_DIR_LOOP_EOF CLC			    ; C=1: not found
   716 4766 60			OS_DIR_LOOP_END RTS			    ; return
   717
   718 				; **** Set Drive Command *******************************************************
   719 				; Input:  A = Drive Number (0..25)
   720 				; Output: C = 0 - Error
   721 				; ******************************************************************************
   722 4767			OS_SET_DRIVE    CMP.EQ  CURR_DRIVE SET_DRIVE_END	; Branch (just exit) if actual drive equals current drive
Macro: CMP.EQ [Source: macros.inc]
     1 4767 CD 1E 18				CMP	CURR_DRIVE
     2 476A F0 3E				BEQ	SET_DRIVE_END
Source: boot_sys_os.asm
   723 476C			                CMP.CS  #$08       SET_DRIVE_ERR  	; show error message if actual drive number exceeds max drive?
Macro: CMP.CS [Source: macros.inc]
     1 476C C9 08				CMP	#$08			; 
     2 476E B0 3C				BCS	SET_DRIVE_ERR			; branch if C=1 (A-b1 >= 0)
Source: boot_sys_os.asm
   724 4770 AA			                TAX                         		; save actual drive number to Y
   725 4771 AD 1E 18		                LDA     CURR_DRIVE          		; load current drive number into A
   726 4774 0A 0A 0A 0A 0A	        :5      ASL             	    		; multiply current drive number by 32
   727 4779 85 E8		                STA     STOL           	    		; and save it to indirect pointer low byte
   728 477B A9 05 85 E9		                MVA	#>MOUNT_TABLE STOH  		; set high byte of mount table
   729 477F					MVAY	$20 CURR_VOLUME (STOL)		; update device descriptor in mount table
Macro: MVAY [Source: macros.inc]
     1 477F A0 1F			LDY	#$20-1
     2 4781 B9 00 04 91 E8 88	lp	MVA	CURR_VOLUME,Y (STOL),Y-
     3 4787 10 F8			BPL	lp
Source: boot_sys_os.asm
   730 4789 8A			                TXA
   731 478A 0A 0A 0A 0A 0A	        :5      ASL             	    		; multiply current drive number by 32
   732 478F 85 E8		                STA     STOL                		; and save it to indirect pointer low byte
   733 4791 A0 08		                LDY     #$08                		; set index to D_DEV_ID
   734 4793			                LDA.EQ  (STOL),Y SET_DRIVE_ERR		; load device ID, if NULL then show error message
Macro: LDA.EQ [Source: macros.inc]
     1 4793 B1 E8				LDA	(STOL),Y
     2 4795 F0 15				BEQ	SET_DRIVE_ERR
Source: boot_sys_os.asm
   735
   736 4797					MVAY    $20 (STOL) CURR_VOLUME	; load device descriptor into CURR_VOLUME
Macro: MVAY [Source: macros.inc]
     1 4797 A0 1F			LDY	#$20-1
     2 4799 B1 E8 99 00 04 88	lp	MVA	(STOL),Y CURR_VOLUME,Y-
     3 479F 10 F8			BPL	lp
Source: boot_sys_os.asm
   737 47A1 8E 1E 18		                STX     CURR_DRIVE          	; store actual drive as current drive
   738
   739 				; TODO: Invalidate Block Buffers ###########################################################################
   740
   741 47A4 AD 08 04		                LDA     D_DEV_ID            ; get current device id
   742 47A7 20 AA E1		                JSR     OPEN_DEVICE         ; and open the device driver
   743 47AA 38			SET_DRIVE_END   SEC			    ; C=1: no error
   744 47AB 60			                RTS
   745
   746 47AC			SET_DRIVE_ERR   LDXYI   MSG_DRIVE_ERR	
Macro: LDXYI [Source: macros.inc]
     1 47AC A2 95			LDX	<MSG_DRIVE_ERR				; MADS makes this immediate
     2 47AE A0 53			LDY	>MSG_DRIVE_ERR
Source: boot_sys_os.asm
   747 47B0 4C 48 48		                JMP     OS_PRINT_ERR	    ; Print 'Drive not found'
   748
   749 				; **** Test If Root Directory **************************************************
   750 				; Input:
   751 				; Output: C = 1 - is root dir; C = 0 - is not root dir
   752 				; ******************************************************************************
   753 47B3 A0 03		OS_IS_ROOT_DIR  LDY     #$03
   754 47B5 B9 04 04		COMP_DIR        LDA     D_ACTUAL_DIR,Y	     		; contains cluster nr of actual dir.
   755 47B8			                CMP.NE  D_START_DIR,Y OS_IS_ROOT_END	; branch if not a root dir.
Macro: CMP.NE [Source: macros.inc]
     1 47B8 D9 1C 04				CMP	D_START_DIR,Y
     2 47BB D0 05				BNE	OS_IS_ROOT_END
Source: boot_sys_os.asm
   756 47BD			                DEY.PL	COMP_DIR             		; test next cluster byte
Macro: DEY.PL [Source: macros.inc]
     1 47BD 88					DEY
     2 47BE 10 F5				BPL	COMP_DIR
Source: boot_sys_os.asm
   757 						
   758 47C0 38			                SEC			     		; C=1 => is root dir.
   759 47C1 60			                RTS
   760 47C2 18			OS_IS_ROOT_END  CLC			     		; C=0 => not a root dir.
   761 47C3 60			                RTS
   762
   763 				; **** Set Root Directory Command **********************************************
   764 				; ******************************************************************************
   765 47C4 A2 03		OS_SET_ROOT_DIR LDX	#3				; 4 byte to copy
   766 47C6 BD 1C 04 9D 04 04	OS_SET_RDIR_LP	MVA 	D_START_DIR,X D_ACTUAL_DIR,X	; D_ACTUAL_DIR = root dir cluster nr
   767 47CC 9D 24 18 CA				STA	CURR_DIR_BLK,X-			; Save in CURR_DIR_BLK
   768 47D0 10 F4				BPL	OS_SET_RDIR_LP			; branch if not done yet
   769 						
   770 47D2 A9 5C 8D 20 04 A9 + 		MWA	#BSLASH	D_SUBDIR_NAME		; Add '\'and '\0' to D_SUBDIR_NAME
   771 47DC 60					RTS					; return
   772
   773 				; **** Set Directory Command ***************************************************
   774 				; Input : CURR_DIR_ENTRY: Pointer into current directory block
   775 				; Copy the directory cluster number to D_ACTUAL_DIR and CURR_DIR_BLK.
   776 				; A cluster number cannot be < 2. If a cluster number is 0, then it is 
   777 				; considered to be the root-dir and cluster number is set to 2.
   778 				; ******************************************************************************
   779 47DD			OS_SET_DIR      PRHEX16	CURR_DIR_ENTRY
Macro: PRHEX16 [Source: macros.inc]
     1 47DD A5 A9			LDA	CURR_DIR_ENTRY+1				; print MSB
     2 47DF 20 91 E0			JSR	HEXOUT
     3 47E2 A5 A8			LDA	CURR_DIR_ENTRY
     4 47E4 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_os.asm
   780 47E7					PRCH	','
Macro: PRCH [Source: macros.inc]
     1 47E7 A9 2C			LDA	#','
     2 47E9 20 52 E0			JSR	COUT
Source: boot_sys_os.asm
   781 47EC					PRCLW	D_START_CLSTH CURR_DIR_ENTRY	; Print 1st cluster HIGH word
Macro: PRCLW [Source: macros.inc]
     1 47EC A0 15				LDY	#D_START_CLSTH+1		; Print MSB of word
     1 47EE B1 A8				LDA	(CURR_DIR_ENTRY),Y
     5 47F0 20 91 E0				JSR	HEXOUT			; changes Y!
Source: boot_sys_os.asm
     7 47F3 A0 14				LDY	#D_START_CLSTH			; Print LSB of word
     1 47F5 B1 A8				LDA	(CURR_DIR_ENTRY),Y
     5 47F7 20 91 E0				JSR	HEXOUT			; changes Y!
Source: boot_sys_os.asm
Source: boot_sys_os.asm
   782 47FA					PRCLW	D_START_CLST  CURR_DIR_ENTRY	; Print 1st cluster LOW  word
Macro: PRCLW [Source: macros.inc]
     1 47FA A0 1B				LDY	#D_START_CLST+1		; Print MSB of word
     1 47FC B1 A8				LDA	(CURR_DIR_ENTRY),Y
     5 47FE 20 91 E0				JSR	HEXOUT			; changes Y!
Source: boot_sys_os.asm
     7 4801 A0 1A				LDY	#D_START_CLST			; Print LSB of word
     1 4803 B1 A8				LDA	(CURR_DIR_ENTRY),Y
     5 4805 20 91 E0				JSR	HEXOUT			; changes Y!
Source: boot_sys_os.asm
Source: boot_sys_os.asm
   783 4808					PRCH	']'
Macro: PRCH [Source: macros.inc]
     1 4808 A9 5D			LDA	#']'
     2 480A 20 52 E0			JSR	COUT
Source: boot_sys_os.asm
   784 480D A0 15				LDY     #D_START_CLSTH+1		; MSB of 1st cluster HIGH word
   785 480F A2 04		                LDX     #$04				; Copy 4 bytes
   786 4811 8E 36 48				STX	OS_DWORD0			; Flag for zero all 4 bytes 
   787 4814 CA					DEX					; Copy bytes 3..0
   788 4815 20 23 48				JSR	OS_SET_WORD			; Save 1st cluster HIGH word
   789 4818 A0 1B				LDY	#D_START_CLST+1			; MSB of 1st cluster LOW word
   790 481A 20 23 48				JSR	OS_SET_WORD			; Save 1st cluster LOW word
   791 481D					LDA.EQ	OS_DWORD0 OS_SET_ROOT_DIR	; branch if flag is 0 (all 4 bytes are 0), branch to set actual dir to D_START_DIR
Macro: LDA.EQ [Source: macros.inc]
     1 481D AD 36 48				LDA	OS_DWORD0
     2 4820 F0 A2				BEQ	OS_SET_ROOT_DIR
Source: boot_sys_os.asm
   792 4822 60			                RTS			     		; return
   793 				                
   794 				;-------------------------------------------------------------------------------------------------
   795 				; Used by OS_SET_DIR to copy a cluster nr in a dir. entry to D_ACTUAL_DIR and CURR_DIR_BLK
   796 				; A cluster nr is stored in two words in a dir. entry: a High word in $14 and a Low word in $1A.
   797 				; A flag (OS_DWORD0) is used to check if all 4 bytes are zero.
   798 				;-------------------------------------------------------------------------------------------------
   799 4823 20 26 48		OS_SET_WORD	JSR	OS_SET_BYTE				; Store word in D_ACTUAL_DIR and CURR_DIR_BLK
   800 4826 B1 A8 9D 04 04	OS_SET_BYTE	MVA	(CURR_DIR_ENTRY),Y D_ACTUAL_DIR,X	; Get byte from D_START_CLSTH or D_START_CLST and save in D_ACTUAL_DIR
   801 482B					STA.NE	CURR_DIR_BLK,X SET_BYTE_NOT0		; Save in CURR_DIR_BLK and branch if > 0
Macro: STA.NE [Source: macros.inc]
     1 482B 9D 24 18				STA	CURR_DIR_BLK,X
     2 482E D0 03				BNE	SET_BYTE_NOT0
Source: boot_sys_os.asm
   802 4830 CE 36 48				DEC	OS_DWORD0				; decrement flag for zero all 4 bytes
   803 4833 88			SET_BYTE_NOT0	DEY				
   804 4834 CA					DEX
   805 4835 60					RTS				; return
   806 4836 00			OS_DWORD0	.byte	$00
   807
   808 				; **** Read Input String *******************************************************
   809 				; Output: Null terminated string in STRBUF
   810 				; ******************************************************************************
   811 4837 20 62 E0		OS_STRING_IN    JSR     STRIN                ; input string into string buffer
   812 483A A9 00 85 EA A9 14 +                 MWA	#STRBUF PSTR	     ; set string pointer to buffer
   813 4842 A9 00 9D 00 14	                MVA     #$00    STRBUF,X     ; terminate string with NULL
   814 4847 60			                RTS
   815
   816 				; **** Print Error Message *****************************************************
   817 				; Input:  Ptr[X:Y] = Pointer to Error Message
   818 				; Output: C = 0
   819 				; ******************************************************************************
   820 4848 20 82 F6		OS_PRINT_ERR    JSR     OS_STRING_OUT
   821 484B 18			                CLC
   822 484C 60			                RTS
   823 				                
   824 				; **** Parse Full Path String **************************************************
   825 				; Input:  Ptr[X:Y] to Path String
   826 				; Output: C = 0 - Error; C = 1 - No Error
   827 				;         A = $00       - End Of String
   828 				;           = $FF       - Path Not Found
   829 				;           = ?         - Wildcard Included
   830 				;           = PATH_SEP  - No Trailing Name
   831 				; ******************************************************************************
   832 484D			OS_PARSE_PATH   STXY    PSTR                	; save string pointer
Macro: STXY [Source: macros.inc]
     1 484D 86 EA			STX	PSTR
     2 484F 84 EB			STY	PSTR+1
Source: boot_sys_os.asm
   833 4851 A0 00		                LDY     #$00
   834 4853 8C 11 18		                STY     TERM_CHAR
   835 4856 A9 5C		                LDA     #PATH_SEP
   836 4858			                CMP.NE  (PSTR),Y PARSE_PATH2	; check if first char is the path seperator. Branch if not, just check the path
Macro: CMP.NE [Source: macros.inc]
     1 4858 D1 EA				CMP	(PSTR),Y
     2 485A D0 06				BNE	PARSE_PATH2
Source: boot_sys_os.asm
   837 485C 20 C4 47		                JSR     OS_SET_ROOT_DIR     	; yes, switch to root directory
   838 485F A0 00		                LDY     #$00
   839 4861 C8			PARSE_PATH      INY
   840 4862			PARSE_PATH2     LDA.EQ  (PSTR),Y PARSE_TERM     ; load next char from path string, branch if NULL (set termination char)
Macro: LDA.EQ [Source: macros.inc]
     1 4862 B1 EA				LDA	(PSTR),Y
     2 4864 F0 18				BEQ	PARSE_TERM
Source: boot_sys_os.asm
   841 4866			                CMP.EQ  #SPC     PARSE_TERM     ; Set termination char if it is a SPACE char
Macro: CMP.EQ [Source: macros.inc]
     1 4866 C9 20				CMP	#SPC
     2 4868 F0 14				BEQ	PARSE_TERM
Source: boot_sys_os.asm
   842 						
   843 486A 20 94 48		PARSE_NAME      JSR     OS_PARSE_NAME       ; no, parse partial path name
   844 486D 90 21		                BCC     PARSE_PATH_END      ; filename includes forbidden chars, exit with error
   845 						
   846 486F			                CMP.NE  #PATH_SEP PARSE_PATH_OK	; is termination char the path seperator? No, trailing name, exit withour error
Macro: CMP.NE [Source: macros.inc]
     1 486F C9 5C				CMP	#PATH_SEP
     2 4871 D0 1C				BNE	PARSE_PATH_OK
Source: boot_sys_os.asm
   847 4873 84 EE		                STY     PSAV                ; save string index
   848 4875 20 E7 46		                JSR     OS_FIND_PATH        ; yes, find and switch patch
   849 4878 A4 EE		                LDY     PSAV                ; restore string index
   850 487A 90 0F		                BCC     PARSE_PATH_ERR      ; path not found, exit with error
   851 487C B0 E3		                BCS     PARSE_PATH          ; branch always
   852 				                
   853 487E 18			PARSE_TERM      CLC
   854 487F			                LDA.NE  TERM_CHAR PARSE_PATH_END2	; branch if TERM_CHAR > 0
Macro: LDA.NE [Source: macros.inc]
     1 487F AD 11 18				LDA	TERM_CHAR
     2 4882 D0 0F				BNE	PARSE_PATH_END2
Source: boot_sys_os.asm
   855 4884 A9 5C 8D 11 18	                MVA     #PATH_SEP TERM_CHAR		; TERM_CHAR = PATH_SEP
   856 4889 D0 04		                BNE     PARSE_PATH_OK			; branch always
   857 				                
   858 488B			PARSE_PATH_ERR  LDA.NE  #$FF PARSE_PATH_END2    ; path not found error
Macro: LDA.NE [Source: macros.inc]
     1 488B A9 FF				LDA	#$FF
     2 488D D0 04				BNE	PARSE_PATH_END2
Source: boot_sys_os.asm
   859 488F 38			PARSE_PATH_OK   SEC
   860 4890 AD 11 18		PARSE_PATH_END  LDA     TERM_CHAR           	; load termination char as error status into A
   861 4893 60			PARSE_PATH_END2 RTS
   862
   863 				; **** Parse A Partial Path Name String ****************************************
   864 				; Input:  A = First Char Of Partial Path
   865 				;         Y = Index Into Path String
   866 				; Output: C = 0 - Error; C = 1 - No Error
   867 				;         TERM_CHAR = NULL      - Filename
   868 				;                   = ?         - Wildcard Chars Included
   869 				;                   = PATH_SEP  - Subdirectory Name
   870 				; ******************************************************************************
   871 4894 A2 08		OS_PARSE_NAME   LDX     #8
   872 4896 86 AB		                STX     BCNT                	; set max char count to 8
   873 4898 A2 00		                LDX     #$00                	; reset index to name string buffer
   874 489A 8E 11 18		                STX     TERM_CHAR
   875 489D			CHK_DOT         CMP.NE  #DOT GET_CHAR       	; is first char a . char? (. dir?), branch if not
Macro: CMP.NE [Source: macros.inc]
     1 489D C9 2E				CMP	#DOT
     2 489F D0 10				BNE	GET_CHAR
Source: boot_sys_os.asm
   876 48A1 9D 10 4A E8		                STA     FILENAME,X+         	; yes, store it
   877 48A5 C8			                INY
   878 48A6 B1 EA		                LDA     (PSTR),Y            	; get next char from input string
   879 48A8			                CMP.NE  #DOT GET_CHAR       	; is second char a . char? (.. dir?), branch if not
Macro: CMP.NE [Source: macros.inc]
     1 48A8 C9 2E				CMP	#DOT
     2 48AA D0 05				BNE	GET_CHAR
Source: boot_sys_os.asm
   880 48AC 9D 10 4A		SET_CHAR        STA     FILENAME,X          	; yes, store it
   881 48AF E8			NEXT_CHAR       INX                         	; point to next char of parsed name
   882 48B0 C8			NEXT_CHAR2      INY                         	; point to next char of input string
   883 48B1			GET_CHAR        LDA.EQ  (PSTR),Y  FILL_ALL   	; get next char from input string, branch if end of line.
Macro: LDA.EQ [Source: macros.inc]
     1 48B1 B1 EA				LDA	(PSTR),Y
     2 48B3 F0 52				BEQ	FILL_ALL
Source: boot_sys_os.asm
   884 48B5			                CMP.EQ  #SPC      FILL_ALL     	; Terminate if it is a space char
Macro: CMP.EQ [Source: macros.inc]
     1 48B5 C9 20				CMP	#SPC
     2 48B7 F0 4E				BEQ	FILL_ALL
Source: boot_sys_os.asm
   885 48B9			                CMP.EQ  #PATH_SEP SET_TERM_CHAR	; is it a path seperator char? If so, terminate
Macro: CMP.EQ [Source: macros.inc]
     1 48B9 C9 5C				CMP	#PATH_SEP
     2 48BB F0 47				BEQ	SET_TERM_CHAR
Source: boot_sys_os.asm
   886 48BD			                CMP.EQ  #DOT      FILL_NAME     ; is it a . char? If so, fill name with spaces
Macro: CMP.EQ [Source: macros.inc]
     1 48BD C9 2E				CMP	#DOT
     2 48BF F0 3A				BEQ	FILL_NAME
Source: boot_sys_os.asm
   887 48C1			                CMP.EQ  #'*'      FILL_WILDCARD ; is it a * char? If so, fill name with '?'
Macro: CMP.EQ [Source: macros.inc]
     1 48C1 C9 2A				CMP	#'*'
     2 48C3 F0 2C				BEQ	FILL_WILDCARD
Source: boot_sys_os.asm
   888
   889 48C5			                CPX.CS  BCNT NEXT_CHAR          ; branch if name length exceeds max length
Macro: CPX.CS [Source: macros.inc]
     1 48C5 E4 AB				CPX	BCNT			; 
     2 48C7 B0 E6				BCS	NEXT_CHAR			; branch if C=1 (X-b1 >= 0)
Source: boot_sys_os.asm
   890 48C9 20 D8 4A		                JSR     UPPERCASE           	; convert chars to upper case
   891 48CC			                CMP.NE  #'?' GET_CHAR2      	; is it a ? char? Branch if not, check next allowed char
Macro: CMP.NE [Source: macros.inc]
     1 48CC C9 3F				CMP	#'?'
     2 48CE D0 05				BNE	GET_CHAR2
Source: boot_sys_os.asm
   892 48D0 8D 11 18		                STA     TERM_CHAR           	; yes, store ? as termination char
   893 48D3 F0 D7		                BEQ     SET_CHAR            	; and char in name buffer
   894
   895 48D5			GET_CHAR2       CMP.EQ  #MINUS SET_CHAR     ; is it a - char? Yes, store char in name buffer
Macro: CMP.EQ [Source: macros.inc]
     1 48D5 C9 2D				CMP	#MINUS
     2 48D7 F0 D3				BEQ	SET_CHAR
Source: boot_sys_os.asm
   896 48D9			                CMP.EQ  #ULINE SET_CHAR     ; is it a _ char? Yes, store char in name buffer
Macro: CMP.EQ [Source: macros.inc]
     1 48D9 C9 5F				CMP	#ULINE
     2 48DB F0 CF				BEQ	SET_CHAR
Source: boot_sys_os.asm
   897 48DD					CMP.EQ	#'~' SET_CHAR       ; is it a ~ char? Yes, store char in name buffer
Macro: CMP.EQ [Source: macros.inc]
     1 48DD C9 7E				CMP	#'~'
     2 48DF F0 CB				BEQ	SET_CHAR
Source: boot_sys_os.asm
   898 48E1					CMP.CC  #'0' PARSE_NAME_END ; is char in range 0..9? Branch if not, show error message
Macro: CMP.CC [Source: macros.inc]
     1 48E1 C9 30				CMP	#'0'			; 
     2 48E3 90 32				BCC	PARSE_NAME_END			; branch if C=0 (A-b1 < 0)
Source: boot_sys_os.asm
   899 48E5			                CMP.CC  #':' SET_CHAR	    ; yes, store char in name buffer
Macro: CMP.CC [Source: macros.inc]
     1 48E5 C9 3A				CMP	#':'			; 
     2 48E7 90 C3				BCC	SET_CHAR			; branch if C=0 (A-b1 < 0)
Source: boot_sys_os.asm
   900 48E9			                CMP.CC  #'A' PARSE_NAME_END ; is char in range A..Z? Branch if not, show error message
Macro: CMP.CC [Source: macros.inc]
     1 48E9 C9 41				CMP	#'A'			; 
     2 48EB 90 2A				BCC	PARSE_NAME_END			; branch if C=0 (A-b1 < 0)
Source: boot_sys_os.asm
   901 48ED			                CMP.CC  #'[' SET_CHAR	    ; yes, store char in name buffer
Macro: CMP.CC [Source: macros.inc]
     1 48ED C9 5B				CMP	#'['			; 
     2 48EF 90 BB				BCC	SET_CHAR			; branch if C=0 (A-b1 < 0)
Source: boot_sys_os.asm
   902
   903 48F1 A9 3F 8D 11 18	FILL_WILDCARD   MVA     #'?' TERM_CHAR      ; store ? as termination char
   904 48F6 20 0D 49		                JSR     FILL_CHAR           ; fill with ? chars
   905 48F9 B0 B5		                BCS     NEXT_CHAR2          ; branch always
   906
   907 48FB 20 0B 49		FILL_NAME       JSR     SET_SPC_CHAR        ; fill with space chars
   908 48FE A9 0B 85 AB		                MVA     #11 BCNT            ; set max char count to 11
   909 4902 B0 AC		                BCS     NEXT_CHAR2          ; branch always
   910
   911 4904 8D 11 18		SET_TERM_CHAR   STA     TERM_CHAR           ; store termination character
   912 4907 A9 0B 85 AB		FILL_ALL        MVA     #11 BCNT            ; set max char count to 11
   913 490B A9 20		SET_SPC_CHAR    LDA     #SPC                ; set space char as filling char
   914 490D			FILL_CHAR       CPX.CS  BCNT PARSE_NAME_END ; branch if max char count exceeded
Macro: CPX.CS [Source: macros.inc]
     1 490D E4 AB				CPX	BCNT			; 
     2 490F B0 06				BCS	PARSE_NAME_END			; branch if C=1 (X-b1 >= 0)
Source: boot_sys_os.asm
   915 4911 9D 10 4A E8		                STA     FILENAME,X+         ; no, store char in name buffer
   916 4915 90 F6		                BCC     FILL_CHAR           ; and repeat
   917
   918 4917 AD 11 18		PARSE_NAME_END  LDA     TERM_CHAR
   919 491A 60			                RTS
   920 				                
   921 				; **** Compare File Name With Mask *********************************************
   922 				; Output: C = 0 - Names not equal; C = 1 - Names equal
   923 				; ******************************************************************************
   924 491B A0 0A		OS_COMP_NAME    LDY     #10                 		; compare all characters (0..10)
   925 491D B9 10 4A		COMPARE_CHAR    LDA     FILENAME,Y          		; get char from compare mask
   926 4920			                CMP.NE  (CURR_DIR_ENTRY),Y COMPARE_NEQ	; compare character
Macro: CMP.NE [Source: macros.inc]
     1 4920 D1 A8				CMP	(CURR_DIR_ENTRY),Y
     2 4922 D0 05				BNE	COMPARE_NEQ
Source: boot_sys_os.asm
   927 4924			                DEY.PL	COMPARE_CHAR        		; branch if more characters to compare
Macro: DEY.PL [Source: macros.inc]
     1 4924 88					DEY
     2 4925 10 F6				BPL	COMPARE_CHAR
Source: boot_sys_os.asm
   928 						
   929 4927 38			COMPARE_EQU     SEC                         		; C=1, all characters are equal
   930 4928 60			                RTS
   931 4929 18			COMPARE_NEQ     CLC					; C=0, filename is different
   932 492A 60			                RTS
   933 				                
   934 				; **** Delete File *************************************************************
   935 				; Input : A - First character of filename
   936 				; Output: C = 0 - File is not deleted; C = 1 - Names equal
   937 				; ******************************************************************************
   938 492B			OS_FILE_DELETED CMP.NE  #$E5 COMPARE_NEQ       		; is file deleted? Branch if not, C=0 and exit
Macro: CMP.NE [Source: macros.inc]
     1 492B C9 E5				CMP	#$E5
     2 492D D0 FA				BNE	COMPARE_NEQ
Source: boot_sys_os.asm
   939 492F AC 13 18		                LDY     TERM_FLAG           		; termination flag already set?
   940 4932 D0 F3		                BNE     COMPARE_EQU         		; yes, C=1 and exit
   941
   942 4934 8D 13 18		                STA     TERM_FLAG           		; no, set counter termination flag
   943 4937					MVAY	6 CURR_DIR_BLK SEL_DIR_BLK	; SEL_DIR_BLK = CURR_DIR_BLK
Macro: MVAY [Source: macros.inc]
     1 4937 A0 05			LDY	#6-1
     2 4939 B9 24 18 99 44 49 + lp	MVA	CURR_DIR_BLK,Y SEL_DIR_BLK,Y-
     3 4940 10 F7			BPL	lp
Source: boot_sys_os.asm
   944 4942 38			                SEC
   945 4943 60			                RTS
   946 				                
   947 4944 00 00 00 00		SEL_DIR_BLK     .byte $00, $00, $00, $00
   948 4948 00 00		SEL_DIR_ENTRY   .byte $00, $00
   949 				                
   950 				; **** Directory Loop Call Back Functions **************************************
   951 				; Input : A - First character of filename
   952 				;         X - File Attributes
   953 				; Output: C = 1 - File found; C = 0 - File not found
   954 				; ******************************************************************************
   955
   956 				; **** Directory Exists - Call Back Routine ************************************
   957 494A 20 2B 49		CB_DIR_EXISTS   JSR     OS_FILE_DELETED
   958
   959 				; **** Find Sub Directory Name - Call Back Routine *****************************
   960 494D			CB_FIND_SUBDIR  CPX.EQ  #$0F CB_FIND_END       	; branch if a long filename entry
Macro: CPX.EQ [Source: macros.inc]
     1 494D E0 0F				CPX	#$0F
     2 494F F0 43				BEQ	CB_FIND_END
Source: boot_sys_os.asm
   961 4951 AD 10 4A		                LDA     FILENAME            	; do we search for the . directory?
   962 4954			                CMP.NE  #DOT FIND_SUBDIR	; branch if not . or ..
Macro: CMP.NE [Source: macros.inc]
     1 4954 C9 2E				CMP	#DOT
     2 4956 D0 07				BNE	FIND_SUBDIR
Source: boot_sys_os.asm
   963 						
   964 4958 AD 11 4A		                LDA     FILENAME+1		; get next byte
   965 495B			                CMP.EQ  #SPC FIND_SUBDIR_END   	; Space? Yes, do nothing, dir = '.', just exit.
Macro: CMP.EQ [Source: macros.inc]
     1 495B C9 20				CMP	#SPC
     2 495D F0 0D				BEQ	FIND_SUBDIR_END
Source: boot_sys_os.asm
   966 						
   967 495F 8A			FIND_SUBDIR     TXA
   968 4960			                AND.EQ  #FA_DIRECTORY CB_FIND_END	; is it a directory we are looking for? Branch if not, exit
Macro: AND.EQ [Source: macros.inc]
     6 4960 29 10				AND	#FA_DIRECTORY
     7 4962 F0 30				BEQ	CB_FIND_END
Source: boot_sys_os.asm
   969 4964 20 1B 49		                JSR     OS_COMP_NAME        		; yes, compare name with search mask
   970 4967 90 2C		                BCC     CB_FIND_END2        		; branch if C=0: name not equal, get next dir entry, just RTS
   971
   972 						; Emile: two errors here (corrected here and OS_SET_DIR is changed as well):
   973 						; 1) only D_START_CLST ($1A) was used to get dir cluster nr, D_START_CLSTH ($14) also needs to be used 
   974 						; 2) OS_SET_DIR expected 4 consecutive bytes and copied $1A, $1B, $1C & $1D into D_ACTUAL_DIR and CURR_DIR_BLK,
   975 						;    with $1C & $1D not being cluster nr bytes.
   976 4969 20 DD 47		                JSR     OS_SET_DIR          	; make this directory the actual directory
   977 496C 38			FIND_SUBDIR_END SEC                         	; C=1: subdirectory found
   978 496D 60			                RTS				; return
   979 				                
   980 				; **** File Exists - Call Back Routine *****************************************
   981 496E 20 2B 49		CB_FILE_EXISTS  JSR     OS_FILE_DELETED
   982
   983 				; **** Find File Name - Call Back Routine **************************************
   984 4971			CB_FIND_FILE    CPX.EQ  #$0F CB_FIND_END        		; branch if a long filename entry
Macro: CPX.EQ [Source: macros.inc]
     1 4971 E0 0F				CPX	#$0F
     2 4973 F0 1F				BEQ	CB_FIND_END
Source: boot_sys_os.asm
   985 4975 8A			                TXA
   986 4976			                AND.NE  #FA_DIRECTORY CB_FIND_END 		; is it a directory? Branch if so, get next dir entry
Macro: AND.NE [Source: macros.inc]
     6 4976 29 10				AND	#FA_DIRECTORY
     7 4978 D0 1A				BNE	CB_FIND_END
Source: boot_sys_os.asm
   987 497A 20 1B 49		                JSR     OS_COMP_NAME        			; compare name with search mask
   988 497D 90 16		                BCC     CB_FIND_END2        			; name not equal, get next dir entry
   989 						
   990 497F A2 00		                LDX     #$00					; init. index in CURR_CLUSTER
   991 4981 A0 1A		                LDY     #D_START_CLST       			; get low bytes of start cluster address
   992 4983 B1 A8 C8 95 A0 E8	GET_FILE_CLST   MVA     (CURR_DIR_ENTRY),Y+  CURR_CLUSTER,X+	; and store it into current cluster
   993 4989			                CPX.CC  #$02 GET_FILE_CLST     			; branch if not first two address bytes read
Macro: CPX.CC [Source: macros.inc]
     1 4989 E0 02				CPX	#$02			; 
     2 498B 90 F6				BCC	GET_FILE_CLST			; branch if C=0 (X-b1 < 0)
Source: boot_sys_os.asm
   994 498D A0 14		                LDY     #D_START_CLSTH      			; yes, get high bytes of start cluster address
   995 498F			                CPX.CC  #$04 GET_FILE_CLST     			; branch if not all four bytes read
Macro: CPX.CC [Source: macros.inc]
     1 498F E0 04				CPX	#$04			; 
     2 4991 90 F0				BCC	GET_FILE_CLST			; branch if C=0 (X-b1 < 0)
Source: boot_sys_os.asm
   996 4993 60			                RTS                         			; yes, file found
   997
   998 4994 18			CB_FIND_END     CLC                         			; file not found
   999 4995 60			CB_FIND_END2    RTS
  1000 				                
  1001 				; **** Find Free or Deleted Dir. Entry **************************************
  1002 4996			CB_FIND_FREE_DIR_ENTRY
  1003 4996 A0 00				LDY	#D_FILENAME			; set index to filename
  1004 4998 B1 A8				LDA	(CURR_DIR_ENTRY),Y		; 1st char of filename
  1005 499A					CMP.EQ	#$E5 FND_EMPTY			; Branch if deleted entry found
Macro: CMP.EQ [Source: macros.inc]
     1 499A C9 E5				CMP	#$E5
     2 499C F0 09				BEQ	FND_EMPTY
Source: boot_sys_os.asm
  1006 499E			FFD_LP1		LDA.NE	(CURR_DIR_ENTRY),Y NOT_EMPTY	; branch if dir. entry is in use
Macro: LDA.NE [Source: macros.inc]
     1 499E B1 A8				LDA	(CURR_DIR_ENTRY),Y
     2 49A0 D0 10				BNE	NOT_EMPTY
Source: boot_sys_os.asm
  1007 49A2 C8					INY
  1008 49A3			                CPY.CC  #D_ATTRIBUTES FFD_LP1  		; branch if not all characters copied
Macro: CPY.CC [Source: macros.inc]
     1 49A3 C0 0B				CPY	#D_ATTRIBUTES			; 
     2 49A5 90 F7				BCC	FFD_LP1			; branch if C=0 (Y-b1 < 0)
Source: boot_sys_os.asm
  1009 49A7 A9 00		FND_EMPTY	LDA	#$00				; empty rest of subdir, just to be sure
  1010 49A9 91 A8 C8		FFD_LP2		STA	(CURR_DIR_ENTRY),Y+
  1011 49AC					CPY.NE	#$20 FFD_LP2			; branch if not all 32 bytes cleared yet
Macro: CPY.NE [Source: macros.inc]
     1 49AC C0 20				CPY	#$20
     2 49AE D0 F9				BNE	FFD_LP2
Source: boot_sys_os.asm
  1012 						
  1013 49B0 38			FF_EMPTY	SEC					; C=1, dir. entry is free or deleted
  1014 49B1 60			                RTS                         		; return
  1015 49B2 18			NOT_EMPTY     	CLC                         		; C=0, dir. entry is not empty
  1016 49B3 60					RTS					; return
  1017
  1018 				; **** Data Area ***************************************************************
  1019 				; ******************************************************************************
  1020
  1021 				; Indirect Jump Pointer Of Current Command Address *****************************
  1022 49B4 00 00		CMD_ADDR        .word      $0000
  1023 				                
  1024 				; String Data Area *************************************************************
  1025 49B6 2E 2E 2E 0D 0D	MSG_BOOT        .by    '...' CR CR
  1026 49BB 20 57 65 6C 63 6F +                 .by    ' Welcome to DOS-65 System I, Version '
  1027 49E0 30 2E 32 2E 34 0D +                 .byte      VERMAIN,DOT,VERPSUB,DOT,VERSSUB,CR,CR
  1028 49E7 20 32 30 32 33 2F +                 .by    ' 2023/25 by Joerg Walke' CR CR $00
  1029 4A01 4F 75 74 20 6F 66 + MSG_SIZE_ERR    .by    'Out of memory' CR $00
  1030 = 4A10			FILENAME        .ds 	12
    79 4A1C					ICL 	"boot_sys_sh.asm"	; Shell portion of boot.sys
Source: boot_sys_sh.asm
     1 				;-------------------------------------------------------------------------------
     2 				; This file contains the SHELL portion of the BOOT.SYS file.
     3 				; 
     4 				; Assembler: MADS-Assembler
     5 				; V0.1: 22-05-25, Emile first version
     6 				;-------------------------------------------------------------------------------
     7
     8 				; ******************************************************************************
     9 				; Main Loop Of Command Interpreter *********************************************
    10 				; ******************************************************************************
    11 4A1C A9 D6 8D B4 49 A9 + SH_CMD_PROMPT   MWA	#CMD_FOUND CMD_ADDR  ; CMD_ADDR = CMD_FOUND
    12 4A26 20 14 4B		                JSR     PRINT_PROMPT
    13 4A29 20 37 48		                JSR  	OS_STRING_IN         ; read input string
    14 4A2C 20 40 4A				JSR     GET_CMD              ; parse string
    15 4A2F 90 06				BCC     CMD_EXTERNAL
    16 						
    17 4A31 20 3D 4A		                JSR     CMD_EXECUTE          ; execute internal command
    18 4A34 4C 1C 4A		                JMP     SH_CMD_PROMPT        ; endless loop
    19 						
    20 4A37 20 93 51		CMD_EXTERNAL    JSR     SH_RUN               ; internal command not found, load executable file from drive
    21 4A3A 4C 1C 4A		                JMP     SH_CMD_PROMPT        ; endless loop
    22 						
    23 4A3D 6C B4 49		CMD_EXECUTE     JMP     (CMD_ADDR)           ; indirect jump to internal command call back function
    24 						
    25 				; Get Command String ***********************************************************
    26 4A40 20 60 4D		GET_CMD         JSR     GET_CMD_STR          ; skip leading spaces
    27 4A43 D0 03		                BNE     GET_CMD0
    28
    29 4A45 4C D6 4A		                JMP     CMD_FOUND            ; empty command if first char is NULL
    30
    31 4A48 20 D8 4A		GET_CMD0        JSR     UPPERCASE	     ; uppercase chars only
    32 4A4B AA			                TAX
    33 4A4C A0 00		                LDY     #$00
    34 4A4E 8A			GET_CMD1        TXA                          	; try to find command in command table
    35 4A4F					CMP.EQ	CHARS,Y GET_CMD2     	; branch if equal
Macro: CMP.EQ [Source: macros.inc]
     1 4A4F D9 5F 54				CMP	CHARS,Y
     2 4A52 F0 0C				BEQ	GET_CMD2
Source: boot_sys_sh.asm
    36 4A54			                LDA.EQ  CHARS,Y SH_CMD_SET_DRV	; get [X,Y] pointer, branch if at end-of-string
Macro: LDA.EQ [Source: macros.inc]
     1 4A54 B9 5F 54				LDA	CHARS,Y
     2 4A57 F0 57				BEQ	SH_CMD_SET_DRV
Source: boot_sys_sh.asm
    37 4A59 8A			                TXA
    38 4A5A C8 C8 C8		        :3      INY			     	; Y += 3
    39 4A5D 4C 4E 4A		                JMP     GET_CMD1	     	; branch always
    40
    41 4A60 C8			GET_CMD2        INY
    42 4A61 B9 5F 54 C8 85 E8	                MVA     CHARS,Y+ STOL        	; store in pointer LSB
    43 4A67 B9 5F 54 85 E9	                MVA     CHARS,Y  STOH	     	; store in pointer MSB
    44 4A6C A0 00 8C 10 18			MVY	#$00 NEXTINDEX	     	; init. command index
    45 4A71 A6 AC		GET_CMD_LOOP1   LDX     NCNT                 	; reset string index to first command char
    46 4A73			                LDA.EQ  (STOL),Y SH_CMD_SET_DRV	; branch if command length is 0 (command not found)
Macro: LDA.EQ [Source: macros.inc]
     1 4A73 B1 E8				LDA	(STOL),Y
     2 4A75 F0 39				BEQ	SH_CMD_SET_DRV
Source: boot_sys_sh.asm
    47 4A77 18 6D 10 18 8D 10 +                 ADD:STA NEXTINDEX		; set index to start of next command
    48 4A7E E8			GET_CMD_LOOP2   INX                          	; point to next char in command string
    49 4A7F C8			                INY                          	; point to next char in command table
    50 4A80			                CPY.EQ  NEXTINDEX GET_CMD3   	; branch if y is pointing to the next command
Macro: CPY.EQ [Source: macros.inc]
     1 4A80 CC 10 18				CPY	NEXTINDEX
     2 4A83 F0 15				BEQ	GET_CMD3
Source: boot_sys_sh.asm
    51
    52 4A85 BD 00 14		                LDA     STRBUF,X             	; load char from command string
    53 4A88 20 D8 4A		                JSR     UPPERCASE	     	; and convert it to uppercase
    54 4A8B					CMP.EQ	(STOL),Y  GET_CMD_LOOP2	; compare char with char in command table and branch if equal
Macro: CMP.EQ [Source: macros.inc]
     1 4A8B D1 E8				CMP	(STOL),Y
     2 4A8D F0 EF				BEQ	GET_CMD_LOOP2
Source: boot_sys_sh.asm
    55
    56 4A8F AC 10 18		                LDY     NEXTINDEX            	; else point y to next command
    57 4A92 C8 C8		        :2      INY			     	; Y += 2
    58 4A94 8C 10 18		                STY     NEXTINDEX
    59 4A97 4C 71 4A		                JMP     GET_CMD_LOOP1	     	; branch always
    60
    61 4A9A B1 E8 8D B4 49 C8 + GET_CMD3        MWA	(STOL),Y CMD_ADDR    	; CMD_ADDR = (STOL),Y (STOL),Y+1
    62 4AA5			                LDA.EQ  STRBUF,X CMD_FOUND	; branch if STRBUF,X contains end-of-string
Macro: LDA.EQ [Source: macros.inc]
     1 4AA5 BD 00 14				LDA	STRBUF,X
     2 4AA8 F0 2C				BEQ	CMD_FOUND
Source: boot_sys_sh.asm
    63 4AAA			                CMP.EQ	#SPC     CMD_FOUND	; branch if space found
Macro: CMP.EQ [Source: macros.inc]
     1 4AAA C9 20				CMP	#SPC
     2 4AAC F0 28				BEQ	CMD_FOUND
Source: boot_sys_sh.asm
    64 4AAE 18			CMD_NOT_FOUND   CLC
    65 4AAF 60			                RTS
    66 				                
    67 				; Check If Set-Drive Command (A: .. Z:) ****************************************
    68 4AB0 A6 AC		SH_CMD_SET_DRV  LDX     NCNT                 ; get first command char
    69 4AB2 BD 00 14		                LDA     STRBUF,X
    70 4AB5 20 D8 4A		                JSR     UPPERCASE            ; convert it to upper case
    71 4AB8			                CMP.CC  #'A' CMD_NOT_FOUND   ; branch if char is not between 'A' and 'Z'
Macro: CMP.CC [Source: macros.inc]
     1 4AB8 C9 41				CMP	#'A'			; 
     2 4ABA 90 F2				BCC	CMD_NOT_FOUND			; branch if C=0 (A-b1 < 0)
Source: boot_sys_sh.asm
    72 4ABC			                CMP.CS  #'[' CMD_NOT_FOUND
Macro: CMP.CS [Source: macros.inc]
     1 4ABC C9 5B				CMP	#'['			; 
     2 4ABE B0 EE				BCS	CMD_NOT_FOUND			; branch if C=1 (A-b1 >= 0)
Source: boot_sys_sh.asm
    73
    74 4AC0 A8			                TAY
    75 4AC1 BD 01 14		                LDA     STRBUF+1,X
    76 4AC4			                CMP.NE  #':' CMD_NOT_FOUND   ; branch if second char is not a ':'
Macro: CMP.NE [Source: macros.inc]
     1 4AC4 C9 3A				CMP	#':'
     2 4AC6 D0 E6				BNE	CMD_NOT_FOUND
Source: boot_sys_sh.asm
    77 4AC8 38			                SEC
    78 4AC9 98			                TYA
    79 4ACA E9 41		                SBC     #'A'                 ; make a drive (0..25) number out of drive letter (A..Z)
    80 4ACC			                LDXYI   OS_SET_DRIVE         ; set call back function for set drive command
Macro: LDXYI [Source: macros.inc]
     1 4ACC A2 67			LDX	<OS_SET_DRIVE				; MADS makes this immediate
     2 4ACE A0 47			LDY	>OS_SET_DRIVE
Source: boot_sys_sh.asm
    81 4AD0			                STXY    CMD_ADDR
Macro: STXY [Source: macros.inc]
     1 4AD0 8E B4 49			STX	CMD_ADDR
     2 4AD3 8C B5 49			STY	CMD_ADDR+1
Source: boot_sys_sh.asm
    82 4AD6 38			CMD_FOUND       SEC
    83 4AD7 60			                RTS
    84 				                
    85 				; **** Return Uppercase Character **********************************************
    86 				; Input:  A - Character
    87 				; Output: A - Uppercase Character
    88 				; ******************************************************************************
    89 4AD8			UPPERCASE       CMP.CC  #'a'   UPPERCASE_END	; exit if A < 'a'
Macro: CMP.CC [Source: macros.inc]
     1 4AD8 C9 61				CMP	#'a'			; 
     2 4ADA 90 06				BCC	UPPERCASE_END			; branch if C=0 (A-b1 < 0)
Source: boot_sys_sh.asm
    90 4ADC			                CMP.CS  #'z'+1 UPPERCASE_END	; exit if A > 'z'
Macro: CMP.CS [Source: macros.inc]
     1 4ADC C9 7B				CMP	#'z'+1			; 
     2 4ADE B0 02				BCS	UPPERCASE_END			; branch if C=1 (A-b1 >= 0)
Source: boot_sys_sh.asm
    91 4AE0 29 DF		                AND     #$DF			; make lower-case if 'a'..'z'
    92 4AE2 60			UPPERCASE_END   RTS				; return
    93
    94 				; **** Print Two Digit Number **************************************************
    95 				; Input: A - Number (0..99)
    96 				; ******************************************************************************
    97 4AE3 20 BD E0		NUMOUT          JSR     DEC2STR			; Converts into DIG0, DIG1 and DIG2
    98 4AE6 A2 01		                LDX     #$01
    99 4AE8 B5 F8		NEXT_NUMOUT     LDA     DIG0,X			
   100 4AEA 20 52 E0		                JSR     COUT
   101 4AED					DEX.PL	NEXT_NUMOUT		; branch if not done yet
Macro: DEX.PL [Source: macros.inc]
     1 4AED CA					DEX
     2 4AEE 10 F8				BPL	NEXT_NUMOUT
Source: boot_sys_sh.asm
   102 4AF0 60			                RTS				; return
   103 				                
   104 				; **** Print Current Drive *****************************************************
   105 				;
   106 				; ******************************************************************************
   107 4AF1 AD 1E 18		PRINT_DRIVE     LDA     CURR_DRIVE	   ; 0=FDD1, 1=FDD2, @=SD/CF card
   108 4AF4 18 69 41				ADD	#'A'		   ; 'A', 'B', 'C', ...
   109 4AF7 20 52 E0		                JSR     COUT		   ; print char
   110 4AFA A9 3A		                LDA     #COLON		   ; ':'
   111 4AFC 4C 52 E0		                JMP     COUT		   ; print char and return
   112 				                
   113 				; **** Print Current Path ******************************************************
   114 				;
   115 				; ******************************************************************************
   116 4AFF A2 00 86 D8		PRINT_PATH      MVX	#0 SAVEX		; SAVEX = 0
   117 4B03 A6 D8		PR_PATH_LP	LDX	SAVEX
   118 4B05 BD 20 04				LDA     D_SUBDIR_NAME,X		; 
   119 4B08 48					PHA
   120 4B09 20 52 E0		                JSR     COUT		    	; print char
   121 4B0C 68					PLA
   122 4B0D F0 04				BEQ	PR_PATH_DN		; End-of-String?
   123 						
   124 4B0F					INC.NE	SAVEX PR_PATH_LP	; Get next char, branch if not done yet
Macro: INC.NE [Source: macros.inc]
     1 4B0F E6 D8				INC	SAVEX
     2 4B11 D0 F0				BNE	PR_PATH_LP
Source: boot_sys_sh.asm
   125 4B13 60			PR_PATH_DN      RTS				; return
   126
   127 				; **** Print Drive and Path Prompt *********************************************
   128 				;
   129 				; ******************************************************************************
   130 4B14 20 5A E0		PRINT_PROMPT    JSR     CROUT		   ; CR
   131 4B17 20 F1 4A		                JSR     PRINT_DRIVE	   ; e.g. 'C:'
   132 4B1A 20 FF 4A		                JSR     PRINT_PATH	   ; '\'
   133 4B1D A9 3E		                LDA     #PROMPT		   ; '>'
   134 4B1F 4C 52 E0		                JMP     COUT		   ; print char and return
   135 				                
   136 				; **** Print Drive Label *******************************************************
   137 				;
   138 				; ******************************************************************************
   139 4B22 48			PRINT_LABEL     PHA			   ; save A
   140 4B23			                PHY			   ; save Y
Macro: PHY [Source: macros.inc]
     1 4B23 98				TYA
     2 4B24 48				PHA
Source: boot_sys_sh.asm
   141 4B25			                PRSTR   MSG_LABEL	   ; 'Volume in drive '
Macro: PRSTR [Source: macros.inc]
     1 4B25 A2 51			LDX	<MSG_LABEL				; MADS makes this immediate
     2 4B27 A0 53			LDY	>MSG_LABEL
Source: boot_sys_sh.asm
     2 4B29 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   142 4B2C 20 F1 4A		                JSR     PRINT_DRIVE	   ; e.g. 'C'
   143 4B2F			                PRSTR   MSG_LABEL2	   ; ' is '
Macro: PRSTR [Source: macros.inc]
     1 4B2F A2 62			LDX	<MSG_LABEL2				; MADS makes this immediate
     2 4B31 A0 53			LDY	>MSG_LABEL2
Source: boot_sys_sh.asm
     2 4B33 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   144 4B36 20 4C 4B		                JSR     PRINT_FILENAME1    ; print volume-label
   145 4B39 20 5A E0		                JSR     CROUT		   ; CR 2x
   146 4B3C 20 5A E0		                JSR     CROUT
   147 4B3F					PLY			   ; restore Y
Macro: PLY [Source: macros.inc]
     1 4B3F 68				PLA
     2 4B40 A8				TAY
Source: boot_sys_sh.asm
   148 4B41 68			                PLA			   ; restore A
   149 4B42 60			                RTS
   150 				                
   151 				; **** Print Filename **********************************************************
   152 				;
   153 				; ******************************************************************************
   154 4B43 A2 2E		PRINT_FILENAME  LDX     #DOT					; Check if directory
   155 4B45					AND.EQ	F_ATTRIBS #FA_DIRECTORY PRINT_FILENAME2	; branch if F_ATTRIBS & FA_DIRECTORY = 0  (not a dir.)
Macro: AND.EQ [Source: macros.inc]
     2 4B45 AD 12 18				LDA	F_ATTRIBS
     3 4B48 29 10				AND	#FA_DIRECTORY
     4 4B4A F0 02				BEQ	PRINT_FILENAME2
Source: boot_sys_sh.asm
   156 4B4C A2 20		PRINT_FILENAME1 LDX     #SPC                			; yes, set divider to ' '
   157 4B4E A0 00		PRINT_FILENAME2 LDY     #$00
   158 4B50			PRINT_FILENAME3 CPY.NE  #$08 PRINT_NEXT_CHAR			; branch if not at start of file extension
Macro: CPY.NE [Source: macros.inc]
     1 4B50 C0 08				CPY	#$08
     2 4B52 D0 07				BNE	PRINT_NEXT_CHAR
Source: boot_sys_sh.asm
   159 4B54 20 5E E0		                JSR     SPCOUT		    		; print space
   160 4B57 8A			                TXA
   161 4B58 20 52 E0		                JSR     COUT                		; yes, print divider char
   162 4B5B B1 A8		PRINT_NEXT_CHAR LDA     (CURR_DIR_ENTRY),Y  		; load next character
   163 4B5D 20 52 E0		                JSR     COUT                		; print character (does not affect Y)
   164 4B60 C8			                INY
   165 4B61			                CPY.NE  #D_ATTRIBUTES PRINT_FILENAME3	; repeat if not all characters printed
Macro: CPY.NE [Source: macros.inc]
     1 4B61 C0 0B				CPY	#D_ATTRIBUTES
     2 4B63 D0 EB				BNE	PRINT_FILENAME3
Source: boot_sys_sh.asm
   166 4B65 60			                RTS			    		; return
   167 				                
   168 				; **** Print File Info *********************************************************
   169 				; Input: F_ATTRIBS = File Attributes
   170 				; ******************************************************************************
   171 4B66			PRINT_FILE_INFO AND.EQ	F_ATTRIBS #FA_DIRECTORY PRINT_SIZE	; branch if F_ATTRIBS & FA_DIRECTORY = 0 (not a dir.)
Macro: AND.EQ [Source: macros.inc]
     2 4B66 AD 12 18				LDA	F_ATTRIBS
     3 4B69 29 10				AND	#FA_DIRECTORY
     4 4B6B F0 12				BEQ	PRINT_SIZE
Source: boot_sys_sh.asm
   172 				                
   173 				; Print Directory Attribute ****************************************************
   174 4B6D			                PRSTR   MSG_DIR_ENTRY	    ; print <DIR>
Macro: PRSTR [Source: macros.inc]
     1 4B6D A2 67			LDX	<MSG_DIR_ENTRY				; MADS makes this immediate
     2 4B6F A0 53			LDY	>MSG_DIR_ENTRY
Source: boot_sys_sh.asm
     2 4B71 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   175 4B74 EE 17 18 D0 03 EE + 		INW	CURR_DIR_CNT	    ; increment total dir count
   176 4B7C 4C A9 4B				JMP     PRINT_ATTRIB
   177
   178 				; Print File Size **************************************************************
   179 4B7F 20 5E E0		PRINT_SIZE      JSR     SPCOUT
   180 4B82 20 5E E0		                JSR     SPCOUT
   181 4B85 EE 15 18 D0 03 EE +                 INW  	CURR_FILE_CNT       ; increment total file count (word)
   182 4B8D A2 00		NO_FCNT_CARRY   LDX     #$00
   183 4B8F A0 1C		                LDY     #D_FILE_SIZE        ; index to file size
   184 4B91 18			                CLC
   185 4B92 08			                PHP
   186 4B93 28			LOAD_SIZE       PLP
   187 4B94 B1 A8 95 C0		                MVA     (CURR_DIR_ENTRY),Y NUM32,X	; load file size into NUM32
   188 4B98 7D 19 18 9D 19 18	                ADC:STA CURR_USED_SIZE,X    		; add file size to total file size
   189 4B9E 08			                PHP
   190 4B9F C8			                INY
   191 4BA0 E8			                INX
   192 4BA1					CPX.NE	#$04 LOAD_SIZE			; branch if not done yet
Macro: CPX.NE [Source: macros.inc]
     1 4BA1 E0 04				CPX	#$04
     2 4BA3 D0 EE				BNE	LOAD_SIZE
Source: boot_sys_sh.asm
   193 4BA5 28			                PLP
   194 4BA6 20 A1 4C		                JSR     PRINT_INT32         		; print file size
   195 				                
   196 				; Print File Attributes ********************************************************
   197 4BA9 20 5E E0		PRINT_ATTRIB    JSR     SPCOUT
   198 4BAC					BTST	CURR_CMD_PARAM 1 PRINT_DATE	; skip printing attributes is /A param is set
Macro: BTST [Source: macros.inc]
     4 4BAC AD 1F 18				LDA	CURR_CMD_PARAM
     5 4BAF 29 02				AND	#(1 << 1)
     6 4BB1 F0 17				BEQ	PRINT_DATE
Source: boot_sys_sh.asm
   199 4BB3 A2 07		                LDX     #$07
   200 4BB5 0E 12 18		GET_ATTRIB      ASL     F_ATTRIBS           		; move attribute bit into carry
   201 4BB8			                LDA.EQ  ATTRIB_VAL,X NEXT_ATTRIB	; branch if attribute is not printable
Macro: LDA.EQ [Source: macros.inc]
     1 4BB8 BD 33 54				LDA	ATTRIB_VAL,X
     2 4BBB F0 07				BEQ	NEXT_ATTRIB
Source: boot_sys_sh.asm
   202 4BBD B0 02		                BCS     SET_ATTRIB			; branch if printable
   203
   204 4BBF A9 2D		CLEAR_ATTRIB    LDA     #'-'                		; attribute not set, print -
   205 4BC1 20 52 E0		SET_ATTRIB      JSR     COUT                		; print attribute
   206 4BC4			NEXT_ATTRIB     DEX.PL	GET_ATTRIB          		; repeat until all attributes printed
Macro: DEX.PL [Source: macros.inc]
     1 4BC4 CA					DEX
     2 4BC5 10 EE				BPL	GET_ATTRIB
Source: boot_sys_sh.asm
   207 4BC7 20 5E E0		                JSR     SPCOUT
   208 				                
   209 				; Print Date *******************************************************************
   210 				; Date Format: 15-09 Years from 1980 (0-127 -> 1980-2107)
   211 				;              08-05 Month of year (1-12)
   212 				;              04-00 Day of month (1-32)
   213 				; ******************************************************************************
   214 4BCA A0 18		PRINT_DATE      LDY     #D_LAST_WR_DATE     		; index to file last write date
   215 4BCC B1 A8 8D 98 4C	                MVA     (CURR_DIR_ENTRY),Y MONTH	; load file creation date low byte
   216 4BD1 29 1F		                AND     #$1F                		; mask day value
   217 4BD3 8D 99 4C		                STA     DAY
   218 4BD6 C8			                INY
   219 4BD7 B1 A8		                LDA     (CURR_DIR_ENTRY),Y  ; load file creation date high byte
   220 4BD9 4A			                LSR                         ; year in A
   221 4BDA 6E 98 4C		                ROR     MONTH
   222 4BDD 4E 98 4C 4E 98 4C +         :4      LSR     MONTH		    ; LSR 4
   223 4BE9 18 69 50				ADD	#80		    ; same as CLC + ADC, year correction value (add 1980)
   224 4BEC 8D 97 4C		                STA     YEAR
   225 4BEF AD 99 4C		                LDA     DAY
   226 4BF2 20 E3 4A		                JSR     NUMOUT
   227 4BF5			                PRCH    '.'
Macro: PRCH [Source: macros.inc]
     1 4BF5 A9 2E			LDA	#'.'
     2 4BF7 20 52 E0			JSR	COUT
Source: boot_sys_sh.asm
   228 4BFA AD 98 4C		                LDA     MONTH
   229 4BFD 20 E3 4A		                JSR     NUMOUT
   230 4C00			                PRCH    '.'
Macro: PRCH [Source: macros.inc]
     1 4C00 A9 2E			LDA	#'.'
     2 4C02 20 52 E0			JSR	COUT
Source: boot_sys_sh.asm
   231 4C05 AC 97 4C		                LDY     YEAR
   232 4C08			                CPY.CC  #100 CENTURY_19	    ; branch if < 100
Macro: CPY.CC [Source: macros.inc]
     1 4C08 C0 64				CPY	#100			; 
     2 4C0A 90 0C				BCC	CENTURY_19			; branch if C=0 (Y-b1 < 0)
Source: boot_sys_sh.asm
   233
   234 4C0C A9 14		                LDA     #20
   235 4C0E 20 E3 4A		                JSR     NUMOUT
   236 4C11 98			                TYA
   237 4C12 38 E9 64				SUB	#100		    ; same as SEC + SBC
   238 4C15 4C 1E 4C		                JMP     PRINT_YEAR
   239
   240 4C18 A9 13		CENTURY_19      LDA     #19
   241 4C1A 20 E3 4A		                JSR     NUMOUT
   242 4C1D 98			                TYA
   243 4C1E 20 E3 4A		PRINT_YEAR      JSR     NUMOUT
   244 4C21 20 5E E0		                JSR     SPCOUT
   245 				                
   246 				; Print Time *******************************************************************
   247 				; Time Format: 15-11 Hours (0-23)
   248 				;              10-05 Minutes (0-59)
   249 				;              04-00 Seconds (0-29), 2-second intervals, so 29 gives 58 seconds.
   250 				; ******************************************************************************
   251 4C24 A0 16		PRINT_TIME      LDY     #D_LAST_WR_TIME     		; index to file Last write time
   252 4C26 B1 A8 8D 9A 4C	                MVA     (CURR_DIR_ENTRY),Y MINUTE	; load file last write time low byte
   253 4C2B C8			                INY
   254 4C2C B1 A8		                LDA     (CURR_DIR_ENTRY),Y  		; load file last write time high byte
   255 				        .rept 3
   256 						LSR     
   257 				                ROR     MINUTE
   258 					.endr	
Source: REPT
   256 4C2E 4A					LSR     
   256 4C2F 6E 9A 4C		                ROR     MINUTE
   256 4C32 4A					LSR     
   256 4C33 6E 9A 4C		                ROR     MINUTE
   256 4C36 4A					LSR     
   256 4C37 6E 9A 4C		                ROR     MINUTE
Source: boot_sys_sh.asm
   259 4C3A 4E 9A 4C 4E 9A 4C	        :2      LSR     MINUTE
   260 4C40 20 E3 4A		                JSR     NUMOUT
   261 4C43			                PRCH     ':'		    ; Print :
Macro: PRCH [Source: macros.inc]
     1 4C43 A9 3A			LDA	#':'
     2 4C45 20 52 E0			JSR	COUT
Source: boot_sys_sh.asm
   262 4C48 AD 9A 4C		                LDA     MINUTE
   263 4C4B 20 E3 4A		                JSR     NUMOUT		    ; print minutes
   264
   265 				; Print Cluster Number *********************************************************
   266 				; Only with /C parameter: Prints Cluster number AND LBA number
   267 				; ******************************************************************************
   268 4C4E					BTST	CURR_CMD_PARAM 3 PRINT_EXIT		; Skip printing cluster nr if /C parameter is set
Macro: BTST [Source: macros.inc]
     4 4C4E AD 1F 18				LDA	CURR_CMD_PARAM
     5 4C51 29 08				AND	#(1 << 3)
     6 4C53 F0 41				BEQ	PRINT_EXIT
Source: boot_sys_sh.asm
   269 4C55 20 5E E0		                JSR	SPCOUT		    			; Print space
   270 4C58					PRCLW	D_START_CLSTH CURR_DIR_ENTRY NUM32+2	; Print cluster nr (32-bit) and save it in NUM32
Macro: PRCLW [Source: macros.inc]
     1 4C58 A0 15				LDY	#D_START_CLSTH+1		; Print MSB of word
     1 4C5A B1 A8				LDA	(CURR_DIR_ENTRY),Y
     3 4C5C 85 C3				STA	NUM32+2+1
     5 4C5E 20 91 E0				JSR	HEXOUT			; changes Y!
Source: boot_sys_sh.asm
     7 4C61 A0 14				LDY	#D_START_CLSTH			; Print LSB of word
     1 4C63 B1 A8				LDA	(CURR_DIR_ENTRY),Y
     3 4C65 85 C2				STA	NUM32+2
     5 4C67 20 91 E0				JSR	HEXOUT			; changes Y!
Source: boot_sys_sh.asm
Source: boot_sys_sh.asm
   271 4C6A					PRCLW	D_START_CLST  CURR_DIR_ENTRY NUM32
Macro: PRCLW [Source: macros.inc]
     1 4C6A A0 1B				LDY	#D_START_CLST+1		; Print MSB of word
     1 4C6C B1 A8				LDA	(CURR_DIR_ENTRY),Y
     3 4C6E 85 C1				STA	NUM32+1
     5 4C70 20 91 E0				JSR	HEXOUT			; changes Y!
Source: boot_sys_sh.asm
     7 4C73 A0 1A				LDY	#D_START_CLST			; Print LSB of word
     1 4C75 B1 A8				LDA	(CURR_DIR_ENTRY),Y
     3 4C77 85 C0				STA	NUM32
     5 4C79 20 91 E0				JSR	HEXOUT			; changes Y!
Source: boot_sys_sh.asm
Source: boot_sys_sh.asm
   272 4C7C 20 5E E0				JSR	SPCOUT
   273 4C7F 20 FF 40				JSR	CLSTR_TO_LBA	   			; Convert NUM32 Cluster nr into NUM32 LBA
   274 4C82					PRHEX32	NUM32			        	; and print as 32-bit hex number
Macro: PRHEX32 [Source: macros.inc]
     1 4C82 A5 C3			LDA	NUM32+2+1				; print MSB
     2 4C84 20 91 E0			JSR	HEXOUT
     3 4C87 A5 C2			LDA	NUM32+2
     4 4C89 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_sh.asm
     1 4C8C A5 C1			LDA	NUM32+1				; print MSB
     2 4C8E 20 91 E0			JSR	HEXOUT
     3 4C91 A5 C0			LDA	NUM32
     4 4C93 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_sh.asm
Source: boot_sys_sh.asm
   275 4C96 60			PRINT_EXIT	RTS
   276
   277 4C97 00			YEAR		.byte 	$00
   278 4C98 00			MONTH		.byte 	$00
   279 4C99 00			DAY 		.byte	$00
   280 4C9A 00			MINUTE		.byte 	$00
   281 				                
   282 				; **** Print 16 Bit Number *****************************************************
   283 				; Input: X,Y = Int16
   284 				; ******************************************************************************
   285 4C9B 20 0F 4D		PRINT_INT16     JSR     BIN16_TO_BCD
   286 4C9E 4C A4 4C		                JMP     PRINT_NUM
   287 				                
   288 				; **** Print 32 Bit Number *****************************************************
   289 				; Input: NUM32[0..3] = Int32
   290 				; Output: C = 0 - Number is 0; C = 1 - Number <> 0
   291 				; ******************************************************************************
   292 4CA1 20 19 4D		PRINT_INT32     JSR     BIN32_TO_BCD        ; convert NUM32 into BCD
   293 4CA4 A2 00		PRINT_NUM       LDX     #$00
   294 4CA6 A0 0A		                LDY     #10
   295 4CA8 18			                CLC                         ; save status bits
   296 4CA9 08			PRINT_NUM1      PHP                         ; store current carry flag
   297 4CAA 20 E0 4C		                JSR     PRINT_SEPARATOR
   298 4CAD BD 3B 54		                LDA     BCD_VAL,X           ; load two decimal digits
   299 4CB0 48			                PHA                         ; store A
   300 4CB1 98			                TYA                         ; move digit counter into A
   301 4CB2 4A			                LSR                         ; bit one into carry
   302 4CB3 68			                PLA                         ; restore A
   303 4CB4 90 05		                BCC     SET_DIGIT1          ; is it a even digit?
   304 						
   305 4CB6 E8			                INX                         ; no, process digit 2
   306 4CB7 29 0F		                AND     #$0F
   307 4CB9 10 04		                BPL     SET_DIGIT2
   308 4CBB 4A 4A 4A 4A		SET_DIGIT1 :4   LSR                         ; LSR4, shift upper digit of BCD into lower nibble
   309 4CBF 28			SET_DIGIT2      PLP
   310 4CC0 B0 16		                BCS     PRINT_DIGIT         ; check if we processed at least one digit <> 0
   311 						
   312 4CC2			                AND.NE  #$0F PRINT_DIGIT    ; branch if not a leading 0, print digit
Macro: AND.NE [Source: macros.inc]
     6 4CC2 29 0F				AND	#$0F
     7 4CC4 D0 12				BNE	PRINT_DIGIT
Source: boot_sys_sh.asm
   313 4CC6 98			                TYA
   314 4CC7			                CMP.NE  #1 PRINT_SPACE      ; is it the last digit? Branch if not, just print space char
Macro: CMP.NE [Source: macros.inc]
     1 4CC7 C9 01				CMP	#1
     2 4CC9 D0 07				BNE	PRINT_SPACE
Source: boot_sys_sh.asm
   315 4CCB A9 30		                LDA     #48                 ; yes, print 0
   316 4CCD 20 9A E0		                JSR     HEXDIG
   317 4CD0 18			                CLC                         ; number is 0
   318 4CD1 60			                RTS
   319 						
   320 4CD2 20 5E E0		PRINT_SPACE     JSR     SPCOUT              ; print space
   321 4CD5 18			                CLC
   322 4CD6 90 04		                BCC     NEXT_DIGIT	    ; branch always
   323 						
   324 4CD8 20 9A E0		PRINT_DIGIT     JSR     HEXDIG              ; print single digit
   325 4CDB 38			                SEC                         ; no more leading 0s
   326 4CDC			NEXT_DIGIT      DEY.NE	PRINT_NUM1          ; repeat if more digits
Macro: DEY.NE [Source: macros.inc]
     1 4CDC 88					DEY
     2 4CDD D0 CA				BNE	PRINT_NUM1
Source: boot_sys_sh.asm
   327 4CDF 60			                RTS
   328 				                
   329 				; Print Thousands Separator ****************************************************
   330 4CE0 08			PRINT_SEPARATOR PHP                         ; save status bits
   331 4CE1			                CPY.EQ  #$09 PRINT_SEP      ; branch if at 9th digit, print separator
Macro: CPY.EQ [Source: macros.inc]
     1 4CE1 C0 09				CPY	#$09
     2 4CE3 F0 08				BEQ	PRINT_SEP
Source: boot_sys_sh.asm
   332 4CE5			                CPY.EQ  #$06 PRINT_SEP      ; branch if at 6th digit, print separator
Macro: CPY.EQ [Source: macros.inc]
     1 4CE5 C0 06				CPY	#$06
     2 4CE7 F0 04				BEQ	PRINT_SEP
Source: boot_sys_sh.asm
   333 4CE9			                CPY.NE  #$03 NO_SEP         ; branch if not at 3rd digit, exit
Macro: CPY.NE [Source: macros.inc]
     1 4CE9 C0 03				CPY	#$03
     2 4CEB D0 0B				BNE	NO_SEP
Source: boot_sys_sh.asm
   334 						
   335 4CED 28			PRINT_SEP       PLP                         ; restore status bits
   336 4CEE 90 05		                BCC     PRINT_SPC           ; leading zero, just print a space char
   337 						
   338 4CF0 A9 2E		                LDA     #NUM_SEP
   339 4CF2 4C 52 E0		                JMP     COUT                ; print thousands seperator
   340 						
   341 4CF5 4C 5E E0		PRINT_SPC       JMP     SPCOUT
   342 4CF8 28			NO_SEP          PLP                         ; clean up stack
   343 4CF9 60			                RTS
   344 				                
   345 				;**** Convert BCD Number To 8 Bit Binary ***************************************
   346 				; INPUT:  A = BCD Number
   347 				; Output: A = Binary Number
   348 				; ******************************************************************************
   349 4CFA 85 C0		BCD_TO_BIN      STA     NUM32               ; save BCD number
   350 4CFC 29 F0		                AND     #$F0                ; and clear ones digit in A
   351 4CFE 4A			                LSR                         ; calc tens digit * 8
   352 4CFF 85 C1		                STA     NUM32+1             ; and store result
   353 4D01 4A 4A		        :2      LSR     		    ; calc tens digit * 2
   354 4D03 18 65 C1 85 C1			ADD:STA	NUM32+1		    ; add it with tens digit * 8 and store result
   355 4D08 A5 C0		                LDA     NUM32               ; reload BCD number int A
   356 4D0A 29 0F		                AND     #$0F                ; and clear tens digit in A
   357 4D0C 65 C1		                ADC     NUM32+1             ; finally add both result
   358 4D0E 60			                RTS			    ; return
   359 				                
   360 				;**** Convert 16 Bit Binary Number To BCD **************************************
   361 				; INPUT:  Int[X:Y]      = 16 Bit Binary
   362 				; OUTPUT: BCD_VAL[4..0] = Result
   363 				; ******************************************************************************
   364 4D0F			BIN16_TO_BCD    STXY	NUM32		    ; Store [X:Y] in lower word
Macro: STXY [Source: macros.inc]
     1 4D0F 86 C0			STX	NUM32
     2 4D11 84 C1			STY	NUM32+1
Source: boot_sys_sh.asm
   365 4D13 A2 00 86 C2 86 C3			MWX	#$00 NUM32+2	    ; clear upper word
   366 				                
   367 				;**** Convert 32 Bit Binary Number To BCD **************************************
   368 				; INPUT:  NUM32[0..3]   = 32 Bit Binary
   369 				; OUTPUT: BCD_VAL[4..0] = Result
   370 				;*******************************************************************************
   371 4D19 F8			BIN32_TO_BCD    SED                         ; set decimal mode
   372 4D1A A2 04		                LDX     #$04
   373 4D1C A9 00		                LDA     #$00                ; clear BCD result value
   374 4D1E 9D 3B 54 CA		CLEAR_BCD       STA     BCD_VAL,X-
   375 4D22 10 FA		                BPL     CLEAR_BCD
   376
   377 4D24 A2 20		                LDX     #$20                ; 32 source bits
   378 4D26			CONV_BITS       ASL32	NUM32		    ; shift MSB of NUM32 into carry flag
Macro: ASL32 [Source: macros.inc]
     1 4D26 06 C0			ASL     NUM32		  		; SHL with C=0
     2 4D28 26 C1		        ROL     NUM32+1		  
     3 4D2A 26 C2		        ROL     NUM32+2
     4 4D2C 26 C3		        ROL     NUM32+3		  
Source: boot_sys_sh.asm
   379 4D2E AD 3F 54 6D 3F 54 + 		LDA:ADC:STA BCD_VAL+4	    ; and shift carry back into BCD result
   380 4D37 AD 3E 54 6D 3E 54 + 		LDA:ADC:STA BCD_VAL+3	    ; by adding BCD_VAL = BCD_VAL + BCD_VAL + C
   381 4D40 AD 3D 54 6D 3D 54 + 		LDA:ADC:STA BCD_VAL+2	    ; ...
   382 4D49 AD 3C 54 6D 3C 54 + 		LDA:ADC:STA BCD_VAL+1	    ; ...
   383 4D52 AD 3B 54 6D 3B 54 + 		LDA:ADC:STA BCD_VAL	    ; uses more code, but faster than looping
   384 4D5B			                DEX.NE	CONV_BITS           ; repeat until all 32 bits done
Macro: DEX.NE [Source: macros.inc]
     1 4D5B CA					DEX
     2 4D5C D0 C8				BNE	CONV_BITS
Source: boot_sys_sh.asm
   385 4D5E D8			                CLD                         ; reset to binary mode
   386 4D5F 60			                RTS
   387
   388 				; **** Get Command String ******************************************************
   389 				;
   390 				; ******************************************************************************
   391 4D60 A2 01		GET_CMD_STR     LDX     #$01
   392 4D62			GET_CMD_CHAR    LDA.EQ  STRBUF,X END_PARAM	; get char, branch if end-of-string
Macro: LDA.EQ [Source: macros.inc]
     1 4D62 BD 00 14				LDA	STRBUF,X
     2 4D65 F0 2D				BEQ	END_PARAM
Source: boot_sys_sh.asm
   393 4D67			                CMP.NE	#SPC     END_PARAM	; branch if not a space
Macro: CMP.NE [Source: macros.inc]
     1 4D67 C9 20				CMP	#SPC
     2 4D69 D0 29				BNE	END_PARAM
Source: boot_sys_sh.asm
   394 4D6B E8			SKIP_SPC_CHAR   INX
   395 4D6C 4C 62 4D		                JMP     GET_CMD_CHAR
   396 				                
   397 				; **** Get Parameter String ****************************************************
   398 				; Output: C = 1: Parameter; C = 0: Path
   399 				;         A    = $00 : End of parameter string
   400 				;         NCNT = Index to parameter
   401 				; ******************************************************************************
   402 4D6F A6 AC		GET_NEXT_PARAM  LDX     NCNT                ; get actual index into command line
   403 4D71 20 7F 4D		                JSR     GET_PARM_CHAR
   404 4D74					CMP.NE	#OPT_SEP PATH_STR   ; branch if not a '/'
Macro: CMP.NE [Source: macros.inc]
     1 4D74 C9 2F				CMP	#OPT_SEP
     2 4D76 D0 18				BNE	PATH_STR
Source: boot_sys_sh.asm
   405 4D78 E8			                INX			    ; next char
   406 4D79 BD 00 14		                LDA     STRBUF,X	    ; load parameter
   407 4D7C 4C 93 4D		                JMP     PARAM_STR	    ; OK and return
   408
   409 4D7F			GET_PARM_CHAR   LDA.EQ  STRBUF,X PATH_STR   	; get char, branch if end-of-string
Macro: LDA.EQ [Source: macros.inc]
     1 4D7F BD 00 14				LDA	STRBUF,X
     2 4D82 F0 0C				BEQ	PATH_STR
Source: boot_sys_sh.asm
   410 4D84					CMP.EQ	#SPC     SKIP_SPC_CHAR	; branch if a space
Macro: CMP.EQ [Source: macros.inc]
     1 4D84 C9 20				CMP	#SPC
     2 4D86 F0 E3				BEQ	SKIP_SPC_CHAR
Source: boot_sys_sh.asm
   411 4D88					CMP.EQ	#OPT_SEP PARAM_STR	; branch if a '/'
Macro: CMP.EQ [Source: macros.inc]
     1 4D88 C9 2F				CMP	#OPT_SEP
     2 4D8A F0 07				BEQ	PARAM_STR
Source: boot_sys_sh.asm
   412 4D8C E8			                INX			    
   413 4D8D 4C 7F 4D		                JMP     GET_PARM_CHAR
   414
   415 4D90 18			PATH_STR        CLC			    ; C=0, it is a path
   416 4D91 90 01		                BCC     END_PARAM	    ; branch always
   417
   418 4D93 38			PARAM_STR       SEC			    ; C=1, it is a parameter
   419 4D94 86 AC		END_PARAM       STX     NCNT		    ; save index in parameter string
   420 4D96 48			                PHA
   421 4D97 68			                PLA
   422 4D98 60			                RTS			    ; return
   423
   424 				; **** Internal Command Handlers ***********************************************
   425
   426 				; **** Directory Loop Call Back Functions **************************************
   427 				; Input : A - First character of filename
   428 				;         X - File Attributes
   429 				; Output: C = 0 - Continue print loop, C = 1 - Break print loop
   430 				; ******************************************************************************
   431
   432 				; **** Print Directory Entry - Call Back Routine *******************************
   433 4D99			CB_PRINT_DIR    CPX.EQ  #$0F CB_PRINT_CONT		; skip to next entry if long filename entry
Macro: CPX.EQ [Source: macros.inc]
     1 4D99 E0 0F				CPX	#$0F
     2 4D9B F0 5C				BEQ	CB_PRINT_CONT
Source: boot_sys_sh.asm
   434 4D9D					CMP.EQ  #$E5 CB_PRINT_CONT  		; branch (skip to next entry) if entry is deleted
Macro: CMP.EQ [Source: macros.inc]
     1 4D9D C9 E5				CMP	#$E5
     2 4D9F F0 58				BEQ	CB_PRINT_CONT
Source: boot_sys_sh.asm
   435 4DA1 8E 12 18		                STX     F_ATTRIBS           		; save attributes
   436 4DA4 8A			                TXA
   437 4DA5 4A			                LSR     
   438 4DA6 4A			CHK_HIDDEN      LSR                         		; check if hidden file
   439 4DA7 90 07		                BCC     CHK_SYSTEM	    		; branch if not a hidden file
   440
   441 4DA9			                BTST	CURR_CMD_PARAM 2 CB_PRINT_CONT	; Skip line counting if dir /H (display hidden files) is set
Macro: BTST [Source: macros.inc]
     4 4DA9 AD 1F 18				LDA	CURR_CMD_PARAM
     5 4DAC 29 04				AND	#(1 << 2)
     6 4DAE F0 49				BEQ	CB_PRINT_CONT
Source: boot_sys_sh.asm
   442 4DB0 4A			CHK_SYSTEM      LSR                         		; check if system file
   443 4DB1 4A			CHK_LABEL       LSR                         		; check if disk label
   444 				                ; #### PRINT LABEL DISABLED ####################################
   445 4DB2 B0 45		                BCS     CB_PRINT_CONT       		; it's a label, skip to next entry
   446
   447 				                ;BCC     PRINT_DIR_ENTRY
   448 				                ;JSR     PRINT_LABEL         		; print disk label
   449 				                ;INC     LINE_CNT
   450 				                ;BNE     CHK_LINE_COUNT     		 ; branch always
   451 				                ; ##############################################################
   452 4DB4			PRINT_DIR_ENTRY LDA.NE  TERM_CHAR COMP_MASK		; check the termination char, if >0 then just compare file names
Macro: LDA.NE [Source: macros.inc]
     1 4DB4 AD 11 18				LDA	TERM_CHAR
     2 4DB7 D0 0F				BNE	COMP_MASK
Source: boot_sys_sh.asm
   453 4DB9 20 4D 49		                JSR     CB_FIND_SUBDIR      		; TC = 0, so check if directory entry
   454 4DBC 90 3B		                BCC     CB_PRINT_CONT       		; name is a file entry or includes wildcard chars, just exit
   455
   456 4DBE A9 5C 8D 11 18	                MVA     #PATH_SEP TERM_CHAR 		; TERM_CHAR = name compared equal with a directory entry
   457 4DC3 20 FD 46		                JSR     OS_DIR_LOOP         		; list files of sub directory
   458 4DC6 38			                SEC                         		; directory list finished
   459 4DC7 60			                RTS                         		; exit
   460
   461 4DC8 20 FB 4D		COMP_MASK       JSR     SH_COMP_MASK
   462 4DCB 90 2D		                BCC     CB_PRINT_END
   463
   464 4DCD A9 01 85 EE		PRINT_ITEM      MVA     #1 PSAV		    		; set file found flag
   465 4DD1 20 43 4B		                JSR     PRINT_FILENAME      		; print filename
   466 4DD4 20 66 4B		                JSR     PRINT_FILE_INFO     		; print file size, date and time
   467 4DD7 20 5A E0		                JSR     CROUT
   468 4DDA			                BTST    CURR_CMD_PARAM 0 CB_PRINT_CONT	; Skip line counting if dir /P parameter is set
Macro: BTST [Source: macros.inc]
     4 4DDA AD 1F 18				LDA	CURR_CMD_PARAM
     5 4DDD 29 01				AND	#(1 << 0)
     6 4DDF F0 18				BEQ	CB_PRINT_CONT
Source: boot_sys_sh.asm
   469 4DE1 EE 14 18		CHK_LINE_COUNT  INC     LINE_CNT
   470 4DE4 A9 19		                LDA     #25
   471 4DE6					CMP.CS	LINE_CNT CB_PRINT_CONT		; reached one screen page? Branch if not, just exit
Macro: CMP.CS [Source: macros.inc]
     1 4DE6 CD 14 18				CMP	LINE_CNT			; 
     2 4DE9 B0 0E				BCS	CB_PRINT_CONT			; branch if C=1 (A-b1 >= 0)
Source: boot_sys_sh.asm
   472 4DEB A9 00 8D 14 18	                MVA     #$00 LINE_CNT       		; reset line counter
   473 4DF0 20 3D 51		                JSR     SH_PAUSE            		; wait for key press
   474 4DF3			                CMP.NE	#27 CB_PRINT_CONT   		; ESC pressed? Branch if not
Macro: CMP.NE [Source: macros.inc]
     1 4DF3 C9 1B				CMP	#27
     2 4DF5 D0 02				BNE	CB_PRINT_CONT
Source: boot_sys_sh.asm
   475 4DF7 38			                SEC                         		; break dir loop
   476 4DF8 60			                RTS
   477 4DF9 18			CB_PRINT_CONT   CLC                         		; get next next entry
   478 4DFA 60			CB_PRINT_END    RTS
   479
   480 				; **** Compare File Name With Mask Using Wildcards *****************************
   481 				;
   482 				; ******************************************************************************
   483 4DFB			SH_COMP_MASK    CMP.EQ	#PATH_SEP COMP_NAME_EQU			; Termination char = path separator? Branch if it is, skip compare
Macro: CMP.EQ [Source: macros.inc]
     1 4DFB C9 5C				CMP	#PATH_SEP
     2 4DFD F0 10				BEQ	COMP_NAME_EQU
Source: boot_sys_sh.asm
   484 4DFF A0 0A		                LDY     #10                 			; compare all characters
   485 4E01 B9 10 4A		COMP_NAME_CHAR  LDA     FILENAME,Y          			; get char from compare mask
   486 4E04					CMP.EQ	#'?' SKIP_NAME_CHAR			; Skip comparing with a '?' char
Macro: CMP.EQ [Source: macros.inc]
     1 4E04 C9 3F				CMP	#'?'
     2 4E06 F0 04				BEQ	SKIP_NAME_CHAR
Source: boot_sys_sh.asm
   487 4E08					CMP.NE	(CURR_DIR_ENTRY),Y COMP_NAME_NEQ	; Compare char, if not equal, exit with C=0
Macro: CMP.NE [Source: macros.inc]
     1 4E08 D1 A8				CMP	(CURR_DIR_ENTRY),Y
     2 4E0A D0 05				BNE	COMP_NAME_NEQ
Source: boot_sys_sh.asm
   488 						
   489 4E0C			SKIP_NAME_CHAR  DEY.PL	COMP_NAME_CHAR      			; more character to compare
Macro: DEY.PL [Source: macros.inc]
     1 4E0C 88					DEY
     2 4E0D 10 F2				BPL	COMP_NAME_CHAR
Source: boot_sys_sh.asm
   490 4E0F 38			COMP_NAME_EQU   SEC                         			; all characters are equal, set Carry = 1
   491 4E10 60			                RTS
   492 4E11 18			COMP_NAME_NEQ   CLC
   493 4E12 60			                RTS
   494
   495 				; ******************************************************************************
   496 				; ******************************************************************************
   497 4E13 00 00 00 00		SAVED_ACT_DIR   .byte      $00, $00, $00, $00
   498 4E17 00 00 00 00		SAVED_DIR_BLK   .byte      $00, $00, $00, $00
   499 				; + DRIVE
   500 				                
   501 4E1B A0 03		SAVE_ACT_DIR    LDY     #$03		   		; Save D_ACTUAL_DIR and CURR_DIR_BLK
   502 4E1D B9 04 04 99 13 4E	SAVE_DIR_ADDR   MVA	D_ACTUAL_DIR,Y SAVED_ACT_DIR,Y	; SAVED_ACT_DIR = D_ACTUAL_DIR
   503 4E23 B9 24 18 99 17 4E + 		MVA	CURR_DIR_BLK,Y SAVED_DIR_BLK,Y-	; SAVED_DIR_BLK = CURR_DIR_BLK
   504 4E2A 10 F1		                BPL     SAVE_DIR_ADDR			; branch if not finished
   505 4E2C 60			                RTS					; return
   506 				                
   507 4E2D A0 03		LOAD_ACT_DIR    LDY     #$03
   508 4E2F B9 13 4E 99 04 04	LOAD_DIR_ADDR   MVA	SAVED_ACT_DIR,Y D_ACTUAL_DIR,Y	; D_ACTUAL_DIR = SAVED_ACTUAL_DIR
   509 4E35 B9 17 4E 99 24 18 + 		MVA	SAVED_DIR_BLK,Y CURR_DIR_BLK,Y-	; CURR_DIR_BLK = SAVED_DIR_BLK
   510 4E3C 10 F1		                BPL     LOAD_DIR_ADDR			; branch if not finished
   511 4E3E 60			                RTS					; return
   512 				                
   513 				; **** Get Parameters from Command Line ****************************************
   514 				; Input:  Ptr[X:Y] to Parameter String
   515 				; Output: C = 0 - Error; C = 1 - No Error
   516 				; ******************************************************************************
   517 4E3F 20 AC 4E		SH_GET_PARMS    JSR     SET_PARM_MASK	    ; set pointer to parameter mask
   518 4E42 A9 00		                LDA     #$00                ; set current command parameter value to 0
   519 4E44 8D 1F 18		GET_PARM        STA     CURR_CMD_PARAM
   520 4E47 A0 01 84 AA		GET_PARM2       MVY     #$01 MASK           ; reset bit mask to 00000001
   521 4E4B 88			                DEY                         ; param mask pointer is set to 0
   522 4E4C 20 6F 4D		                JSR     GET_NEXT_PARAM      ; find next command parameter in command line
   523 4E4F F0 3B		                BEQ     GET_PARMS_END       ; reached end of command line
   524 4E51 B0 06		                BCS     PARSE_PARM          ; C=1: parameter found? branch if parameter
   525 						
   526 4E53 20 8E 4E		                JSR     SH_GET_PATH         ; no, parse path parameter
   527 4E56 B0 EF		                BCS     GET_PARM2           ; more parameters
   528
   529 4E58 60			                RTS			    ; return
   530 						
   531 4E59 20 D8 4A		PARSE_PARM      JSR     UPPERCASE	    ; convert to uppercase
   532 4E5C 8D 12 18		                STA     F_ATTRIBS           ; no, save current parameter as F_ATTRIBS
   533 4E5F B1 E8		COMP_PARM       LDA     (STOL),Y            ; load a char from param mask (STOL = Ptr to param mask)
   534 4E61			                CMP.EQ	#SPC PARM_ERR	    ; is it a ' '? Branch if all allowed param chars are compared -> unknown param
Macro: CMP.EQ [Source: macros.inc]
     1 4E61 C9 20				CMP	#SPC
     2 4E63 F0 12				BEQ	PARM_ERR
Source: boot_sys_sh.asm
   535 4E65					CMP.NE  F_ATTRIBS NEXT_MASK ; Compare actual parameter char with param mask. Branch if not equal, get next char from param mask
Macro: CMP.NE [Source: macros.inc]
     1 4E65 CD 12 18				CMP	F_ATTRIBS
     2 4E68 D0 08				BNE	NEXT_MASK
Source: boot_sys_sh.asm
   536 4E6A A5 AA		                LDA     MASK                ; load bit mask
   537 4E6C 0D 1F 18		                ORA     CURR_CMD_PARAM      ; and set actual parameter bit
   538 4E6F 4C 44 4E		                JMP     GET_PARM            ; get next parameter from command line
   539
   540 4E72 C8			NEXT_MASK       INY                         ; point to next char in param mask
   541 4E73 06 AA		                ASL     MASK                ; shift bit mask to next position
   542 4E75 D0 E8		                BNE     COMP_PARM	    ; branch if more to do
   543
   544 4E77 20 5A E0		PARM_ERR        JSR     CROUT		    ; print CR
   545 4E7A			                LDXYI   MSG_PARAM_ERR       ; load error message
Macro: LDXYI [Source: macros.inc]
     1 4E7A A2 C6			LDX	<MSG_PARAM_ERR				; MADS makes this immediate
     2 4E7C A0 53			LDY	>MSG_PARAM_ERR
Source: boot_sys_sh.asm
   546 4E7E 20 48 48		                JSR     OS_PRINT_ERR        ; and print it
   547 4E81 AD 12 18		                LDA     F_ATTRIBS
   548 4E84 20 52 E0		                JSR     COUT                ; print unknown parameter char
   549 4E87 20 5A E0		                JSR     CROUT		    ; print CR
   550 4E8A 18			                CLC			    ; C=0: error
   551 4E8B 60			                RTS
   552 4E8C 38			GET_PARMS_END   SEC			    ; C=1: OK
   553 4E8D 60			                RTS
   554 				                
   555 				; ******************************************************************************
   556 4E8E A6 AC		SH_GET_PATH     LDX     NCNT                ; get pointer path string into X:Y
   557 4E90 A0 14		                LDY     #> STRBUF
   558 4E92 20 4D 48		                JSR     OS_PARSE_PATH
   559 4E95 B0 14		                BCS     GET_PATH_END
   560 4E97 D0 03		SH_ERROR        BNE     PARSE_ERR1
   561
   562 4E99 4C 54 52		                JMP     SH_NAME_ERR
   563
   564 4E9C			PARSE_ERR1      CMP.NE  #PATH_SEP PARSE_ERR2
Macro: CMP.NE [Source: macros.inc]
     1 4E9C C9 5C				CMP	#PATH_SEP
     2 4E9E D0 03				BNE	PARSE_ERR2
Source: boot_sys_sh.asm
   565 4EA0 4C 4D 52		                JMP     SH_DIR_ERR
   566
   567 4EA3			PARSE_ERR2      CMP.NE  #$FF GET_PATH_ERR
Macro: CMP.NE [Source: macros.inc]
     1 4EA3 C9 FF				CMP	#$FF
     2 4EA5 D0 03				BNE	GET_PATH_ERR
Source: boot_sys_sh.asm
   568 4EA7 4C 46 52		                JMP     SH_PATH_ERR
   569 4EAA 18			GET_PATH_ERR    CLC
   570 4EAB 60			GET_PATH_END    RTS
   571
   572 				; **** Set Pointer To Parameter Mask *******************************************
   573 				; Input: Ptr[X:Y] = Pointer to Parameter Mask
   574 				; ******************************************************************************
   575 4EAC			SET_PARM_MASK   STXY	STOL			; save pointer to command param mask
Macro: STXY [Source: macros.inc]
     1 4EAC 86 E8			STX	STOL
     2 4EAE 84 E9			STY	STOL+1
Source: boot_sys_sh.asm
   576 4EB0 A9 00 8D 1F 18			MVA	#0 CURR_CMD_PARAM	; set current command parameter value to 0
   577 4EB5 A9 5C 8D 11 18			MVA	#PATH_SEP TERM_CHAR	; TERM_CHAR = PATH_SEP
   578 4EBA 60			                RTS
   579
   580 				; Allowed Directory Options ****************************************************
   581 4EBB 50 41 48 43 20	DIR_PARMS       .by    'PAHC '               	; param mask for DIR command
   582 4EC0 20			NO_PARMS        .by    ' '
   583
   584 				; **** DIR Command *************************************************************
   585 				; Prints a directory. The following optional parameters can be used:
   586 				; /P : 
   587 				; /A : Show attributes
   588 				; /H : Show hidden files
   589 				; /C : Show cluster number and LBA number
   590 				; ******************************************************************************
   591 4EC1 20 5A E0		SH_DIR          JSR     CROUT			; print CR
   592 4EC4 20 1B 4E		                JSR     SAVE_ACT_DIR        	; save actual-dir cluster nr
   593 4EC7			                LDXYI   DIR_PARMS
Macro: LDXYI [Source: macros.inc]
     1 4EC7 A2 BB			LDX	<DIR_PARMS				; MADS makes this immediate
     2 4EC9 A0 4E			LDY	>DIR_PARMS
Source: boot_sys_sh.asm
   594 4ECB 20 3F 4E		                JSR     SH_GET_PARMS		; Get parameters from command-line
   595 4ECE B0 03		                BCS     SH_DIR_START		; branch if parameter found
   596
   597 4ED0 4C 2D 4E		                JMP     LOAD_ACT_DIR        	; restore actual directory LBA
   598
   599 4ED3 A2 00		SH_DIR_START    LDX     #$00
   600 4ED5 8A			                TXA
   601 4ED6 8D 14 18		                STA     LINE_CNT            	; reset line counter
   602 4ED9 85 EE		                STA     PSAV                	; reset file found flag
   603 4EDB 9D 15 18 E8		CLEAR_CNT       STA     CURR_FILE_CNT,X+     	; clear file count, dir count and byte count
   604 4EDF			                CPX.NE  #$08 CLEAR_CNT		; branch if not 8 bytes cleared yet
Macro: CPX.NE [Source: macros.inc]
     1 4EDF E0 08				CPX	#$08
     2 4EE1 D0 F8				BNE	CLEAR_CNT
Source: boot_sys_sh.asm
   605 4EE3			                LDXYI   CB_PRINT_DIR  		; print call-back routine
Macro: LDXYI [Source: macros.inc]
     1 4EE3 A2 99			LDX	<CB_PRINT_DIR				; MADS makes this immediate
     2 4EE5 A0 4D			LDY	>CB_PRINT_DIR
Source: boot_sys_sh.asm
   606 4EE7 20 F1 46		                JSR     OS_FIND_ALL         	; find and print directory entries
   607 4EEA 20 2D 4E		                JSR     LOAD_ACT_DIR        	; restore actual directory LBA
   608 4EED			                LDA.NE  PSAV PRINT_RESULT      	; Branch if any files found, print dir. result
Macro: LDA.NE [Source: macros.inc]
     1 4EED A5 EE				LDA	PSAV
     2 4EEF D0 03				BNE	PRINT_RESULT
Source: boot_sys_sh.asm
   609 4EF1 4C 3F 52		                JMP     SH_FILE_ERR         	; no, print error
   610
   611 4EF4 20 5A E0		PRINT_RESULT    JSR     CROUT			; Print CR
   612 4EF7 EE 14 18 EE 14 18	        :2      INC     LINE_CNT		; LINE_CNT += 2
   613 4EFD 20 E1 4D		                JSR     CHK_LINE_COUNT		; if LINE_CNT > 25 then SH_PAUSE
   614 				                
   615 				; Print Total File Count
   616 4F00			                LDXY	CURR_FILE_CNT		; [X,Y] = Current nr of files
Macro: LDXY [Source: macros.inc]
     1 4F00 AE 15 18			LDX	CURR_FILE_CNT
     2 4F03 AC 16 18			LDY	CURR_FILE_CNT+1
Source: boot_sys_sh.asm
   617 4F06 20 9B 4C		                JSR     PRINT_INT16		; print as word
   618 4F09			                PRSTR   MSG_FILE_COUNT		; print 'file(s) '
Macro: PRSTR [Source: macros.inc]
     1 4F09 A2 77			LDX	<MSG_FILE_COUNT				; MADS makes this immediate
     2 4F0B A0 53			LDY	>MSG_FILE_COUNT
Source: boot_sys_sh.asm
     2 4F0D 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   619
   620 				; Print Total Used Bytes In Directory
   621 4F10			                LDXYI   CURR_USED_SIZE		; Total filesize
Macro: LDXYI [Source: macros.inc]
     1 4F10 A2 19			LDX	<CURR_USED_SIZE				; MADS makes this immediate
     2 4F12 A0 18			LDY	>CURR_USED_SIZE
Source: boot_sys_sh.asm
   622 4F14 20 61 41		                JSR     LOAD_32			; NUM32 = total filesize
   623 4F17 20 A1 4C		                JSR     PRINT_INT32		; print as int32
   624 4F1A			                PRSTR   MSG_BYTE_USED		; print ' bytes'
Macro: PRSTR [Source: macros.inc]
     1 4F1A A2 8D			LDX	<MSG_BYTE_USED				; MADS makes this immediate
     2 4F1C A0 53			LDY	>MSG_BYTE_USED
Source: boot_sys_sh.asm
     2 4F1E 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   625
   626 				; Print Total Directory Count
   627 4F21					LDXY	CURR_DIR_CNT		; nr of directories
Macro: LDXY [Source: macros.inc]
     1 4F21 AE 17 18			LDX	CURR_DIR_CNT
     2 4F24 AC 18 18			LDY	CURR_DIR_CNT+1
Source: boot_sys_sh.asm
   628 4F27 20 9B 4C		                JSR     PRINT_INT16		; Print as word
   629 4F2A			                PRSTR   MSG_DIR_COUNT		; print ' dir(s)'
Macro: PRSTR [Source: macros.inc]
     1 4F2A A2 82			LDX	<MSG_DIR_COUNT				; MADS makes this immediate
     2 4F2C A0 53			LDY	>MSG_DIR_COUNT
Source: boot_sys_sh.asm
     2 4F2E 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   630 4F31					MVAX	4 FREE_KB NUM32		; NUM32 = #Free KB
Macro: MVAX [Source: macros.inc]
     1 4F31 A2 03			LDX	#4-1
     2 4F33 BD 13 53 95 C0 CA	lp	MVA	FREE_KB,X NUM32,X-
     3 4F39 10 F8			BPL	lp
Source: boot_sys_sh.asm
   631 4F3B 20 A1 4C				JSR	PRINT_INT32		; Print as decimal number
   632 4F3E					PRSTR	TXT_KB			; Print ' KB free'
Macro: PRSTR [Source: macros.inc]
     1 4F3E A2 2C			LDX	<TXT_KB				; MADS makes this immediate
     2 4F40 A0 53			LDY	>TXT_KB
Source: boot_sys_sh.asm
     2 4F42 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   633 4F45 60					RTS				; return
   634 						
   635 				; **** Create Directory (MKDIR) Command ****************************************
   636 				;
   637 				; ******************************************************************************
   638 4F46 20 1B 4E		SH_MKDIR        JSR     SAVE_ACT_DIR        	; save actual directory LBA
   639 4F49			                LDXYI   NO_PARMS          	; we don't need parameters, evtl. /H hidden /S system
Macro: LDXYI [Source: macros.inc]
     1 4F49 A2 C0			LDX	<NO_PARMS				; MADS makes this immediate
     2 4F4B A0 4E			LDY	>NO_PARMS
Source: boot_sys_sh.asm
   640 4F4D 20 3F 4E		                JSR     SH_GET_PARMS        	; get path
   641 4F50 90 13		                BCC     SH_MKDIR_END	    	; branch if no dirname was given
   642
   643 4F52 A9 10		                LDA     #FA_DIRECTORY		; create directory
   644 4F54 20 75 46		                JSR     OS_CREATE           	; create directory
   645 4F57 B0 0C		                BCS     SH_MKDIR_END        	; if no errors, clean up and exit
   646
   647 4F59			MKDIR_ERR       CMP.EQ  #$FF DIR_EXISTS_ERR    	; if error code = -1 then dir already exists
Macro: CMP.EQ [Source: macros.inc]
     1 4F59 C9 FF				CMP	#$FF
     2 4F5B F0 05				BEQ	DIR_EXISTS_ERR
Source: boot_sys_sh.asm
   648
   649 4F5D 20 62 52		                JSR     SH_WRITE_ERR        	; it was a write error
   650 4F60 90 03		                BCC     SH_MKDIR_END        	; branch always
   651
   652 4F62 20 5B 52		DIR_EXISTS_ERR  JSR     SH_D_EXIST_ERR		; Print 'Dir already exists'
   653 4F65 4C 2D 4E		SH_MKDIR_END    JMP     LOAD_ACT_DIR        	; restore actual directory LBA and return
   654
   655 				; **** Check if Current Dir. ***************************************************
   656 				; Check if directory entered is current dir (..).
   657 				; Output: C=0: not a current dir, C=1: is current dir.
   658 				; ******************************************************************************
   659 4F68 A0 00		IS_FNAME_CURDIR	LDY	#0
   660 4F6A B9 10 4A				LDA	FILENAME,Y
   661 4F6D					CMP.NE	#'.' NOT_FNAME
Macro: CMP.NE [Source: macros.inc]
     1 4F6D C9 2E				CMP	#'.'
     2 4F6F D0 21				BNE	NOT_FNAME
Source: boot_sys_sh.asm
   662 4F71 C8					INY
   663 4F72					LDA.NE	FILENAME,Y NOT_FNAME	; Load filename char, branch if not a current dir (.)
Macro: LDA.NE [Source: macros.inc]
     1 4F72 B9 10 4A				LDA	FILENAME,Y
     2 4F75 D0 1B				BNE	NOT_FNAME
Source: boot_sys_sh.asm
   664 4F77 F0 17				BEQ	IS_FNAME		; branch always if it is a current dir (.)
   665
   666 				; **** Check if Parent Dir. ************************************************
   667 				; Check if current directory is parent dir (..).
   668 				; Output: C=0: not a parent dir, C=1: is parent dir.
   669 				; ******************************************************************************
   670 4F79 A0 00		IS_FNAME_PARENT	LDY	#0
   671 4F7B B9 10 4A				LDA	FILENAME,Y
   672 4F7E					CMP.NE	#'.' NOT_FNAME
Macro: CMP.NE [Source: macros.inc]
     1 4F7E C9 2E				CMP	#'.'
     2 4F80 D0 10				BNE	NOT_FNAME
Source: boot_sys_sh.asm
   673 4F82 C8					INY
   674 4F83 B9 10 4A				LDA	FILENAME,Y
   675 4F86					CMP.NE	#'.' NOT_FNAME
Macro: CMP.NE [Source: macros.inc]
     1 4F86 C9 2E				CMP	#'.'
     2 4F88 D0 08				BNE	NOT_FNAME
Source: boot_sys_sh.asm
   676 4F8A C8					INY
   677 4F8B					LDA.NE	FILENAME,Y NOT_FNAME	; get filename char, branch if not end-of-string
Macro: LDA.NE [Source: macros.inc]
     1 4F8B B9 10 4A				LDA	FILENAME,Y
     2 4F8E D0 02				BNE	NOT_FNAME
Source: boot_sys_sh.asm
   678
   679 4F90 38			IS_FNAME	SEC				; C=1: is parent (..) directory
   680 4F91 60					RTS
   681 4F92 18			NOT_FNAME	CLC				; The filename is not . or ..
   682 4F93 60					RTS
   683 						
   684 				; **** Convert filename to FN83 type filename **********************************
   685 				; INPUT: ssptr_l/ssptr_h pointer to filename
   686 				; OUTPUT: converted filename in FN83
   687 				; ******************************************************************************
   688 4F94 A0 00		FNAME2FN83	LDY	#0
   689 4F96 B1 78		CPFN83_1	LDA	(ssptr_l),Y		; BASIC pointer to filename
   690 4F98					CMP.EQ	#'.' FN83_DOTFND	; branch if a dot is found
Macro: CMP.EQ [Source: macros.inc]
     1 4F98 C9 2E				CMP	#'.'
     2 4F9A F0 07				BEQ	FN83_DOTFND
Source: boot_sys_sh.asm
   691 						
   692 4F9C C8			CPFNCNT		INY
   693 4F9D					CPY.NE	#D_ATTRIBUTES CPFN83_1	; branch if not at end-of-filename yet
Macro: CPY.NE [Source: macros.inc]
     1 4F9D C0 0B				CPY	#D_ATTRIBUTES
     2 4F9F D0 F5				BNE	CPFN83_1
Source: boot_sys_sh.asm
   694 4FA1 F0 18				BEQ	EXT_DN			; branch always if no dot was found
   695
   696 4FA3			FN83_DOTFND	; Found a dot
   697 4FA3 A2 08				LDX	#8
   698 4FA5 C8					INY				; points to char next to '.'
   699 4FA6 B1 78		CPFN83_2	LDA	(ssptr_l),Y		; Get char of extension
   700 4FA8 20 D8 4A				JSR	UPPERCASE		; Convert to upper-case (only affects A)
   701 4FAB					STA.EQ	FILENAME,X EXT_DN	; Store in extension, branch if '\0' (done)
Macro: STA.EQ [Source: macros.inc]
     1 4FAB 9D 10 4A				STA	FILENAME,X
     2 4FAE F0 0B				BEQ	EXT_DN
Source: boot_sys_sh.asm
   702 4FB0 C8					INY
   703 4FB1 E8					INX
   704 4FB2					CPX.NE	#D_ATTRIBUTES CPFN83_2	; branch if not done with extension
Macro: CPX.NE [Source: macros.inc]
     1 4FB2 E0 0B				CPX	#D_ATTRIBUTES
     2 4FB4 D0 F0				BNE	CPFN83_2
Source: boot_sys_sh.asm
   705 						
   706 4FB6 A9 00 9D 10 4A			MVA	#0 FILENAME,X		; Add '\0' to filename
   707 4FBB A0 00		EXT_DN		LDY	#0
   708 4FBD B1 78		CPFN83_3	LDA	(ssptr_l),Y		; Get char of Filename
   709 4FBF 20 D8 4A				JSR	UPPERCASE		; Convert to upper-case (only affects A)
   710 4FC2 99 10 4A				STA	FILENAME,Y		; Store in result
   711 4FC5					CMP.EQ	#'.' CPFN83_4		; branch if filename copied
Macro: CMP.EQ [Source: macros.inc]
     1 4FC5 C9 2E				CMP	#'.'
     2 4FC7 F0 06				BEQ	CPFN83_4
Source: boot_sys_sh.asm
   712 4FC9 C8					INY
   713 4FCA					CPY.NE	#8 CPFN83_3		; branch if not all chars copied
Macro: CPY.NE [Source: macros.inc]
     1 4FCA C0 08				CPY	#8
     2 4FCC D0 EF				BNE	CPFN83_3
Source: boot_sys_sh.asm
   714 4FCE 60					RTS				; return
   715 						
   716 4FCF A9 20 99 10 4A C8	CPFN83_4	MVA	#' ' FILENAME,Y+	; fill remainder with spaces
   717 4FD5					CPY.NE	#8   CPFN83_4		; branch if not all chars copied
Macro: CPY.NE [Source: macros.inc]
     1 4FD5 C0 08				CPY	#8
     2 4FD7 D0 F6				BNE	CPFN83_4
Source: boot_sys_sh.asm
   718 4FD9 60			CPFN_DN		RTS				; return
   719 						
   720 				; **** CFC_LOAD routine for CF-IDE driver **************************************
   721 				; Called with a CMD_LOAD from the CFC Device-driver through a JMP CFC_LOAD_VEC.
   722 				; ******************************************************************************
   723 4FDA			CFC_LOAD	STXY	FNAME_PTR
Macro: STXY [Source: macros.inc]
     1 4FDA 8E 0E 50			STX	FNAME_PTR
     2 4FDD 8C 0F 50			STY	FNAME_PTR+1
Source: boot_sys_sh.asm
   724 4FE0					PRSTR	TXT_LOAD		; Print 'CFC_LOAD'
Macro: PRSTR [Source: macros.inc]
     1 4FE0 A2 03			LDX	<TXT_LOAD				; MADS makes this immediate
     2 4FE2 A0 50			LDY	>TXT_LOAD
Source: boot_sys_sh.asm
     2 4FE4 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   725 4FE7 20 94 4F				JSR	FNAME2FN83		; Convert filename to FN83 filename
   726 4FEA					PRCH	'['
Macro: PRCH [Source: macros.inc]
     1 4FEA A9 5B			LDA	#'['
     2 4FEC 20 52 E0			JSR	COUT
Source: boot_sys_sh.asm
   727 4FEF					LDXYI	FILENAME		; 
Macro: LDXYI [Source: macros.inc]
     1 4FEF A2 10			LDX	<FILENAME				; MADS makes this immediate
     2 4FF1 A0 4A			LDY	>FILENAME
Source: boot_sys_sh.asm
   728 4FF3 20 82 F6				JSR	OS_STRING_OUT		; Print FN83 filename
   729 4FF6					PRCH	']'
Macro: PRCH [Source: macros.inc]
     1 4FF6 A9 5D			LDA	#']'
     2 4FF8 20 52 E0			JSR	COUT
Source: boot_sys_sh.asm
   730 4FFB 20 1B 4E				JSR     SAVE_ACT_DIR        	; save actual directory LBA
   731 4FFE 20 A2 51				JSR	SH_LOAD_BAS		; Load .bas file in memory
   732 5001 38					SEC				; C=1: OK
   733 5002 60					RTS				; return
   734
   735 5003 43 46 43 5F 4C 4F + TXT_LOAD	.by	'CFC_LOAD: ' $00
   736 500E 00 00		FNAME_PTR	.word 	$0000
   737
   738 				; **** CFC_SAVE routine for CF-IDE driver **************************************
   739 				; Called with a CMD_SAVE from the CFC Device-driver through a JMP CFC_SAVE_VEC.
   740 				; ******************************************************************************
   741 5010			CFC_SAVE	STXY	FNAME_PTR
Macro: STXY [Source: macros.inc]
     1 5010 8E 0E 50			STX	FNAME_PTR
     2 5013 8C 0F 50			STY	FNAME_PTR+1
Source: boot_sys_sh.asm
   742 5016					PRSTR	TXT_SAVE		; Print 'CFC_SAVE'
Macro: PRSTR [Source: macros.inc]
     1 5016 A2 77			LDX	<TXT_SAVE				; MADS makes this immediate
     2 5018 A0 50			LDY	>TXT_SAVE
Source: boot_sys_sh.asm
     2 501A 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   743 501D					PRHEX16	$2000			; Print end-address
Macro: PRHEX16 [Source: macros.inc]
     1 501D AD 01 20			LDA	$2000+1				; print MSB
     2 5020 20 91 E0			JSR	HEXOUT
     3 5023 AD 00 20			LDA	$2000
     4 5026 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_sh.asm
   744 5029 20 5E E0				JSR	SPCOUT		
   745 502C 20 94 4F				JSR	FNAME2FN83		; Convert filename to FN83 filename
   746 502F					PRCH	'['
Macro: PRCH [Source: macros.inc]
     1 502F A9 5B			LDA	#'['
     2 5031 20 52 E0			JSR	COUT
Source: boot_sys_sh.asm
   747 5034					LDXYI	FILENAME		; 
Macro: LDXYI [Source: macros.inc]
     1 5034 A2 10			LDX	<FILENAME				; MADS makes this immediate
     2 5036 A0 4A			LDY	>FILENAME
Source: boot_sys_sh.asm
   748 5038 20 82 F6				JSR	OS_STRING_OUT		; Print FN83 filename
   749 503B					PRCH	']'
Macro: PRCH [Source: macros.inc]
     1 503B A9 5D			LDA	#']'
     2 503D 20 52 E0			JSR	COUT
Source: boot_sys_sh.asm
   750 5040 38 AD 00 20 E9 00 + 		SBW	$2000 #$2000		; Get net file-size
   751 5051 4E 01 20				LSR	$2001			; $2000 now contains #sectors of 512 bytes needed
   752 5054 AD 0B 04				LDA	D_SECT_PER_CLST		; Convert to #clusters
   753 5057 4E 01 20		DIV_SPC		LSR	$2001			; $2000 = $2000 / D_SECT_PER_CLST
   754 505A 4A					LSR
   755 505B D0 FA				BNE	DIV_SPC			; branch if not done with shifting
   756 						
   757 505D					LDA.EQ	$2000 NO_ADD_SEC
Macro: LDA.EQ [Source: macros.inc]
     1 505D AD 00 20				LDA	$2000
     2 5060 F0 03				BEQ	NO_ADD_SEC
Source: boot_sys_sh.asm
   758 5062 EE 01 20				INC 	$2001			; add 1 if last part of file is not empty
   759 5065			NO_ADD_SEC	PRSTR	TXT_CLND		; Print 'Clusters needed: '
Macro: PRSTR [Source: macros.inc]
     1 5065 A2 83			LDX	<TXT_CLND				; MADS makes this immediate
     2 5067 A0 50			LDY	>TXT_CLND
Source: boot_sys_sh.asm
     2 5069 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   760 506C AD 01 20				LDA	$2001			; Get cluster count
   761 506F 20 E3 4A				JSR	NUMOUT			; Print #clusters needed
   762 5072 20 5A E0				JSR	CROUT
   763 5075 38					SEC				; C=1: OK
   764 5076 60					RTS				; return
   765
   766 5077 43 46 43 5F 53 41 + TXT_SAVE	.by	'CFC_SAVE: $' $00
   767 5083 2C 20 63 6C 75 73 + TXT_CLND	.by	', clusters needed: ' $00
   768
   769 				; **** Add subdir name to D_SUBDIR_NAME ****************************************
   770 				; Check if directory entered is current dir (..).
   771 				; Output: C=0: not a current dir, C=1: is current dir.
   772 				; ******************************************************************************
   773 5097 A0 00		ADD_SUBDIR_NAME	LDY	#0
   774 5099			FIND_EOS	LDA.EQ	D_SUBDIR_NAME,Y SUBDIR_EOS	; get char of subdir name, branch if end-of-string
Macro: LDA.EQ [Source: macros.inc]
     1 5099 B9 20 04				LDA	D_SUBDIR_NAME,Y
     2 509C F0 04				BEQ	SUBDIR_EOS
Source: boot_sys_sh.asm
   775 509E C8					INY
   776 509F D0 F8				BNE	FIND_EOS			; branch always
   777 50A1 60					RTS
   778
   779 50A2			SUBDIR_EOS	CPY.EQ	#1 CP_INIT		; branch if root-dir
Macro: CPY.EQ [Source: macros.inc]
     1 50A2 C0 01				CPY	#1
     2 50A4 F0 06				BEQ	CP_INIT
Source: boot_sys_sh.asm
   780 50A6 A9 5C 99 20 04			MVA	#BSLASH D_SUBDIR_NAME,Y	; add '\' to subdir name
   781 50AB C8					INY
   782 50AC A2 00		CP_INIT		LDX	#0
   783 50AE BD 10 4A 99 20 04	CP_FNAME	MVA	FILENAME,X D_SUBDIR_NAME,Y
   784 50B4 F0 06				BEQ	SUBDIR_X		; exit if $00 found
   785 						
   786 50B6 C8					INY				; index in D_SUBDIR_NAME
   787 50B7 E8					INX				; index in FILENAME
   788 50B8					CPX.NE	#D_ATTRIBUTES CP_FNAME	; branch if not at max filename yet
Macro: CPX.NE [Source: macros.inc]
     1 50B8 E0 0B				CPX	#D_ATTRIBUTES
     2 50BA D0 F2				BNE	CP_FNAME
Source: boot_sys_sh.asm
   789 50BC 60			SUBDIR_X	RTS				; return if done
   790 						
   791 				; **** Del subdir name from D_SUBDIR_NAME **************************************
   792 				; ******************************************************************************
   793 50BD A0 00		DEL_SUBDIR_NAME	LDY	#0
   794 50BF			FIND_EOS2	LDA.EQ	D_SUBDIR_NAME,Y SUBDIR_EOS2	; get char of subdir name, branch if end-of-string
Macro: LDA.EQ [Source: macros.inc]
     1 50BF B9 20 04				LDA	D_SUBDIR_NAME,Y
     2 50C2 F0 04				BEQ	SUBDIR_EOS2
Source: boot_sys_sh.asm
   795 50C4 C8					INY
   796 50C5 D0 F8				BNE	FIND_EOS2			; branch always
   797 50C7 60			DEL_SUBDIR_X	RTS
   798
   799 50C8 88			SUBDIR_EOS2	DEY				; goto last char before $00
   800 50C9 B9 20 04		SUBDIR_LP1	LDA	D_SUBDIR_NAME,Y		; get char from D_SUBDIR_NAME
   801 50CC					CMP.EQ	#BSLASH BSLASH_FND	; branch if filename separator found
Macro: CMP.EQ [Source: macros.inc]
     1 50CC C9 5C				CMP	#BSLASH
     2 50CE F0 03				BEQ	BSLASH_FND
Source: boot_sys_sh.asm
   802 50D0					DEY.NE	SUBDIR_LP1		; branch always
Macro: DEY.NE [Source: macros.inc]
     1 50D0 88					DEY
     2 50D1 D0 F6				BNE	SUBDIR_LP1
Source: boot_sys_sh.asm
   803
   804 50D3			BSLASH_FND	CPY.EQ	#0 DSNM_X		; branch if root-dir
Macro: CPY.EQ [Source: macros.inc]
     1 50D3 C0 00				CPY	#0
     2 50D5 F0 05				BEQ	DSNM_X
Source: boot_sys_sh.asm
   805 50D7 A9 00 99 20 04			MVA	#0 D_SUBDIR_NAME,Y	; replace '\' with '\0' in D_SUBDIR_NAME
   806 50DC 60			DSNM_X		RTS				; and return
   807
   808 				; **** Change Directory Command ************************************************
   809 				;
   810 				; ******************************************************************************
   811 50DD 20 1B 4E		SH_CD           JSR     SAVE_ACT_DIR        	; save actual directory LBA
   812 50E0			                LDXYI   NO_PARMS
Macro: LDXYI [Source: macros.inc]
     1 50E0 A2 C0			LDX	<NO_PARMS				; MADS makes this immediate
     2 50E2 A0 4E			LDY	>NO_PARMS
Source: boot_sys_sh.asm
   813 50E4 20 3F 4E		                JSR     SH_GET_PARMS		; get subdir name
   814 50E7 90 26		                BCC     SH_CD_END		; C=0: no name entered
   815
   816 50E9			                LDA.NE  TERM_CHAR SH_CD_END	; branch if termination char > 0
Macro: LDA.NE [Source: macros.inc]
     1 50E9 AD 11 18				LDA	TERM_CHAR
     2 50EC D0 21				BNE	SH_CD_END
Source: boot_sys_sh.asm
   817 50EE 20 E7 46		                JSR     OS_FIND_PATH		; loop through dir to find path
   818 50F1 90 28		                BCC     SH_CD_ERR		; branch if subdir name was not found
   819 						
   820 50F3 A0 00				LDY	#0			; add '\0' to string
   821 50F5 B9 10 4A		TERM_FNAME_LP	LDA	FILENAME,Y		; find end-of-string first
   822 50F8					CMP.EQ	#' ' TERM_FNAME		; branch if a space found
Macro: CMP.EQ [Source: macros.inc]
     1 50F8 C9 20				CMP	#' '
     2 50FA F0 05				BEQ	TERM_FNAME
Source: boot_sys_sh.asm
   823 50FC C8					INY
   824 50FD					CPY.NE	#D_ATTRIBUTES TERM_FNAME_LP	; branch if not at max. len of filename
Macro: CPY.NE [Source: macros.inc]
     1 50FD C0 0B				CPY	#D_ATTRIBUTES
     2 50FF D0 F4				BNE	TERM_FNAME_LP
Source: boot_sys_sh.asm
   825 						
   826 5101 A9 00 99 10 4A	TERM_FNAME	MVA	#$00 FILENAME,Y		; terminate string with \0
   827 5106 20 79 4F				JSR	IS_FNAME_PARENT		; is dir .. ?
   828 5109 90 05				BCC	TST_CURDIR		; branch if not . or .. entered
   829 						
   830 510B 20 BD 50				JSR	DEL_SUBDIR_NAME		; remove last subdir from D_SUBDIR_NAME
   831 510E 38			SH_CD_EXIT_OK	SEC				; C=1: OK
   832 510F 60			SH_CD_END	RTS
   833
   834 5110 20 68 4F		TST_CURDIR	JSR	IS_FNAME_CURDIR		; is dir . ?
   835 5113 B0 F9				BCS	SH_CD_EXIT_OK		; branch if dir is . (current dir)
   836 						
   837 5115 20 97 50				JSR	ADD_SUBDIR_NAME		; Normal subdir name, add to D_SUBDIR_NAME
   838 5118 4C 0E 51				JMP	SH_CD_EXIT_OK		; branch always
   839 						
   840 511B 20 2D 4E		SH_CD_ERR       JSR     LOAD_ACT_DIR        	; error - restore actual directory LBA
   841 511E 20 5A E0		                JSR     CROUT			; print CR
   842 5121 4C 46 52		                JMP     SH_PATH_ERR		; Print 'Path not found'
   843
   844 				; **** Delete Command **********************************************************
   845 				;
   846 				; ******************************************************************************
   847
   848 				; ########## TEMP Checking for first free cluster #################
   849 5124 20 EA 44		SH_DEL          JSR 	INIT_FREE_CLUSTER	; FREE_CLUSTER = 0L
   850 5127 20 FB 44		                JSR 	OS_NEXT_FREE_CLUSTER
   851 512A A0 03				LDY 	#3
   852 512C			PRINT_CURR_CLST PHY				; save Y
Macro: PHY [Source: macros.inc]
     1 512C 98				TYA
     2 512D 48				PHA
Source: boot_sys_sh.asm
   853 512E B9 20 18				LDA 	FREE_CLUSTER,Y		; 
   854 5131 20 91 E0		                JSR 	HEXOUT			; Print FREE_CLUSTER
   855 5134					PLY				; restore Y
Macro: PLY [Source: macros.inc]
     1 5134 68				PLA
     2 5135 A8				TAY
Source: boot_sys_sh.asm
   856 5136					DEY.PL	PRINT_CURR_CLST		; print if not done yet
Macro: DEY.PL [Source: macros.inc]
     1 5136 88					DEY
     2 5137 10 F3				BPL	PRINT_CURR_CLST
Source: boot_sys_sh.asm
   857 5139 60			                RTS
   858
   859 				; **** Clear Screen Command ****************************************************
   860 				;
   861 				; ******************************************************************************
   862 513A 4C B5 E0		SH_CLS          JMP     CLRSCRN
   863
   864 				; **** Pause Command ***********************************************************
   865 				; Output: A - pressed key char
   866 				;         C = 0 ESC key pressed, C = 1 else
   867 				; ******************************************************************************
   868 513D			SH_PAUSE        PRSTR   MSG_PAUSE          	; print pause message
Macro: PRSTR [Source: macros.inc]
     1 513D A2 40			LDX	<MSG_PAUSE				; MADS makes this immediate
     2 513F A0 53			LDY	>MSG_PAUSE
Source: boot_sys_sh.asm
     2 5141 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   869 5144 20 47 E0		                JSR     CIN                  	; wait until any key pressed
   870 5147 48			                PHA
   871 5148 20 5A E0		                JSR     CROUT
   872 514B 68			                PLA
   873 514C 60			                RTS
   874 				                
   875 				; **** Echo Command ************************************************************
   876 				;
   877 				; ******************************************************************************
   878 514D			SH_ECHO         LDA.EQ  STRBUF,X SH_ECHO_END	; get char, branch if end-of-string
Macro: LDA.EQ [Source: macros.inc]
     1 514D BD 00 14				LDA	STRBUF,X
     2 5150 F0 09				BEQ	SH_ECHO_END
Source: boot_sys_sh.asm
   879 5152 8A			                TXA
   880 5153 A8			                TAY
   881 5154 C8			                INY
   882 5155 20 85 E0		                JSR     WRSTR
   883 5158 20 5A E0		                JSR     CROUT
   884 515B 60			SH_ECHO_END     RTS
   885
   886 				; **** Goto Command ************************************************************
   887 				;
   888 				; ******************************************************************************
   889 515C 60			SH_GOTO         RTS
   890
   891 				; **** If Command **************************************************************
   892 				;
   893 				; ******************************************************************************
   894 515D 60			SH_IF           RTS
   895
   896 				; **** Rem Command *************************************************************
   897 				;
   898 				; ******************************************************************************
   899 515E			SH_REM          PHW	BLKBUF			; DEBUG: For testing SIS routines
Macro: PHW [Source: macros.inc]
     1 515E A5 DC			LDA	BLKBUF
     2 5160 48				PHA
     3 5161 A5 DD			LDA	BLKBUF+1
     4 5163 48				PHA
Source: boot_sys_sh.asm
   900 5164 20 9C 52				JSR	GET_SIS
   901 5167					PLW	BLKBUF
Macro: PLW [Source: macros.inc]
     1 5167 68				PLA
     2 5168 85 DD			STA	BLKBUF+1
     3 516A 68				PLA
     4 516B 85 DC			STA	BLKBUF
Source: boot_sys_sh.asm
   902 516D 60					RTS
   903 				                
   904 				; **** BASIC Command ***********************************************************
   905 				; Executes Basic in ROM. Return with 'DOS' command. 
   906 				; ******************************************************************************
   907 516E 20 0A E0		SH_BASIC        JSR	SWITCH_TO_ROM		; Make sure BASIC ROM is enabled
   908 5171 A5 02				LDA	Wrmjph	    	    	; Is BASIC Warm-start vector already set?
   909 5173					CMP.NE	#$B1 SH_BCOLD 	    	; If not in this range, branch and do a BASIC cold start
Macro: CMP.NE [Source: macros.inc]
     1 5173 C9 B1				CMP	#$B1
     2 5175 D0 03				BNE	SH_BCOLD
Source: boot_sys_sh.asm
   910 						
   911 5177 6C 01 00				JMP	(Wrmjpl)	    	; Basic Warm-start
   912 517A 4C 00 B0		SH_BCOLD	JMP	LAB_COLD	    	; Basic Cold-start
   913
   914 				; **** BRUN Command ************************************************************
   915 				;
   916 				; ******************************************************************************
   917 517D 20 1B 4E		SH_BRUN         JSR     SAVE_ACT_DIR        	; save actual directory LBA
   918 5180			                LDXYI   NO_PARMS            	; no command parameters
Macro: LDXYI [Source: macros.inc]
     1 5180 A2 C0			LDX	<NO_PARMS				; MADS makes this immediate
     2 5182 A0 4E			LDY	>NO_PARMS
Source: boot_sys_sh.asm
   919 5184 20 3F 4E		                JSR     SH_GET_PARMS
   920 5187 90 05		                BCC     SH_BRUN_END
   921
   922 5189 20 ED 46		                JSR     OS_FIND_FILE
   923 518C 90 00		                BCC     SH_BRUN_END
   924
   925 				                ;JSR     OS_LOAD_BIN
   926 518E 20 2D 4E		SH_BRUN_END     JSR     LOAD_ACT_DIR        	; restore actual directory LBA
   927 5191 60			                RTS
   928 				                
   929 				; **** BLOAD Command ***********************************************************
   930 				;
   931 				; ******************************************************************************
   932 5192 60			SH_BLOAD        RTS
   933
   934 				; ******************************************************************************
   935 5193 20 1B 4E		SH_RUN          JSR     SAVE_ACT_DIR        ; save actual directory LBA
   936 5196			                LDXYI   NO_PARMS            ; no command parameters
Macro: LDXYI [Source: macros.inc]
     1 5196 A2 C0			LDX	<NO_PARMS				; MADS makes this immediate
     2 5198 A0 4E			LDY	>NO_PARMS
Source: boot_sys_sh.asm
   937 519A 20 AC 4E		                JSR     SET_PARM_MASK
   938 519D 20 8E 4E		                JSR     SH_GET_PATH         ; get file path
   939 51A0 90 66		                BCC     SH_RUN_END
   940
   941 						; This is the entry-point for loading a .BAS file into memory
   942 51A2 AD 18 4A		SH_LOAD_BAS     LDA     FILENAME+8
   943 51A5			                CMP.NE  #SPC SH_RUN1        	; branch if given filename has no extension
Macro: CMP.NE [Source: macros.inc]
     1 51A5 C9 20				CMP	#SPC
     2 51A7 D0 0B				BNE	SH_RUN1
Source: boot_sys_sh.asm
   944 51A9					MVAY	3 EXT_COM FILENAME+8	; copy .COM extension to FILENAME
Macro: MVAY [Source: macros.inc]
     1 51A9 A0 02			LDY	#3-1
     2 51AB B9 56 54 99 18 4A + lp	MVA	EXT_COM,Y FILENAME+8,Y-
     3 51B2 10 F7			BPL	lp
Source: boot_sys_sh.asm
   945
   946 						; Check for .COM file
   947 51B4 A0 02		SH_RUN1         LDY     #$02
   948 51B6 B9 56 54		CMP_EXT_COM     LDA     EXT_COM,Y           	; check if COM file
   949 51B9					CMP.NE	FILENAME+8,Y CHK_BASF	; Not a .COM file, check .BAS file next
Macro: CMP.NE [Source: macros.inc]
     1 51B9 D9 18 4A				CMP	FILENAME+8,Y
     2 51BC D0 0A				BNE	CHK_BASF
Source: boot_sys_sh.asm
   950 51BE			                DEY.PL	CMP_EXT_COM	    	; branch if not done yet
Macro: DEY.PL [Source: macros.inc]
     1 51BE 88					DEY
     2 51BF 10 F5				BPL	CMP_EXT_COM
Source: boot_sys_sh.asm
   951 				                
   952 51C1 A9 01 8D 49 44			MVA	#1 FTYPE	    	; 1 = .COM file
   953 51C6 D0 26				BNE	SH_RUN_FF	    	; branch always, check if file exists
   954
   955 51C8 A0 02		CHK_BASF	LDY     #$02
   956 51CA B9 5C 54		CMP_EXT_BAS     LDA     EXT_BAS,Y           	; check if .BAS file
   957 51CD			                CMP.NE  FILENAME+8,Y CHK_EXEF	; Not a .BAS file, check .EXE file next
Macro: CMP.NE [Source: macros.inc]
     1 51CD D9 18 4A				CMP	FILENAME+8,Y
     2 51D0 D0 0A				BNE	CHK_EXEF
Source: boot_sys_sh.asm
   958 51D2			                DEY.PL  CMP_EXT_BAS	    	; branch if not done yet
Macro: DEY.PL [Source: macros.inc]
     1 51D2 88					DEY
     2 51D3 10 F5				BPL	CMP_EXT_BAS
Source: boot_sys_sh.asm
   959 				                
   960 51D5 A9 00 8D 49 44			MVA	#0 FTYPE	    	; 0 = .BAS file
   961 51DA F0 12				BEQ	SH_RUN_FF	    	; branch always, check if file exists
   962
   963 51DC A0 02		CHK_EXEF	LDY     #$02
   964 51DE B9 59 54		CMP_EXT_EXE     LDA     EXT_EXE,Y           	; check if .EXE file
   965 51E1			                CMP.NE  FILENAME+8,Y SH_RUN_END	; all 3 extensions do not exist
Macro: CMP.NE [Source: macros.inc]
     1 51E1 D9 18 4A				CMP	FILENAME+8,Y
     2 51E4 D0 22				BNE	SH_RUN_END
Source: boot_sys_sh.asm
   966 51E6			                DEY.PL	CMP_EXT_EXE	    	; branch if not done yet
Macro: DEY.PL [Source: macros.inc]
     1 51E6 88					DEY
     2 51E7 10 F5				BPL	CMP_EXT_EXE
Source: boot_sys_sh.asm
   967 				                
   968 51E9 A9 02 8D 49 44			MVA	#2 FTYPE	    	; 2 = .EXE file
   969 51EE 20 ED 46		SH_RUN_FF       JSR     OS_FIND_FILE        	; check if file with this extension exists
   970 51F1 B0 12		                BCS     SH_RUN3             	; yes, load file
   971
   972 51F3 20 0B 52		                JSR     SH_SET_SYS_DIR      	; no, search in system directory
   973 51F6 90 05		                BCC     SH_RUN_ERR          	; system directory does not exist
   974
   975 51F8 20 ED 46		SH_RUN2         JSR     OS_FIND_FILE	    	; find file with this extension in root-dir
   976 51FB B0 08		                BCS     SH_RUN3		    	; branch if found
   977
   978 51FD 20 5A E0		SH_RUN_ERR      JSR     CROUT		    	; print CR
   979 5200 20 3F 52		                JSR     SH_FILE_ERR         	; file does not exist
   980 5203 90 03		                BCC     SH_RUN_END	    	; branch always
   981
   982 5205 20 5C 44		SH_RUN3         JSR     OS_LOAD_FILE	    	; Load .bas file or load/run .com/.exe file
   983 5208 4C 2D 4E		SH_RUN_END      JMP     LOAD_ACT_DIR        	; restore actual directory LBA and return
   984 				                
   985 				; **** Set System Directory ****************************************************
   986 				; Output: C = 0 - Error
   987 				; ******************************************************************************
   988 520B A2 0A		SH_SET_SYS_DIR  LDX     #10
   989 520D BD 10 4A 9D 4B 54	SAVE_NAME       MVA	FILENAME,X   NAME_SAVE,X	; NAME_SAVE = FILENAME
   990 5213 BD 40 54 9D 10 4A + 		MVA	SYSTEM_DIR,X FILENAME,X-	; FILENAME = SYSTEM_DIR
   991 521A 10 F1		                BPL     SAVE_NAME			; branch if not done
   992
   993 521C 20 C4 47		                JSR     OS_SET_ROOT_DIR
   994 521F					LDXYI	CB_FIND_SUBDIR
Macro: LDXYI [Source: macros.inc]
     1 521F A2 4D			LDX	<CB_FIND_SUBDIR				; MADS makes this immediate
     2 5221 A0 49			LDY	>CB_FIND_SUBDIR
Source: boot_sys_sh.asm
   995 5223 20 F5 46		                JSR     OS_FIND             		; find subdirectory
   996 5226 90 0C		                BCC     SH_SYS_DIR_END
   997
   998 5228			                MVAX	11 NAME_SAVE FILENAME		; FILENAME = NAME_SAVE
Macro: MVAX [Source: macros.inc]
     1 5228 A2 0A			LDX	#11-1
     2 522A BD 4B 54 9D 10 4A + lp	MVA	NAME_SAVE,X FILENAME,X-
     3 5231 10 F7			BPL	lp
Source: boot_sys_sh.asm
   999 5233 38			                SEC
  1000 5234 60			SH_SYS_DIR_END  RTS
  1001
  1002 				; **** Monitor call-back Routine ************************************************
  1003 5235			SH_MONITOR      PRSTR   MSG_MONITOR
Macro: PRSTR [Source: macros.inc]
     1 5235 A2 17			LDX	<MSG_MONITOR				; MADS makes this immediate
     2 5237 A0 54			LDY	>MSG_MONITOR
Source: boot_sys_sh.asm
     2 5239 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
  1004 523C 4C 03 E0		                JMP     MON_WARM_START
  1005 				                
  1006 				.macro	PR_ERR	msg
  1007 						LDXYI	:msg
  1008 						JMP	OS_PRINT_ERR
  1009 				.endm
  1010 				; **** Error Routines **********************************************************
  1011 523F			SH_FILE_ERR     PR_ERR	MSG_FILE_ERR		; 'File not Found' error message
Macro: PR_ERR [Source: boot_sys_sh.asm]
     1 523F A2 A6			LDX	<MSG_FILE_ERR				; MADS makes this immediate
     2 5241 A0 53			LDY	>MSG_FILE_ERR
Source: boot_sys_sh.asm
     2 5243 4C 48 48				JMP	OS_PRINT_ERR
Source: boot_sys_sh.asm
  1012 5246			SH_PATH_ERR     PR_ERR  MSG_PATH_ERR  		; 'Path not Found' error message
Macro: PR_ERR [Source: boot_sys_sh.asm]
     1 5246 A2 B6			LDX	<MSG_PATH_ERR				; MADS makes this immediate
     2 5248 A0 53			LDY	>MSG_PATH_ERR
Source: boot_sys_sh.asm
     2 524A 4C 48 48				JMP	OS_PRINT_ERR
Source: boot_sys_sh.asm
  1013 524D			SH_DIR_ERR      PR_ERR  MSG_DIR_ERR  		; 'Invalid Directory' error message
Macro: PR_ERR [Source: boot_sys_sh.asm]
     1 524D A2 E9			LDX	<MSG_DIR_ERR				; MADS makes this immediate
     2 524F A0 53			LDY	>MSG_DIR_ERR
Source: boot_sys_sh.asm
     2 5251 4C 48 48				JMP	OS_PRINT_ERR
Source: boot_sys_sh.asm
  1014 5254			SH_NAME_ERR     PR_ERR  MSG_NAME_ERR  		; 'Invalid Filename' error message...
Macro: PR_ERR [Source: boot_sys_sh.asm]
     1 5254 A2 D7			LDX	<MSG_NAME_ERR				; MADS makes this immediate
     2 5256 A0 53			LDY	>MSG_NAME_ERR
Source: boot_sys_sh.asm
     2 5258 4C 48 48				JMP	OS_PRINT_ERR
Source: boot_sys_sh.asm
  1015 525B			SH_D_EXIST_ERR  PR_ERR  MSG_D_EXIST_ERR 	; 'Directory already exists' error message...
Macro: PR_ERR [Source: boot_sys_sh.asm]
     1 525B A2 FC			LDX	<MSG_D_EXIST_ERR				; MADS makes this immediate
     2 525D A0 53			LDY	>MSG_D_EXIST_ERR
Source: boot_sys_sh.asm
     2 525F 4C 48 48				JMP	OS_PRINT_ERR
Source: boot_sys_sh.asm
  1016 5262			SH_WRITE_ERR    PR_ERR  MSG_WRITE_ERR 		; 'Write error' message
Macro: PR_ERR [Source: boot_sys_sh.asm]
     1 5262 A2 25			LDX	<MSG_WRITE_ERR				; MADS makes this immediate
     2 5264 A0 54			LDY	>MSG_WRITE_ERR
Source: boot_sys_sh.asm
     2 5266 4C 48 48				JMP	OS_PRINT_ERR
Source: boot_sys_sh.asm
  1017 				                
  1018 				; Inits BLKBUF to SIS_BUFF **************************************
  1019 				; Prepare for DEV_RD_LBLK and DEV_WR_LBLK routines
  1020 				; ***************************************************************
  1021 5269 A9 00 85 DC A9 55 + INIT_SIS_BUF	MWA	#SIS_BUFF BLKBUF	; macro BLKBUF = SIS_BUF
  1022 5271 60					RTS
  1023
  1024 				;-------------------------------------------------------------------------------
  1025 				; Convert #Clusters to KB in FREE_KB
  1026 				; D_SECT_PER_CLST = 1: 2 CL =  2 SEC = 1 KB: SHR 1
  1027 				;                   2: 2 CL =  4 SEC = 2 KB: -
  1028 				;		    4: 2 CL =  8 SEC = 4 KB: SHL 1
  1029 				;		    8: 2 CL = 16 SEC = 8 KB: SHL 2 etcetera
  1030 				;-------------------------------------------------------------------------------
  1031 5272 AD 0B 04		CL2KB		LDA	D_SECT_PER_CLST			; #sectors per cluster
  1032 5275					CMP.EQ	#2 CL2KB_X			; 2 sec/cl, just exit
Macro: CMP.EQ [Source: macros.inc]
     1 5275 C9 02				CMP	#2
     2 5277 F0 22				BEQ	CL2KB_X
Source: boot_sys_sh.asm
  1033 5279					CMP.EQ	#1 CL2KB_1			; 1 sec/cl, SHR 1
Macro: CMP.EQ [Source: macros.inc]
     1 5279 C9 01				CMP	#1
     2 527B F0 12				BEQ	CL2KB_1
Source: boot_sys_sh.asm
  1034 527D 4A 4A			:2	LSR					; init nr of shifts		
  1035 527F			CL2KB_SHL	ASL32	FREE_KB				; SHL 1 of FREE_KB
Macro: ASL32 [Source: macros.inc]
     1 527F 0E 13 53			ASL     FREE_KB		  		; SHL with C=0
     2 5282 2E 14 53		        ROL     FREE_KB+1		  
     3 5285 2E 15 53		        ROL     FREE_KB+2
     4 5288 2E 16 53		        ROL     FREE_KB+3		  
Source: boot_sys_sh.asm
  1036 528B 4A					LSR
  1037 528C D0 F1				BNE	CL2KB_SHL			; branch if not done with shifting
  1038 528E 60					RTS					; return
  1039 						
  1040 528F			CL2KB_1		LSR32	FREE_KB				; SHR 1 of FREE_KB
Macro: LSR32 [Source: macros.inc]
     1 528F 4E 16 53			LSR     FREE_KB+3		  		; SHR with C=0
     2 5292 6E 15 53		        ROR     FREE_KB+2
     3 5295 6E 14 53		        ROR     FREE_KB+1
     4 5298 6E 13 53		        ROR     FREE_KB
Source: boot_sys_sh.asm
  1041 529B 60			CL2KB_X		RTS					; return
  1042 						
  1043 				; Get Info from System Information Sector **************************************
  1044 529C 20 69 52		GET_SIS		JSR	INIT_SIS_BUF			; Init SIS Buffer for CMD_READ command
  1045 529F					LDXYI	D_PART_START			; macro Ptr(X,Y) = D_PART_START
Macro: LDXYI [Source: macros.inc]
     1 529F A2 00			LDX	<D_PART_START				; MADS makes this immediate
     2 52A1 A0 04			LDY	>D_PART_START
Source: boot_sys_sh.asm
  1046 52A3 20 4B 41				JSR 	DEV_RD_LBLK           		; Read Volume ID again
  1047 52A6					MVAX	4 D_PART_START SYS_INFO_LBA	; SYS_INFO_LBA = D_PART_START
Macro: MVAX [Source: macros.inc]
     1 52A6 A2 03			LDX	#4-1
     2 52A8 BD 00 04 9D 0F 53 + lp	MVA	D_PART_START,X SYS_INFO_LBA,X-
     3 52AF 10 F7			BPL	lp
Source: boot_sys_sh.asm
  1048 52B1 18 AD 0F 53 6D 30 + 		ADW	SYS_INFO_LBA SIS_OFFSET		; SYS_INFO_LBA = D_PART_START + *SIS_OFFSET
  1049 52C4 AD 11 53				LDA	SYS_INFO_LBA+2			; update high word of SYS_INFO_LBA
  1050 52C7 69 00				ADC	#0
  1051 52C9 8D 11 53				STA	SYS_INFO_LBA+2
  1052 52CC AD 12 53				LDA	SYS_INFO_LBA+3
  1053 52CF 69 00				ADC	#0
  1054 52D1 8D 12 53				STA	SYS_INFO_LBA+3
  1055 						
  1056 				;		PRSTR	TXT_SYS_INFO			; print SYS_INFO_LBA
  1057 				;		PRHEX32	SYS_INFO_LBA			; print SYS_INFO_LBA as 32 bit hex number
  1058
  1059 52D4 20 69 52				JSR	INIT_SIS_BUF			; Init SIS Buffer for CMD_READ command
  1060 52D7					LDXYI	SYS_INFO_LBA			; Read Sys. Info. Sector into SIS-buffer
Macro: LDXYI [Source: macros.inc]
     1 52D7 A2 0F			LDX	<SYS_INFO_LBA				; MADS makes this immediate
     2 52D9 A0 53			LDY	>SYS_INFO_LBA
Source: boot_sys_sh.asm
  1061 52DB 20 4B 41				JSR 	DEV_RD_LBLK           		; Read SIS sector
  1062 52DE					PRSTR	TXT_FFREE_CLST			; print 'First Free Cluster:$'
Macro: PRSTR [Source: macros.inc]
     1 52DE A2 17			LDX	<TXT_FFREE_CLST				; MADS makes this immediate
     2 52E0 A0 53			LDY	>TXT_FFREE_CLST
Source: boot_sys_sh.asm
     2 52E2 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
  1063 52E5					PRHEX32	SIS_BUFF+$01EC
Macro: PRHEX32 [Source: macros.inc]
     1 52E5 AD EF 56			LDA	SIS_BUFF+$01EC+2+1				; print MSB
     2 52E8 20 91 E0			JSR	HEXOUT
     3 52EB AD EE 56			LDA	SIS_BUFF+$01EC+2
     4 52EE 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_sh.asm
     1 52F1 AD ED 56			LDA	SIS_BUFF+$01EC+1				; print MSB
     2 52F4 20 91 E0			JSR	HEXOUT
     3 52F7 AD EC 56			LDA	SIS_BUFF+$01EC
     4 52FA 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_sh.asm
Source: boot_sys_sh.asm
  1064 52FD 20 5A E0				JSR	CROUT
  1065 5300					MVAX	4 SIS_BUFF+$01E8 FREE_KB	
Macro: MVAX [Source: macros.inc]
     1 5300 A2 03			LDX	#4-1
     2 5302 BD E8 56 9D 13 53 + lp	MVA	SIS_BUFF+$01E8,X FREE_KB,X-
     3 5309 10 F7			BPL	lp
Source: boot_sys_sh.asm
  1066 530B 20 72 52				JSR	CL2KB				; Convert #clusters to KB and store in FREE_KB
  1067 530E 60					RTS
  1068 						
  1069 530F 00 00 00 00		SYS_INFO_LBA	.dword	$00000000
  1070 5313 00 00 00 00		FREE_KB		.dword	$00000000
  1071 				;TXT_SYS_INFO	.by	'SYS_INFO_LBA:$' $00
  1072 5317 46 69 72 73 74 20 + TXT_FFREE_CLST	.by	'First free cluster:$' $00
  1073 532C 20 4B 42 20 66 72 + TXT_KB		.by	' KB free' CR $00
  1074
  1075 5336 20 69 52		WRITE_SIS	JSR	INIT_SIS_BUF			; Init SIS Buffer for CMD_READ command
  1076 5339					LDXYI	SYS_INFO_LBA 			; Sys. Info. Sector LBA
Macro: LDXYI [Source: macros.inc]
     1 5339 A2 0F			LDX	<SYS_INFO_LBA				; MADS makes this immediate
     2 533B A0 53			LDY	>SYS_INFO_LBA
Source: boot_sys_sh.asm
  1077 533D 4C 1D 42				JMP 	DEV_WR_LBLK           		; Write SIS to disk and return
  1078
  1079 				; **** Data Area ***************************************************************
  1080 				; ******************************************************************************
  1081
  1082 				; String Data Area *************************************************************
  1083 5340 50 72 65 73 73 20 + MSG_PAUSE       .by    'Press any key...' $00
  1084 5351 56 6F 6C 75 6D 65 + MSG_LABEL       .by    'Volume in drive ' $00
  1085 5362 20 69 73 20 00	MSG_LABEL2      .by    ' is ' $00
  1086 5367 20 20 20 20 20 20 + MSG_DIR_ENTRY   .by    '          <DIR>' $00
  1087 5377 20 46 69 6C 65 28 + MSG_FILE_COUNT  .by    ' File(s)  ' $00
  1088 5382 20 44 69 72 28 73 + MSG_DIR_COUNT   .by    ' Dir(s)   ' $00
  1089 538D 20 62 79 74 65 73 + MSG_BYTE_USED   .by    ' bytes' CR $00
  1090 5395 44 72 69 76 65 20 + MSG_DRIVE_ERR   .by    'Drive not found' CR $00
  1091 53A6 46 69 6C 65 20 6E + MSG_FILE_ERR    .by    'File not found' CR $00
  1092 53B6 50 61 74 68 20 6E + MSG_PATH_ERR    .by    'Path not found' CR $00
  1093 53C6 55 6E 6B 6E 6F 77 + MSG_PARAM_ERR   .by    'Unknown option ' OPT_SEP $00
  1094 53D7 49 6E 76 61 6C 69 + MSG_NAME_ERR    .by    'Invalid filename' CR $00
  1095 53E9 49 6E 76 61 6C 69 + MSG_DIR_ERR     .by    'Invalid directory' CR $00
  1096 53FC 0D 44 69 72 65 63 + MSG_D_EXIST_ERR .by    CR 'Directory already exists' CR $00
  1097 5417 0D 48 65 78 20 4D + MSG_MONITOR     .by    CR 'Hex Monitor' CR $00
  1098 5425 0D 57 72 69 74 65 + MSG_WRITE_ERR   .by    CR 'Write Error' CR $00
  1099
  1100 				; ############################################
  1101 5433 52 48 53 00 00 41 + ATTRIB_VAL      .byte      82, 72, 83, 0, 0, 65, 0, 0
  1102 543B 00 00 00 00 00	BCD_VAL         .byte      $00, $00, $00, $00, $00
  1103 5440 53 59 53 54 45 4D + SYSTEM_DIR      .by    'SYSTEM     '
  1104 544B 2E 2E 2E 2E 2E 2E + NAME_SAVE       .by    '...........'
  1105 5456 43 4F 4D		EXT_COM         .by    'COM'
  1106 5459 45 58 45		EXT_EXE		.by    'EXE'
  1107 545C 42 41 53		EXT_BAS		.by    'BAS'
  1108 				                
  1109 				; Command Table ****************************************************************
  1110 545F 42 7B 54		CHARS		dta	'B' , a(CMD_BASIC)		; byte, word
  1111 5462 43 90 54				dta	'C' , a(CMD_CD)		
  1112 5465 44 9A 54				dta	'D' , a(CMD_DIR)		
  1113 5468 45 A5 54				dta	'E' , a(CMD_ECHO)		
  1114 546B 47 AC 54				dta	'G' , a(CMD_GOTO)		
  1115 546E 49 B3 54				dta	'I' , a(CMD_IF)		
  1116 5471 4D B8 54				dta	'M' , a(CMD_MKDIR)		
  1117 5474 50 C5 54				dta	'P' , a(CMD_PAUSE)		
  1118 5477 52 CD 54				dta	'R' , a(CMD_REM)		
  1119 547A 00					.byte 	$00
  1120
  1121 547B 05 41 53 49 43 6E + CMD_BASIC	dta	5, c'ASIC', a(SH_BASIC)		; byte, string, word, EOT
  1122 5482 05 4C 4F 41 44 92 + CMD_BLOAD	dta	5, c'LOAD', a(SH_BLOAD)		; 
  1123 5489 04 52 55 4E 7D 51 + CMD_BRUN	dta	4, c'RUN' , a(SH_BRUN)   , $00	; 
  1124 5490 02 44 DD 50		CMD_CD		dta	2, c'D'   , a(SH_CD) 		; 
  1125 5494 03 4C 53 3A 51 00	CMD_CLS		dta	3, c'LS'  , a(SH_CLS)    , $00	; 
  1126 549A 03 49 52 C1 4E	CMD_DIR		dta	3, c'IR'  , a(SH_DIR) 		; 
  1127 549F 03 45 4C 24 51 00	CMD_DEL		dta	3, c'EL'  , a(SH_DEL)    , $00	; 
  1128 54A5 04 43 48 4F 4D 51 + CMD_ECHO	dta	4, c'CHO' , a(SH_ECHO)   , $00	; 
  1129 54AC 04 4F 54 4F 5C 51 + CMD_GOTO	dta	4, c'OTO' , a(SH_GOTO)   , $00	; 
  1130 54B3 02 46 5D 51 00	CMD_IF		dta	2, c'F'   , a(SH_IF)     , $00	; 
  1131 54B8 05 4B 44 49 52 46 + CMD_MKDIR	dta	5, c'KDIR', a(SH_MKDIR)		; 
  1132 54BF 03 4F 4E 35 52 00	CMD_MON		dta	3, c'ON'  , a(SH_MONITOR), $00	; 
  1133 54C5 05 41 55 53 45 3D + CMD_PAUSE	dta	5, c'AUSE', a(SH_PAUSE)  , $00	; 
  1134 54CD 03 45 4D 5E 51 00	CMD_REM		dta	3, c'EM'  , a(SH_REM)    , $00	; 
    80 				                
    81 				; End Of Program Marker ********************************************************
    82 54D3 00			BOOT_SYS_END    BRK
    83 54D4					ORG ((*/256)+1)*256		; next free page
    84 = 5500			SIS_BUFF	.ds 	512			; SIS Buffer 
    85 = 5700			FILE_BUFF	.ds	512			; .exe file buffer
    86 						END
