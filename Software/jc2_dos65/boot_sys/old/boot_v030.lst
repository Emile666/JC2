mads 2.1.7 build 33 (1 Aug 24)
Source: bootcf.asm
     1 				; ******************************************************************************
     2 				; The Disk Operating System for 6502 Microprocessors
     3 				;
     4 				; JC2 DOS65, Version 0.3.0 by Emile, original design (V0.2.0) by Joerg Walke
     5 				;
     6 				; Developed for the Junior Computer ][
     7 				;
     8 				; First implementation 6.7.2023, updated 20.06.2024, by Joerg Walke
     9 				; Assembled with A65, Converted to MADS by Emile
    10 				;
    11 				; DOS65 is primarily a small Disk Operation System (DOS) based on the FAT
    12 				; filesystem. This version is for the CF-IDE interface with FAT32 only.
    13 				; A CF-Card can be partitioned with up to four primary partitions.
    14 				; Using the MKBOOTCF program you can write the needed Partition Boot Block and
    15 				; the Master Boot Record which then holds a menu program to select one of the
    16 				; available partitions for booting.
    17 				;
    18 				; This code is freely available under the Creative Commons Attribution 4.0
    19 				; International license, see https://creativecommons.org/licenses/by/4.0/
    20 				; ******************************************************************************
    21
    22 = 0030			VERMAIN   	EQU     '0'    		; main version
    23 = 0033			VERPSUB    	EQU     '3'    		; primary sub version
    24 = 0030			VERSSUB		EQU	'0'		; secondary sub version
    25
    26 				; List Of Changes **************************************************************
    27 				; V0.2.1: 11-04-25 Emile boot.asm renamed in bootcf.asm and adapted for CF-IDE interface.
    28 				; V0.2.2: 19-05-25 ZP-vars reorganised, too much overlap with BIOS
    29 				; V0.2.3: - OS_LOAD_COM renamed in OS_LOAD_FILE, now loads .bas, .com and .exe files
    30 				;         - Macro's added, start of code-reorganisation.
    31 				;	  - File (3350 lines) split in separate smaller files.
    32 				; V0.2.4: - .BAS LOAD file now works, filename bug-fix and NUM32 bug-fix
    33 				;	  - Bug-fix MKDIR run after DIR command
    34 				;	  - SIS added + total KB printed with DIR command
    35 				; V0.2.5: - DEL command added.
    36 				; V0.2.6: - SAVE from BASIC added, CFC_SAVE, OS_CREATE, OS_CREATE_FILE changed,
    37 				;           OS_SAVE_FILE and LINK_FAT_ENTRY added.
    38 				;         - VER command added.
    39 				;         - Bug-fixes OS_LOAD_FILE when 1) #clusters = 1 2) sectors/cluster = 1
    40 				; V0.2.7: Couple of bug-fixes with path-name string and CD command.
    41 				; V0.2.8: Enabling RAM-BANK 4 for BASIC and RAM-BANK 0 for DOS. Now Basic programs
    42 				;         can load all the way up to $AFFF.
    43 				; V0.2.9: BASIC related DOS functions are now copied into Monitor RAM area.
    44 				; V0.3.0: - Improved CF-card error-checking & handling
    45 				;         - Volume-label added for root-dir
    46 				;         - CF device-driver routines now in Monitor RAM
    47 				; ******************************************************************************
    48 						OPT h- ; do not add file header
    49 						OPT f+ ; save as single block
    50
    51 				;------------------------------------------------------------------------------------------------
    52 				; TERMINOLOGY AND FORMULAS USED:
    53 				; 
    54 				; Sector                : A sector consists of 512 bytes.
    55 				; Cluster               : Consists of one or more sectors as defined by D_SECT_PER_CLST.
    56 				;                         This is a 24-bit number relative to the cluster_begin_lba number.
    57 				; LBA                   : Logical Block Address, a 32-bit address for a sector on the CF/SD-card.
    58 				; Cluster_nr            : number of a cluster relative to the cluster_begin_lba Number
    59 				; root_dir_1st_cluster  : the 1st cluster in a partition, contains the root directory
    60 				; 
    61 				; fat_begin_lba         : D_START_FAT1 = partition_lba_begin + nr_of_reserved_sectors
    62 				; cluster_begin_lba     : D_START_CLS_LBA = fat_begin_lba + (number_of_FATs * Sectors_per_FAT)
    63 				; Sectors_per_Cluster   : D_SECT_PER_CLST (written by bootcode.fat32 during boot)
    64 				; root_dir_first_cluster: D_START_DIR, this is usually 2
    65 				; lba_addr = cluster_begin_lba + (cluster_nr - 2) * sectors_per_cluster
    66 				;------------------------------------------------------------------------------------------------
    67 						ICL "macros.inc"		; boot.sys macro definitions for MADS
Source: macros.inc
     1 				;-------------------------------------------------
     2 				; Macro-definitions for BOOT.SYS file.
     3 				; Assembler: MADS-Assembler
     4 				; V0.1: 22-05-25, Emile first version
     5 				;-------------------------------------------------
     6
     7 				.macro	PRHEX16	b16				; Print WORD (16-bit) as 2 hex-bytes
     8 					LDA	:b16+1				; print MSB
     9 					JSR	HEXOUT
    10 					LDA	:b16
    11 					JSR	HEXOUT				; print LSB
    12 				.endm
    13
    14 				.macro	PRHEX32	b32				; Print DWORD (32-bit) as 4 hex-bytes
    15 					PRHEX16	:b32+2				; Print MSB word first
    16 					PRHEX16	:b32				; Print LSB word
    17 				.endm
    18
    19 				.macro	LDXYI	b16
    20 					LDX	<:b16				; MADS makes this immediate
    21 					LDY	>:b16
    22 				.endm
    23
    24 				.macro	LDXY	b16				; Load [X,Y] Pointer
    25 					LDX	:b16
    26 					LDY	:b16+1
    27 				.endm
    28
    29 				.macro	STXY	b16				; Store [X,Y] Pointer
    30 					STX	:b16
    31 					STY	:b16+1
    32 				.endm
    33
    34 				.macro	PRSTR	str				; Print String
    35 					LDXYI	:str
    36 					JSR	OS_STRING_OUT
    37 				.endm
    38
    39 				.macro	PRCH	ch				; Print single character
    40 					LDA	#:ch
    41 					JSR	COUT
    42 				.endm
    43 					
    44 				.macro	ASL32	b32				; ASL of 32-bit DWORD
    45 					ASL     :b32		  		; SHL with C=0
    46 				        ROL     :b32+1		  
    47 				        ROL     :b32+2
    48 				        ROL     :b32+3		  
    49 				.endm
    50
    51 				.macro	LSR32	b32				; LSR of 32-bit DWORD
    52 					LSR     :b32+3		  		; SHR with C=0
    53 				        ROR     :b32+2
    54 				        ROR     :b32+1
    55 				        ROR     :b32
    56 				.endm
    57
    58 				.macro	LSR16	b16				; LSR of 16-bit WORD
    59 					LSR	:b16+1
    60 					ROR	:b16
    61 				.endm
    62
    63 				.macro	PHW	b16				; Push WORD onto stack
    64 					LDA	:b16
    65 					PHA
    66 					LDA	:b16+1
    67 					PHA
    68 				.endm
    69
    70 				.macro	PLW	b16				; Pull WORD from stack
    71 					PLA
    72 					STA	:b16+1
    73 					PLA
    74 					STA	:b16
    75 				.endm
    76
    77 				.macro	PHY					; Push Y-register
    78 					TYA
    79 					PHA
    80 				.endm
    81
    82 				.macro	PLY					; Pull Y-register
    83 					PLA
    84 					TAY
    85 				.endm
    86
    87 				.macro	PHX					; Push X-register
    88 					TXA
    89 					PHA
    90 				.endm
    91
    92 				.macro	PLX					; Pull X-register
    93 					PLA
    94 					TAX
    95 				.endm
    96
    97 				.macro	MVAX	n src dst			; Move n bytes from SRC to DST using X as index
    98 					LDX	#:n-1
    99 				lp	MVA	:src,X :dst,X-
   100 					BPL	lp
   101 				.endm
   102 					
   103 				.macro	MVAY	n src dst			; Move n bytes from SRC to DST using Y as index
   104 					LDY	#:n-1
   105 				lp	MVA	:src,Y :dst,Y-
   106 					BPL	lp
   107 				.endm
   108
   109 				; Macros used for printing a cluster nr, which consists of 2 words
   110 				.macro	PRCLB	c st				; This prints a byte and optionally saves it
   111 						LDA	(:c),Y
   112 					ift :0>1	; st also given?
   113 						STA	:st
   114 					eif	
   115 						JSR	HEXOUT			; changes Y!
   116 				.endm		
   117
   118 				.macro	PRCLW	indx	curr_dir stor		; Print a word of a cluster nr and save it (optional)
   119 						LDY	#:indx+1		; Print MSB of word
   120 					ift :0>2	; stor also given?	
   121 						PRCLB	:curr_dir :stor+1
   122 					els	
   123 						PRCLB	:curr_dir
   124 					eif
   125 						LDY	#:indx			; Print LSB of word
   126 					ift :0>2	; stor also given?	
   127 						PRCLB	:curr_dir :stor
   128 					els	
   129 						PRCLB	:curr_dir
   130 					eif
   131 				.endm
   132
   133 				BTST	.macro ' '	b1 b2 lbl1		; Bit test (7-0) combined with branch if equal
   134 					ift :b2>7
   135 						ERT "Only bits 7-0 allowed"
   136 					els
   137 						LDA	:b1
   138 						AND	#(1 << :b2)
   139 						BEQ	:lbl1
   140 					eif
   141 				.endm
   142 					
   143 				; ----------------------------------------------
   144 				; Compare + Branch Macros
   145 				; ----------------------------------------------
   146 				CMP.EQ	.macro ' '	b1 lbl			; Compare A with b1 and branch if equal
   147 						CMP	:b1
   148 						BEQ	:lbl
   149 				.endm		; A is now not equal to b1
   150 					
   151 				CMP.NE	.macro ' '	b1 lbl			; Compare A with b1 and branch if not equal
   152 						CMP	:b1
   153 						BNE	:lbl
   154 				.endm		; A is now equal to b1
   155
   156 					; Compare A with b1 and branch if Carry is 0 (A-b1 < 0)
   157 				CMP.CC	.macro ' '	b1 lbl
   158 						CMP	:b1			; 
   159 						BCC	:lbl			; branch if C=0 (A-b1 < 0)
   160 				.endm		; C is now 1 (A-b1 is >= 0)
   161
   162 					; Compare A with b1 and branch if Carry is 1 (A-b1 >= 0)
   163 				CMP.CS	.macro ' '	b1 lbl
   164 						CMP	:b1			; 
   165 						BCS	:lbl			; branch if C=1 (A-b1 >= 0)
   166 				.endm		; C is now 0 (A-b1 is < 0)
   167
   168 				CPX.EQ	.macro ' '	b1 lbl			; Compare X with b1 and branch if equal
   169 						CPX	:b1
   170 						BEQ	:lbl
   171 				.endm		; X is now not equal to b1
   172 					
   173 				CPX.NE	.macro ' '	b1 lbl			; Compare X with b1 and branch if not equal
   174 						CPX	:b1
   175 						BNE	:lbl
   176 				.endm		; X is now equal to b1
   177
   178 					; Compare X with b1 and branch if Carry is 0 (A-b1 < 0)
   179 				CPX.CC	.macro ' '	b1 lbl
   180 						CPX	:b1			; 
   181 						BCC	:lbl			; branch if C=0 (X-b1 < 0)
   182 				.endm		; C is now 1 (X-b1 is >= 0)
   183
   184 					; Compare X with b1 and branch if Carry is 1 (X-b1 >= 0)
   185 				CPX.CS	.macro ' '	b1 lbl
   186 						CPX	:b1			; 
   187 						BCS	:lbl			; branch if C=1 (X-b1 >= 0)
   188 				.endm		; C is now 0 (X-b1 is < 0)
   189
   190 				CPY.EQ	.macro ' '	b1 lbl			; Compare Y with b1 and branch if equal
   191 						CPY	:b1
   192 						BEQ	:lbl
   193 				.endm		; Y is now not equal to b1
   194 					
   195 				CPY.NE	.macro ' '	b1 lbl			; Compare Y with b1 and branch if not equal
   196 						CPY	:b1
   197 						BNE	:lbl
   198 				.endm		; Y is now equal to b1
   199
   200 					; Compare Y with b1 and branch if Carry is 0 (Y-b1 < 0)
   201 				CPY.CC	.macro ' '	b1 lbl
   202 						CPY	:b1			; 
   203 						BCC	:lbl			; branch if C=0 (Y-b1 < 0)
   204 				.endm		; C is now 1 (Y-b1 is >= 0)
   205
   206 					; Compare Y with b1 and branch if Carry is 1 (Y-b1 >= 0)
   207 				CPY.CS	.macro ' '	b1 lbl
   208 						CPY	:b1			; 
   209 						BCS	:lbl			; branch if C=1 (Y-b1 >= 0)
   210 				.endm		; C is now 0 (Y-b1 is < 0)
   211
   212 				; ----------------------------------------------
   213 				; Increment/Decrement + Branch Macros
   214 				; ----------------------------------------------
   215 				DEC.EQ	.macro 	' '	b1 lbl			; DEC + BEQ
   216 						DEC	:b1
   217 						BEQ	:lbl
   218 				.endm
   219
   220 				DEC.NE	.macro 	' '	b1 lbl			; DEC + BNE
   221 						DEC	:b1
   222 						BNE	:lbl
   223 				.endm
   224
   225 				INC.EQ	.macro 	' '	b1 lbl			; INC + BEQ
   226 						INC	:b1
   227 						BEQ	:lbl
   228 				.endm
   229
   230 				INC.NE	.macro 	' '	b1 lbl			; INC + BNE
   231 						INC	:b1
   232 						BNE	:lbl
   233 				.endm
   234
   235 				; ----------------------------------------------
   236 				DEX.NE	.macro 	lbl				; DEX + BNE
   237 						DEX
   238 						BNE	:lbl
   239 				.endm
   240
   241 				DEX.EQ	.macro 	lbl				; DEX + BEQ
   242 						DEX
   243 						BEQ	:lbl
   244 				.endm
   245
   246 				DEX.PL	.macro 	lbl				; DEX + BPL 
   247 						DEX
   248 						BPL	:lbl
   249 				.endm
   250
   251 				DEX.MI	.macro 	lbl				; DEX + BMI
   252 						DEX
   253 						BMI	:lbl
   254 				.endm
   255
   256 				DEX.CC	.macro 	lbl				; DEX + BCC 
   257 						DEX
   258 						BCC	:lbl
   259 				.endm
   260
   261 				DEX.CS	.macro 	lbl				; DEX + BCS
   262 						DEX
   263 						BCS	:lbl
   264 				.endm
   265
   266 				; ----------------------------------------------
   267 				DEY.EQ	.macro 	lbl				; DEY + BEQ
   268 						DEY
   269 						BEQ	:lbl
   270 				.endm
   271
   272 				DEY.NE	.macro 	lbl				; DEY + BNE
   273 						DEY
   274 						BNE	:lbl
   275 				.endm
   276
   277 				DEY.PL	.macro 	lbl				; DEY + BPL 
   278 						DEY
   279 						BPL	:lbl
   280 				.endm
   281
   282 				DEY.MI	.macro 	lbl				; DEY + BMI
   283 						DEY
   284 						BMI	:lbl
   285 				.endm
   286
   287 				DEY.CC	.macro 	lbl				; DEY + BCC 
   288 						DEY
   289 						BCC	:lbl
   290 				.endm
   291
   292 				DEY.CS	.macro 	lbl				; DEY + BCS
   293 						DEY
   294 						BCS	:lbl
   295 				.endm
   296 				; ----------------------------------------------
   297
   298 				; ----------------------------------------------
   299 				; LOAD/STORE + Branch Macros
   300 				; ----------------------------------------------
   301 				LDA.EQ	.macro 	' '	b1 lbl			; LDA + BEQ
   302 						LDA	:b1
   303 						BEQ	:lbl
   304 				.endm
   305
   306 				LDA.NE	.macro 	' '	b1 lbl			; LDA + BNE
   307 						LDA	:b1
   308 						BNE	:lbl
   309 				.endm
   310
   311 				STA.EQ	.macro 	' '	b1 lbl			; STA + BEQ
   312 						STA	:b1
   313 						BEQ	:lbl
   314 				.endm
   315
   316 				STA.NE	.macro 	' '	b1 lbl			; STA + BNE
   317 						STA	:b1
   318 						BNE	:lbl
   319 				.endm
   320
   321 				; ----------------------------------------------
   322 				; AND/OR + Branch Macros
   323 				; ----------------------------------------------
   324 				AND.EQ	.macro 	' '	p1 p2 p3		; LDA + AND + BEQ
   325 					ift :0>2	; LDA + AND + BEQ	
   326 						LDA	:p1
   327 						AND	:p2
   328 						BEQ	:p3
   329 					els		; AND + BEQ
   330 						AND	:p1
   331 						BEQ	:p2
   332 					eif
   333 				.endm
   334
   335 				AND.NE	.macro 	' '	p1 p2 p3		; LDA + AND + BNE
   336 					ift :0>2	; LDA + AND + BNE	
   337 						LDA	:p1
   338 						AND	:p2
   339 						BNE	:p3
   340 					els		; AND + BNE
   341 						AND	:p1
   342 						BNE	:p2
   343 					eif
   344 				.endm
    68 						ICL "defines.inc"		; boot.sys defines
Source: defines.inc
     1 				;-------------------------------------------------
     2 				; Register Definitions for BOOT.SYS file.
     3 				; Assembler: MADS-Assembler
     4 				;-------------------------------------------------
     5
     6 				; Global Constants and Variables ***********************************************
     7 = 0000			LAB_WARM	= 	$00		; BASIC warm start entry point
     8 = 0001			Wrmjpl 		= 	LAB_WARM+1	; BASIC warm start vector jump low byte
     9 = 0002			Wrmjph 		= 	LAB_WARM+2	; BASIC warm start vector jump high byte
    10 = B000			LAB_COLD	=	$B000		; BASIC cold START
    11
    12 = 00A0			ZP_BASE         EQU     $A0		; Reserved for DOS and boot.sys
    13 = 00A0			CURR_CLUSTER    EQU     ZP_BASE         ; $A0..$A3 (32 bit) - current addressed cluster
    14 = 00A4			CURR_FAT_BLK    EQU     ZP_BASE+4       ; $A4..$A7 (32 bit) - current loaded FAT LBA
    15 = 00A8			CURR_DIR_ENTRY  EQU     ZP_BASE+8       ; $A8..$A9 (16 bit) - pointer to current addressed directory entry
    16 = 00AA			MASK            EQU     ZP_BASE+10	; $AA Mask for FAT table
    17 = 00AB			BCNT            EQU     ZP_BASE+11      ; $AB Block Counter
    18 = 00AC			NCNT            EQU     ZP_BASE+12	; $AC
    19 = 00AD			SCNT            EQU     ZP_BASE+13	; $AD Sector counter within a cluster
    20 = 00AE			RES             EQU     ZP_BASE+14	; $AE
    21
    22 = 0078			ssptr_l		EQU	$78		; BASIC filename pointer LSB
    23 = 0079			ssptr_h		EQU	$79		; BASIC filename pointer MSB
    24
    25 = 00C0			NUM32      	EQU   	$C0     	; low 32 bit number byte (moved from $F8)
    26 = 00C4			SUM32           EQU     $C4             ; low 32 bit number byte (moved from $FC)
    27 = 00CC			END_PTR		EQU	$CC		; CFC_LOAD destination pointer, also used by BIOS ROM checksum routine
    28 = 00D6			MSEC		EQU	$D6		; msec time-out counter
    29 = 00D8			SAVEX		EQU 	$D8		; Temp. save X register (same as BIOS)
    30 = 00D9			SAVEY		EQU	$D9		; Temp. save Y register (same as BIOS)
    31 = 00DC			BLKBUF		EQU	$DC
    32 = 00DC			BLKBUFL		EQU	$DC             ; Pointer to block buffer, same in BIOS
    33 = 00DD			BLKBUFH		EQU	$DD
    34
    35 = 00E8			STOL      	EQU   	$E8     	; Store address Low, same in BIOS
    36 = 00E9			STOH      	EQU   	$E9     	; Store address High
    37 = 00EA			PSTR            EQU     $EA		; 2-byte ACIA output pointer, same in BIOS
    38 = 00EE			PSAV            EQU     $EE             ; Saved Partition Number in ASCII, same in BIOS
    39
    40 = 00F8			DIG0      	EQU   	$F8     	; 10^0 digit, used by NUMOUT and DEC2STR
    41 = 00F9			DIG1	  	EQU   	$F9	 	; 10^1 digit, used by NUMOUT and DEC2STR
    42 = 00FA			DIG2      	EQU   	$FA     	; 10^2 digit, used by NUMOUT and DEC2STR
    43
    44 = 1400			STRBUF	  	EQU   	$1400    	; input string buffer at $1400 (same as BIOS)
    45
    46 = 1700			MMU		EQU	$1700		; ATF1504 Memory Management Unit (MMU) Register
    47
    48 = 1806			CF_LOAD_VEC	EQU	$1806		; 2-byte vector for CF-card LOAD vector
    49 = 1808			CF_SAVE_VEC	EQU	$1808		; 2-byte vector for CF-card SAVE vector
    50 = 180A			RETURN_VECT     EQU     $180A           ; return vector to monitor caller in V1.2.1 (was $0001 in V1.2.0)
    51
    52 = 1810			NEXTINDEX       EQU     $1810		; command index
    53 = 1811			TERM_CHAR       EQU     $1811
    54 = 1812			F_ATTRIBS       EQU     $1812
    55 = 1813			TERM_FLAG       EQU     $1813		; set/clear counter termination flag
    56 = 1814			LINE_CNT        EQU     $1814		; line-counter for DIR command
    57 = 1815			CURR_FILE_CNT   EQU     $1815      	; (16 bit) - total number of files in dir
    58 = 1817			CURR_DIR_CNT    EQU     $1817      	; (16 bit) - total number of directories in dir
    59 = 1819			CURR_USED_SIZE  EQU     $1819      	; (32 bit) - total number of bytes in dir
    60 = 181D			CURR_BLK_NUM    EQU     $181D      	; directory block counter
    61 = 181E			CURR_DRIVE      EQU     $181E      	; current selected drive
    62 = 181F			CURR_CMD_PARAM  EQU     $181F      	; current command parameter
    63 = 1820			FREE_CLUSTER    EQU     $1820           ; (32 bit) - last free cluster
    64 = 1824			CURR_DIR_BLK    EQU     $1824       	; (32 bit) - current directory LBA
    65 = 1828			DBG_PRINT	EQU	$1828		; 1 = Print debug info
    66
    67 = 1C00			FILE_BUFF	EQU	$1C00		; 512 byte file buffer for .exe/.com/.bas in Monitor RAM
    68
    69 				; External Routines ************************************************************
    70
    71 = E003			MON_WARM_START  EQU     $E003
    72
    73 = E00A			SWITCH_TO_ROM	EQU	$E00A			; Switch Basic to ROM Page ($B000-$DFFF)
    74 = E052			COUT            EQU     $E052
    75 = E05A			CROUT           EQU     $E05A
    76 = E05E			SPCOUT          EQU     $E05E
    77 = E047			CIN             EQU     $E047
    78 = E062			STRIN           EQU     $E062
    79 = E083			STROUT          EQU     $E083
    80 = E085			WRSTR           EQU     $E085
    81 = E091			HEXOUT          EQU     $E091
    82 = E09A			HEXDIG          EQU     $E09A
    83 = E0BD			DEC2STR         EQU     $E0BD
    84 = E0B5			CLRSCRN         EQU     $E0B5
    85 = E0BA			CMDDEV          EQU     $E0BA
    86 = E1AA			OPEN_DEVICE     EQU     $E1AA
    87 = E2DE			READTIME        EQU     $E2DE			; BIOS v1.2.1
    88 = E2E2			READDATE        EQU     $E2E2			; BIOS v1.2.1
    89 = E14D			DELAY		EQU	$E14D
    90 = F682			OS_STRING_OUT	EQU	$F682			; SPRINT in BIOS v1.2.1, but same routine
    91 = F68B			INIT_BLKBUF	EQU	$F68B
    92 = F8B5			CFWAIT		EQU	$F8B5
    93 = FC85			LOAD_LBA_CF	EQU	$FC85
    94 = FD53			SET_RAMBANK	EQU	$FD53			; BIOS v1.2.4
    95 = FD7D			MON2ROM		EQU	$FD7D			; Monitor to ROM
    96 = FD86			MON2RAM		EQU	$FD86			; Monitor to RAM, enable RAM behind it
    97
    98 				; Tables and Buffers ***********************************************************
    99 = 0200			DIR_BLK_BUF     EQU     $0200           	; Directory Block Buffer
   100 = 0200			DIR_BLK_BUFL    EQU     DIR_BLK_BUF     	; Lower page of directory buffer
   101 = 0300			DIR_BLK_BUFH    EQU     DIR_BLK_BUF+$100	; upper page of directory buffer
   102
   103 = 0400			CURR_VOLUME     EQU     $0400           	; Current Volume Descriptor
   104 = 0420			FILE_TABLE      EQU     CURR_VOLUME+$20  	; File Descriptor Table
   105 = 0500			MOUNT_TABLE     EQU     $0500           	; Table of mounted devices
   106 = 0600			FAT_BUF      	EQU     $0600           	; Data Block Buffer
   107
   108 = 5B30			SIS_OFFSET	EQU	SIS_BUFF+$30		; 2-bytes: System Information Sector Offset
   109
   110 = 2000			BAS_LOAD_ADDR	EQU	$2000			; .BAS Load-address
   111 = 3000			COM_RUN_ADDR	EQU	$3000			; .COM load- and run-address
   112
   113 				; Device IDs *******************************************************************
   114 = 0000			NULL_ID		EQU	$00             	; the NULL device
   115 = 0022			FDD1_ID         EQU     $22             	; Floppy drive 1 device ID
   116 = 0023			FDD2_ID         EQU     $23             	; Floppy drive 2 device ID
   117 = 0024			SDC_ID		EQU     $24             	; SD-Card device ID
   118 = 0025			HDD1_ID		EQU     $25             	; CF-Card device ID
   119
   120 				; FAT Types ********************************************************************
   121 = 0002			FAT12_Type      EQU     $02
   122 = 0001			FAT16_Type      EQU     $01
   123 = 0000			FAT32_Type      EQU     $00
   124
   125 				; Device Driver Commands *******************************************************
   126 = 0022			CMD_READ	EQU	34              	; Read data block from device
   127 = 0023			CMD_WRITE	EQU	35              	; Write data block to device
   128 = 0025			CMD_READ_BUF	EQU	37              	; Read data block from device to standard buffer
   129 = 0026			CMD_WRITE_BUF	EQU	38              	; Write data block to device from standard buffer
   130
   131 				; Miscellaneous Constants ******************************************************
   132 = 000D			CR              EQU     $0D             	; Carriage Return ASCII Code
   133 = 0020			SPC             EQU     $20             	; Space ASCII Code
   134 = 005C			BSLASH          EQU     '\'             	; Backslash ASCII Code
   135 = 002F			FSLASH		EQU     '/'             	; Forward slash ASCII Code
   136 = 002E			DOT             EQU     '.'             	; Dot ASCII Code
   137 = 003A			COLON           EQU     ':'             	; Colon ASCII Code
   138 = 002C			COMMA           EQU     ','             	; Comma ASCII Code
   139 = 002D			MINUS           EQU     '-'             	; Minus ASCII Code
   140 = 005F			ULINE           EQU     '_'             	; Underline ASCII Code
   141
   142 				; Interchangeable Chars ********************************************************
   143 = 003E			PROMPT          EQU     '>'             	; Command Line Prompt Char
   144 = 002E			NUM_SEP         EQU     DOT	           	; Thousand Seperator Char
   145 = 005C			PATH_SEP        EQU     BSLASH          	; Path Seperator Char
   146 = 002F			OPT_SEP         EQU     FSLASH           	; Option Prefix Char
   147
   148 				; File Attributes **************************************************************
   149 = 0001			FA_READONLY     EQU     $01             	; file is read only
   150 = 0002			FA_HIDDEN       EQU     $02             	; file is hidden
   151 = 0004			FA_SYSTEM       EQU     $04             	; file is a system file
   152 = 0008			FA_LABEL        EQU     $08             	; file is a volume label
   153 = 0010			FA_DIRECTORY    EQU     $10             	; file is a directory
   154 = 0020			FA_ARCHIVE      EQU     $20             	; file is modified
   155 = 0040			FA_RESERVED1    EQU     $40
   156 = 0080			FA_LINK         EQU     $80             	; file is a link
   157
   158 				; Device Attributes ************************************************************
   159 = 0080			DA_DIRTY        EQU     $80             ; current FAT block is modified
   160
   161 				; Current Volume Descriptor (32 Bytes) *****************************************
   162 				; The BOOT routine in BIOS has already loaded the MBR into $0600, laoded the
   163 				; Volume-ID sector into $0400 and did set (most of) these variables.
   164 = 0400			D_PART_START	EQU	CURR_VOLUME+$00		; 4 Bytes - Volume ID sector LBA
   165 = 0404			D_ACTUAL_DIR    EQU     CURR_VOLUME+$04     	; 4 Bytes - Actual Directory cluster number
   166 = 0408			D_DEV_ID        EQU     CURR_VOLUME+$08 	; 1 Byte  - Device ID
   167 = 0409			D_MEDIUM_DESCR  EQU     CURR_VOLUME+$09 	; 1 Byte  - Medium Descriptor Byte
   168 										;           or Partition Number in ASCII if harddisk
   169 = 040A			D_FAT_TYPE      EQU     CURR_VOLUME+$0A 	; 1 Byte  - FAT Type (0=FAT32)
   170 = 040B			D_SECT_PER_CLST EQU     CURR_VOLUME+$0B 	; 1 Byte  - Sectors/Cluster
   171 = 040C			D_NUM_OF_FAT    EQU     CURR_VOLUME+$0C 	; 1 Byte  - Number of FATs
   172 = 040D			D_NUM_ROOT_DIR  EQU     CURR_VOLUME+$0D 	; 2 Bytes - Number of Root directory Entries
   173 = 040F			D_DEV_ATTRIBS   EQU     CURR_VOLUME+$0F 	; 1 Byte  - Device Attributes
   174 = 0410			D_START_CLS_LBA EQU     CURR_VOLUME+$10 	; 4 Bytes - Start LBA of Cluster Area (= cluster_begin_lba - 2)
   175 = 0414			D_START_FAT1    EQU     CURR_VOLUME+$14 	; 4 Bytes - Start LBA of FAT1
   176 = 0418			D_START_FAT2    EQU     CURR_VOLUME+$18 	; 4 Bytes - Start LBA of FAT2
   177 = 041C			D_START_DIR     EQU     CURR_VOLUME+$1C 	; 4 Bytes - root_dir_first_cluster (usually 2), also LBA nr for FAT16/12
   178
   179 = 0420			D_SUBDIR_NAME	EQU	FILE_TABLE+$00		; 11 Bytes - Name of entire path (root dir is \)
   180 					
   181 				; Directory Descriptor (32 Bytes) **********************************************
   182
   183 = 0000			D_FILENAME      EQU     $00             	; 8 Bytes - 8 Character Filename
   184 = 0008			D_FILEEXT       EQU     $08             	; 3 Bytes - 3 Character File Extension
   185 = 000B			D_ATTRIBUTES    EQU     $0B             	; 1 Byte  - File Attributes
   186 = 000E			D_CREATE_TIME   EQU     $0E             	; 2 Bytes - Creation Time
   187 = 0010			D_CREATE_DATE	EQU	$10			; 2 Bytes - Create Date 
   188 = 0012			D_ACCESS_DATE   EQU     $12             	; 2 Bytes - Last Accessed Date
   189 = 0014			D_START_CLSTH   EQU     $14             	; 2 Bytes - Start Cluster High Word (FAT32)
   190 = 0016			D_LAST_WR_TIME  EQU     $16             	; 2 Bytes - Last Write Time
   191 = 0018			D_LAST_WR_DATE  EQU     $18             	; 2 Bytes - Last Write Date
   192 = 001A			D_START_CLST    EQU     $1A             	; 2 Bytes - Start Cluster Low Word
   193 = 001C			D_FILE_SIZE     EQU     $1C             	; 4 Bytes - File Size
   194
   195 				;----------------------------------------------------------------------------
   196 				; CF-IDE Hardware Registers (on stand-alone card or IO2-board)
   197 				;----------------------------------------------------------------------------
   198 = 0C80			CFBASE		EQU 	$0C80		; Base card-address for CF card
   199 = 0C80			CFREG0		EQU	CFBASE+0	; Data port
   200 = 0C81			CFREG1		EQU	CFBASE+1	; Read: error-code, write: feature
   201 = 0C82			CFREG2		EQU	CFBASE+2	; Number of sectors to transfer
   202 = 0C83			CFREG3		EQU	CFBASE+3	; Sector address LBA 0 [0:7] (LSB)
   203 = 0C84			CFREG4		EQU	CFBASE+4	; Sector address LBA 1 [8:15]
   204 = 0C85			CFREG5		EQU	CFBASE+5	; Sector address LBA 2 [16:23]
   205 = 0C86			CFREG6		EQU	CFBASE+6	; Sector address LBA 3 [24:27] (MSB)
   206 = 0C87			CFREG7		EQU	CFBASE+7	; Read: Status, Write: Command
   207 = 0C88			CFREG8		EQU	CFBASE+8	; A write with 0x00 is a HW reset
   208
   209
    69 						
    70 				.if	USE_XMODEM = 1
    71 					.word	PROG_START			; Needed for XMODEM lm command loading .bin files
    72 				.endif
    73
    74 				; ******************************************************************************
    75 				; Start of 1st Block of BOOT.SYS ***********************************************
    76 				; ******************************************************************************
    77 = 4000			LOAD_ADDRESS	EQU	$4000
    78 						ORG	LOAD_ADDRESS		; the program start address
    79 				PROG_START					; Program Start Address
    80 						ICL 	"boot_sys_block1.asm"	; boot.sys first block (< 512 bytes)
Source: boot_sys_block1.asm
     1 				;-------------------------------------------------------------------------------
     2 				; This file contains the first block of the BOOT.SYS file. This first block
     3 				; MUST fit into a single sector of 512 bytes. This first sector is already
     4 				; loaded into memory by the boot-block loader on the CF-card.
     5 				;
     6 				; The main purpose of this first block is to load the remainder of BOOT.sys
     7 				; into memory and then to execute it.
     8 				; 
     9 				; Assembler: MADS-Assembler
    10 				;-------------------------------------------------------------------------------
    11
    12 				; subtract two clusters from START_CLUSTER address *****************************
    13 4000 AD 0B 04		INIT            LDA     D_SECT_PER_CLST		; Written by FAT32 boot-code
    14 4003 0A			                ASL     			; A = 2 * D_SECT_PER_CLST
    15 4004 AA			                TAX				; X = 2 * D_SECT_PER_CLST 
    16 4005 AD 10 04		                LDA     D_START_CLS_LBA		; This is cluster_begin_lba
    17 4008 8E 10 04		                STX     D_START_CLS_LBA		; D_START_CLS_LBA = 2 * D_SECT_PER_CLST
    18 400B 38 ED 10 04				SUB	D_START_CLS_LBA		; A = D_START_CLS_LBA - 2 * D_SECT_PER_CLST
    19 400F 8D 10 04		                STA     D_START_CLS_LBA		; D_START_CLS_LBA -= 2 * D_SECT_PER_CLST
    20 4012 A2 01		                LDX     #$01
    21 4014 A0 03		                LDY     #$03
    22 4016 BD 10 04		INIT2           LDA     D_START_CLS_LBA,X	; D_START_CLS_LBA is 32-bits
    23 4019 E9 00		                SBC     #$00
    24 401B 9D 10 04 E8		                STA     D_START_CLS_LBA,X+
    25 401F			                DEY.NE	INIT2			; branch if not done yet
Macro: DEY.NE [Source: macros.inc]
     1 401F 88					DEY
     2 4020 D0 F4				BNE	INIT2
Source: boot_sys_block1.asm
    26 				                
    27 				; initialize current FAT block value with 0 ************************************
    28 4022 84 A4		                STY     CURR_FAT_BLK		; CURR_FAT_BLK = 0L
    29 4024 84 A5		                STY     CURR_FAT_BLK+1
    30 4026 84 A6		                STY     CURR_FAT_BLK+2
    31 4028 84 A7		                STY     CURR_FAT_BLK+3
    32 				                
    33 				; set first cluster of BOOT.SYS as the current cluster *************************
    34 402A A0 15		INIT3           LDY     #$15
    35 402C A2 03		                LDX     #$03
    36 402E 20 79 40		                JSR     SET_WORD            	; store cluster start byte [3:2]
    37 4031 A0 1B		                LDY     #$1B
    38 4033 20 79 40		                JSR     SET_WORD            	; store cluster start byte [1:0]
    39 				                
    40 				; calculate BOOTS.SYS file size in blocks **************************************
    41 4036 A9 5A		INIT4           LDA     #>BOOT_SYS_END      	; Cal. total nr of blocks needed to load the complete
    42 4038 38 E9 40		                SUB     #>PROG_START        	; BOOT.SYS file into memory
    43 403B 4A			                LSR     		    	; 2 pages = 1 sector of 512 bytes
    44 403C 85 AB		                STA     BCNT                	; store result into block counter
    45 403E			                LDA.EQ  #<BOOT_SYS_END BOOT_SYS	; branch if LSB is 0
Macro: LDA.EQ [Source: macros.inc]
     1 403E A9 9B				LDA	#<BOOT_SYS_END
     2 4040 F0 02				BEQ	BOOT_SYS
Source: boot_sys_block1.asm
    46 4042 E6 AB		                INC     BCNT                	; some bytes are left, so increment block counter
    47 				                
    48 				; load all blocks of BOOT.SYS file into memory *********************************
    49 4044			BOOT_SYS        DEC.EQ  BCNT OS_START          	; first block is already read in, branch if no more blocks to read
Macro: DEC.EQ [Source: macros.inc]
     1 4044 C6 AB				DEC	BCNT
     2 4046 F0 29				BEQ	OS_START
Source: boot_sys_block1.asm
    50 4048 AD 0B 04 85 AD	                MVA	D_SECT_PER_CLST SCNT	; SCNT = D_SECT_PER_CLST
    51 404D			LOAD_NEXT_BLK   DEC.EQ  SCNT NEXT_CLUSTER      	; branch if all blocks in cluster read
Macro: DEC.EQ [Source: macros.inc]
     1 404D C6 AD				DEC	SCNT
     2 404F F0 10				BEQ	NEXT_CLUSTER
Source: boot_sys_block1.asm
    52 4051 20 86 41		                JSR     INC_32              	; no, increment block address
    53 4054			LOAD_BLK        LDXYI   NUM32			; NUM32 contains LBA of a boot.sys cluster
Macro: LDXYI [Source: macros.inc]
     1 4054 A2 C0			LDX	<NUM32				; MADS makes this immediate
     2 4056 A0 00			LDY	>NUM32
Source: boot_sys_block1.asm
    54 4058 20 50 41		                JSR     DEV_RD_LBLK         	; and read next block of BOOT.SYS
    55 405B			                DEC.EQ  BCNT OS_START		; branch if no more blocks to read
Macro: DEC.EQ [Source: macros.inc]
     1 405B C6 AB				DEC	BCNT
     2 405D F0 12				BEQ	OS_START
Source: boot_sys_block1.asm
    56 405F D0 EC		                BNE     LOAD_NEXT_BLK       	; yes, read next block in cluster
    57
    58 				; next cluster needs to be loaded considering the volume FAT type **************
    59 4061 20 83 40		NEXT_CLUSTER    JSR     GET_NEXT_CLSTR      	; get next cluster in chain in CURR_CLUSTER
    60 4064 B0 0B		                BCS     OS_START            	; if EOF then start OS
    61 						
    62 4066 20 FD 40		                JSR     CLUSTER_TO_BLK      	; convert CURR_CLUSTER to LBA number in NUM32
    63 4069 AD 0B 04 85 AD	                MVA	D_SECT_PER_CLST SCNT	; SCNT = D_SECT_PER_CLST
    64 406E 4C 54 40		                JMP     LOAD_BLK            	; load first block of cluster
    65 				                
    66 4071 A9 00 8D 28 18	OS_START        MVA	#0 DBG_PRINT		; 0 = No debug print info
    67 4076 4C 18 42				JMP     OS_MAIN             	; jump to OS entry point
    68
    69 				;-------------------------------------------------------------------------------
    70 				; Copy a word, that is part of a cluster nr for boot.sys, into CURR_CLUSTER.
    71 				; PSTR is already set by the FAT boot-block routine.
    72 				;-------------------------------------------------------------------------------
    73 4079 20 7C 40		SET_WORD        JSR     SET_BYTE
    74 407C B1 EA 88 95 A0 CA	SET_BYTE        MVA	(PSTR),Y- CURR_CLUSTER,X- 	; load a byte from dir entry and store in CURR_CLUSTER
    75 4082 60			                RTS
    76 						
    77 				; **** Get Next Cluster Of Cluster Chain ***************************************
    78 				; Input:  CURR_CLUSTER[0:3] - current cluster
    79 				; Output: C = 0 valid cluster in CURR_CLUSTER[0:3]; C = 1 EOF
    80 				; ******************************************************************************
    81 4083			GET_NEXT_CLSTR  LDXYI   D_START_FAT1      	; load base block address of FAT into NUM32[0:3]
Macro: LDXYI [Source: macros.inc]
     1 4083 A2 14			LDX	<D_START_FAT1				; MADS makes this immediate
     2 4085 A0 04			LDY	>D_START_FAT1
Source: boot_sys_block1.asm
    82 4087 20 66 41		                JSR     LOAD_32		    	; NUM32 = LBA nr. of FAT
    83
    84 408A			                LDA.EQ  D_FAT_TYPE  FAT32      	; check FAT type and branch if FAT32 (0)
Macro: LDA.EQ [Source: macros.inc]
     1 408A AD 0A 04				LDA	D_FAT_TYPE
     2 408D F0 14				BEQ	FAT32
Source: boot_sys_block1.asm
    85 408F					CMP.EQ	#FAT16_Type FAT16	; branch if FAT16
Macro: CMP.EQ [Source: macros.inc]
     1 408F C9 01				CMP	#FAT16_TYPE
     2 4091 F0 01				BEQ	FAT16
Source: boot_sys_block1.asm
    86 				                
    87 				; **** Decode FAT12 Entry ******************************************************
    88 				; **** Two FAT12 entries A and B coded together as AA BA BB ********************
    89 4093 60			FAT12           RTS				; Removed for DEBUG
    90
    91 				; **** Decode FAT16 Entry ******************************************************
    92 				; **** a FAT16 cluster C is coded as CC CC *************************************
    93 4094 A6 A1		FAT16           LDX     CURR_CLUSTER+1      	; load byte 2 of current cluster
    94 4096 20 88 41		                JSR     ADD_32_8            	; and add it to FAT base block address
    95 4099 20 22 41		                JSR     LOAD_FAT_BLK        	; load this block
    96 409C A5 A0		                LDA     CURR_CLUSTER        	; load index into the FAT block
    97 409E A2 02		                LDX     #$02                	; two bytes to read for a FAT16 entry
    98 40A0 4C C3 40				JMP	READ_FAT_ENTRY
    99 						
   100 				; **** Decode FAT32 Entry ******************************************************
   101 				; **** a FAT32 cluster C is coded as CC CC CC 0C *******************************
   102 40A3			FAT32           LDXYI	(CURR_CLUSTER+1)		; Get CURR_CLUSTER+1 into SUM32
Macro: LDXYI [Source: macros.inc]
     1 40A3 A2 A1			LDX	<(CURR_CLUSTER+1)				; MADS makes this immediate
     2 40A5 A0 00			LDY	>(CURR_CLUSTER+1)
Source: boot_sys_block1.asm
   103 40A7 20 60 41				JSR     LOAD_S32            	; load CURR_CLUSTER[1:3] into SUM[0:2] = FAT block index
   104 40AA A2 00 86 C7				MVX	#$00 SUM32+3		; clear garbage byte SUM[3]: SUM32 = CURR_CLUSTER / 256
   105 40AE A0 03		                LDY     #$03
   106 40B0 A5 A0		                LDA     CURR_CLUSTER        	; load CURR_CLUSTER[0] = FAT entry index byte
   107 40B2 0A			                ASL                         	; shift bit 7 into carry flag and multiply entry index by 2
   108 40B3 48			                PHA                         	; save entry index to stack
   109 40B4 36 C4 E8		FAT32_LOOP      ROL     SUM32,X+             	; shift bit 7 of entry index into bit 0 of block index
   110 40B7			                DEY.NE  FAT32_LOOP	    	; branch if not done yet
Macro: DEY.NE [Source: macros.inc]
     1 40B7 88					DEY
     2 40B8 D0 FA				BNE	FAT32_LOOP
Source: boot_sys_block1.asm
   111 						
   112 						; A FAT entry is 4 bytes and there are 128 FAT entries in one FAT-sector
   113 40BA 20 94 41		                JSR     ADD_32_32	    	; NUM32 = START_FAT1 + CURR_CLUSTER / 128
   114 40BD 20 22 41		                JSR     LOAD_FAT_BLK	    	; Load FAT sector into standard buffer ($600)
   115 40C0 68			                PLA                         	; restore entry index
   116 40C1 A2 04		                LDX     #$04                	; four bytes to read for a FAT32 entry
   117 				;               JMP     (RW_FAT_ENTRY)      	; Fall-through to READ_FAT_ENTRY
   118 				                
   119 				; **** Read FAT 16 or FAT 32 Entry *********************************************
   120 				; INPUT : X - Length of FAT Entry in Bytes
   121 				; OUTPUT: C = 0: Valid Cluster in CURR_CLUSTER[0:3]; C = 1: EOF
   122 				; example: 08000000 => next cluster = 8: A=RES=$00, C=0
   123 				;          FFFFFF0F => EOF: A=RES=$FF, C=1 
   124 				; ******************************************************************************
   125 				;RW_FAT_ENTRY    .word      READ_FAT_ENTRY
   126 40C3			READ_FAT_ENTRY  
   127 40C3 A0 FF 84 AA				MVY     #$FF MASK              	; standard EOF mask is $FF
   128 40C7 0A			                ASL                         	; multiply entry index by 2 (4 in total now)
   129 40C8 A8			                TAY                         	; store entry index into Y
   130 40C9 86 AC		                STX     NCNT                	; store length of entry
   131 40CB A2 00 86 AE		                MVX     #$00 RES		;
   132 40CF 20 EF 40		LOOP_FAT_ENTRY  JSR     READ_ENTRY_BYTE     	; read entry byte
   133 40D2 95 A0		SET_ENTRY_BYTE  STA     CURR_CLUSTER,X      	; store byte in curr_cluster
   134 40D4 08			                PHP                         	; save carry flag
   135 40D5			                CPX.NE  #$03 CMP_MASK          	; branch if not the upper byte of a FAT32 entry
Macro: CPX.NE [Source: macros.inc]
     1 40D5 E0 03				CPX	#$03
     2 40D7 D0 04				BNE	CMP_MASK
Source: boot_sys_block1.asm
   136 40D9 A2 0F 86 AA		                MVX     #$0F MASK              	; yes, we must change the mask to $0F
   137 40DD			CMP_MASK        CMP.NE 	MASK READ_FAT_ENTRY1   	; cluster byte = EOF mask? Read next byte if not
Macro: CMP.NE [Source: macros.inc]
     1 40DD C5 AA				CMP	MASK
     2 40DF D0 02				BNE	READ_FAT_ENTRY1
Source: boot_sys_block1.asm
   138 40E1 85 AE		                STA     RES                 	; compare cluster byte is equal EOF mask
   139 40E3 28			READ_FAT_ENTRY1 PLP                         	; restore carry flag
   140 40E4 C8			                INY
   141 40E5 E8			                INX
   142 40E6			                DEC.NE  NCNT LOOP_FAT_ENTRY   	; loop until all bytes copied
Macro: DEC.NE [Source: macros.inc]
     1 40E6 C6 AC				DEC	NCNT
     2 40E8 D0 E5				BNE	LOOP_FAT_ENTRY
Source: boot_sys_block1.asm
   143 40EA A5 AE		                LDA     RES
   144 40EC C9 FF		                CMP     #$FF                	; check if result cluster is $FFFF or $0FFFFFFF (EOF)
   145 40EE 60			                RTS
   146 				                
   147 				; **** Read a Single FAT Entry Byte From Block Buffer **************************
   148 				; INPUT : Y - Index To FAT Entry Byte
   149 				; OUTPUT: A = Read Byte from FAT table
   150 				; ******************************************************************************
   151 40EF			READ_ENTRY_BYTE AND.NE  #$01 CURR_CLUSTER+1 RD_UPPER_PAGE	; check bit 0 (= bit 7 of CURR_CLUSTER[0:3] because of ASL in FAT32 routine)
Macro: AND.NE [Source: macros.inc]
     2 40EF A9 01				LDA	#$01
     3 40F1 25 A1				AND	CURR_CLUSTER+1
     4 40F3 D0 04				BNE	RD_UPPER_PAGE
Source: boot_sys_block1.asm
   152 40F5 B9 00 06		                LDA     FAT_BUF,Y        			; read entry byte from lower half of block buffer
   153 40F8 60			                RTS			    			; return
   154 40F9 B9 00 07		RD_UPPER_PAGE   LDA     FAT_BUF+256,Y    			; read entry byte from upper half of block buffer
   155 40FC 60			                RTS			    			; return
   156 				                
   157 				; **** Calculate LBA From Given Cluster Address ********************************
   158 				; At the start of boot.sys, 2 clusters were already subtracted from D_START_CLS_LBA.
   159 				; Used formula: lba_addr = cluster_begin_lba + (cluster_number-2) * sectors_per_cluster.
   160 				;
   161 				; INPUT : CURR_CLUSTER[0:3] - Current File Cluster number
   162 				; OUTPUT: NUM32[0:3]        - LBA of current file cluster number
   163 				; ******************************************************************************
   164 40FD			CLUSTER_TO_BLK  LDXYI   CURR_CLUSTER
Macro: LDXYI [Source: macros.inc]
     1 40FD A2 A0			LDX	<CURR_CLUSTER				; MADS makes this immediate
     2 40FF A0 00			LDY	>CURR_CLUSTER
Source: boot_sys_block1.asm
   165 4101 20 66 41		CLSTR_TO_BLK    JSR     LOAD_32		     	; NUM32 = CURR_CLUSTER
   166 4104 AD 0B 04		CLSTR_TO_LBA    LDA     D_SECT_PER_CLST
   167 4107 4A			                LSR      		     	; A = D_SECT_PER_CLST / 2
   168 4108 F0 0E		                BEQ     ADD_START_CLSTR	     	; branch if D_SECT_PER_CLST = 1
   169 						
   170 410A A2 00		LOOP1           LDX     #$00		     	; NUM32 = CURR_CLUSTER * D_SECT_PER_CLST
   171 410C A0 04		                LDY     #$04
   172 410E 18			                CLC
   173 410F 36 C0 E8		LOOP2           ROL     NUM32,X+	     	; NUM32 <<= 1
   174 4112			                DEY.NE	LOOP2		     	; branch if not done yet
Macro: DEY.NE [Source: macros.inc]
     1 4112 88					DEY
     2 4113 D0 FA				BNE	LOOP2
Source: boot_sys_block1.asm
   175 						
   176 4115 4A			                LSR      		     	; A = D_SECT_PER_CLST >>= 1
   177 4116 D0 F2		                BNE     LOOP1		     	; 
   178 						
   179 4118			ADD_START_CLSTR LDXYI   D_START_CLS_LBA    	; D_START_CLS_LBA = Cluster_begin_lba
Macro: LDXYI [Source: macros.inc]
     1 4118 A2 10			LDX	<D_START_CLS_LBA				; MADS makes this immediate
     2 411A A0 04			LDY	>D_START_CLS_LBA
Source: boot_sys_block1.asm
   180 411C 20 60 41		                JSR     LOAD_S32	     	; NUM32 = Cluster_begin_lba
   181 411F 4C 94 41		                JMP     ADD_32_32	     	; NUM32 = Cluster_begin_lba + CURR_CLUSTER * D_SECT_PER_CLST
   182
   183 				; **** Load A Block From FAT Into The Std Buffer ($600) ************************
   184 				; Input: NUM32: LBA number of FAT sector to load
   185 				; ******************************************************************************
   186 4122 A2 03		LOAD_FAT_BLK    LDX     #$03
   187 4124 86 AE		                STX     RES                 	; initialize byte counter
   188 				                
   189 				; check if current FAT block and last loaded FAT block are identical ***********
   190 4126 B5 C0		CHK_FAT_BLK     LDA     NUM32,X             		; load one byte of new block pointer
   191 4128			                CMP.NE 	CURR_FAT_BLK,X SET_CURR_FATBLK	; branch if not the same as the old one
Macro: CMP.NE [Source: macros.inc]
     1 4128 D5 A4				CMP	CURR_FAT_BLK,X
     2 412A D0 02				BNE	SET_CURR_FATBLK
Source: boot_sys_block1.asm
   192 						
   193 412C C6 AE		                DEC     RES                 	; if equal decrement number of unequal bytes
   194 412E 95 A4 CA		SET_CURR_FATBLK STA     CURR_FAT_BLK,X-      	; store new block pointer byte as current byte
   195 4131 10 F3		                BPL     CHK_FAT_BLK         	; compare and store more bytes if X >= 0
   196 						
   197 4133 A5 AE		                LDA     RES                 	; RES is decremented down to -1 if all bytes equal
   198 4135 30 13		                BMI     LOAD_FAT_END        	; RES = $FF -> FAT block is already loaded, just exit
   199 				                
   200 4137			                PHW	BLKBUF			; save old memory pointer to stack
Macro: PHW [Source: macros.inc]
     1 4137 A5 DC			LDA	BLKBUF
     2 4139 48				PHA
     3 413A A5 DD			LDA	BLKBUF+1
     4 413C 48				PHA
Source: boot_sys_block1.asm
   201 413D			                LDXYI   NUM32
Macro: LDXYI [Source: macros.inc]
     1 413D A2 C0			LDX	<NUM32				; MADS makes this immediate
     2 413F A0 00			LDY	>NUM32
Source: boot_sys_block1.asm
   202 4141 20 4B 41		                JSR     DEV_RD_LBLK_BUF     	; load FAT block into standard buffer ($0600)
   203 4144					PLW	BLKBUF			; restore old memory pointer from stack
Macro: PLW [Source: macros.inc]
     1 4144 68				PLA
     2 4145 85 DD			STA	BLKBUF+1
     3 4147 68				PLA
     4 4148 85 DC			STA	BLKBUF
Source: boot_sys_block1.asm
   204 414A 60			LOAD_FAT_END    RTS
   205 				                
   206 				; **** Read Logical Block To Standard Buffer ($0600) ***************************
   207 				; Input: [X,Y] points to 32-bit LBA
   208 				; ******************************************************************************
   209 414B A9 25		DEV_RD_LBLK_BUF  LDA    #CMD_READ_BUF	        ; Read sector with LBA nr into $0600
   210 414D 4C BA E0		                 JMP    CMDDEV			; Call Device-driver Read routine
   211 				                
   212 				; **** Read Logical Block ******************************************************
   213 				; Input: [X,Y] points to 32-bit LBA
   214 				;        BLKBUF,BLKBUFH = 16 Bit Destination Address
   215 				; ******************************************************************************
   216 4150 A9 22		DEV_RD_LBLK     LDA     #CMD_READ	        ; Read sector with LBA nr into BLKBUF
   217 4152 4C BA E0		                JMP     CMDDEV			; Call Device-driver Read routine
   218 				                
   219 				; Arithmetic Functions *********************************************************
   220 				; ******************************************************************************
   221
   222 				; **** Load a 16 Bit Value Into NUM32 ******************************************
   223 				; Input:  UInt16[X,Y] = 16 Bit Unsigned Integer
   224 				; ******************************************************************************
   225 4155			LOAD_16         STXY	NUM32			; Load LSB in NUM32 and MSB in NUM32+1
Macro: STXY [Source: macros.inc]
     1 4155 86 C0			STX	NUM32
     2 4157 84 C1			STY	NUM32+1
Source: boot_sys_block1.asm
   226 4159 A2 00 86 C2 86 C3			MWX	#0 NUM32+2		; Zero upper 16-bits
   227 415F 60			                RTS			   	; return
   228 				                
   229 				; **** Load a 32 Bit Value Into SUM32 ******************************************
   230 				; Input:  X,Y = Ptr[LO:HI] to 32 Bit Integer
   231 				; ******************************************************************************
   232 4160 86 E8		LOAD_S32        STX     STOL		   	; store pointer LSB
   233 4162 A2 07		                LDX     #$07		   	; SUM32 is 4 bytes above NUM32 in memory
   234 4164 D0 04		                BNE     LOAD_32_1	   	; branch always
   235
   236 				; **** Load a 32 Bit Value Into NUM32 ******************************************
   237 				; Input:  X,Y = Ptr[LO:HI] to 32 Bit Integer
   238 				; ******************************************************************************
   239 4166 86 E8		LOAD_32         STX     STOL		   	; store pointer LSB
   240 4168 A2 03		                LDX     #$03
   241 416A 84 E9		LOAD_32_1       STY     STOH		   	; store pointer MSB
   242 416C A0 03		                LDY     #$03
   243 416E B1 E8 95 C0 CA	LOOP_LOAD_32    MVA 	(STOL),Y NUM32,X-	; get byte and store in NUM32 (or SUM32)
   244 4173			                DEY.PL  LOOP_LOAD_32	   	; branch if not done yet
Macro: DEY.PL [Source: macros.inc]
     1 4173 88					DEY
     2 4174 10 F8				BPL	LOOP_LOAD_32
Source: boot_sys_block1.asm
   245 4176 60			                RTS			   	; return
   246 				                
   247 				; **** Store 32 Bit Value In NUM32 To Destination At Ptr[X,Y] ******************
   248 				; Input:  X,Y = Ptr[LO:HI] to 32 Bit Integer
   249 				; ******************************************************************************
   250 4177			STORE_32        STXY	STOL			; store pointer LSB and MSB
Macro: STXY [Source: macros.inc]
     1 4177 86 E8			STX	STOL
     2 4179 84 E9			STY	STOL+1
Source: boot_sys_block1.asm
   251 417B A0 03		STORE_32_D      LDY     #$03		   	; 1 DWORD = 4 bytes
   252 417D B9 C0 00 91 E8 88	LOOP_STORE_32   MVA     NUM32,Y (STOL),Y-   	; get number and store it
   253 4183 10 F8		                BPL     LOOP_STORE_32	   	; branch if not done yet
   254 4185 60			                RTS			   	; return
   255
   256 				; **** Increment a 32 Bit Value ************************************************
   257 				; NUM32[0:3] = 32 Bit Integer - NUM32 = NUM32 + 1
   258 				; ******************************************************************************
   259 4186 A2 01		INC_32          LDX     #$01
   260
   261 				; **** Add a 8 Bit Value To a 32 Bit Value *************************************
   262 				; Input X = 8 Bit Integer, NUM32[0:3] = 32 Bit Integer - NUM32 = UInt[X] + NUM32
   263 				; ******************************************************************************
   264 4188 A0 00		ADD_32_8        LDY     #$00
   265
   266 				; **** Add a 16 Bit Value To a 32 Bit Value ************************************
   267 				; Input X,Y = 16 Bit Integer, NUM32[0:3] = 32 Bit Integer - NUM32 = UInt[X,Y] + NUM32
   268 				; ******************************************************************************
   269 418A			ADD_32_16       STXY	SUM32			; Store byte or word in lower word
Macro: STXY [Source: macros.inc]
     1 418A 86 C4			STX	SUM32
     2 418C 84 C5			STY	SUM32+1
Source: boot_sys_block1.asm
   270 418E A2 00 86 C6 86 C7			MWX	#0 SUM32+2		; Clear upper 16-bits of DWORD
   271
   272 				; **** Add a 32 Bit Value To a 32 Bit Value ************************************
   273 				; Input SUM32[0:3] = 32 Bit Integer, NUM32[0:3] = 32 Bit Integer  - NUM32 = SUM32 + NUM32
   274 				; ******************************************************************************
   275 4194 18			ADD_32_32       CLC			   	; clear carry flag
   276 4195 A2 00		                LDX     #$00		   	; start with byte 0
   277 4197 08			                PHP			   	; save carry flag
   278 4198 28			ADD_LOOP        PLP			   	; get carry flag back
   279 4199 B5 C4		                LDA     SUM32,X		   	; Get SUM32 byte
   280 419B 75 C0 95 C0		                ADC:STA NUM32,X		   	; num32 = num32 + sum32, save in num32
   281 419F 08			                PHP			   	; save carry flag
   282 41A0 E8			                INX			   	; next byte
   283 41A1			                CPX.NE  #$04 ADD_LOOP		; branch if not all bytes done yet
Macro: CPX.NE [Source: macros.inc]
     1 41A1 E0 04				CPX	#$04
     2 41A3 D0 F3				BNE	ADD_LOOP
Source: boot_sys_block1.asm
   284 41A5 28			                PLP			   	; restore stack
   285 41A6 60			                RTS			   	; return
    81 				               
    82 				; ******************************************************************************
    83 				; Start of remaining BOOT.SYS blocks *******************************************
    84 				; ******************************************************************************
    85 41A7					ORG     LOAD_ADDRESS + $0200
    86 4200			BLOCK_2
    87 4200					ICL 	"boot_sys_os.asm"	; OS portion of boot.sys
Source: boot_sys_os.asm
     1 				;-------------------------------------------------------------------------------
     2 				; This file contains the OS portion of the BOOT.SYS file.
     3 				; Assembler: MADS-Assembler
     4 				;-------------------------------------------------------------------------------
     5
     6 				; ******************************************************************************
     7 				; NUM32 shl X
     8 				; ******************************************************************************
     9 4200			SHL_32          ASL32	NUM32		  	; SHL with C=0
Macro: ASL32 [Source: macros.inc]
     1 4200 06 C0			ASL     NUM32		  		; SHL with C=0
     2 4202 26 C1		        ROL     NUM32+1		  
     3 4204 26 C2		        ROL     NUM32+2
     4 4206 26 C3		        ROL     NUM32+3		  
Source: boot_sys_os.asm
    10 4208			                DEX.NE	SHL_32		  	; decrement #shifts, branch if not done yet
Macro: DEX.NE [Source: macros.inc]
     1 4208 CA					DEX
     2 4209 D0 F5				BNE	SHL_32
Source: boot_sys_os.asm
    11 420B 60			                RTS			  	; return
    12
    13 				; ******************************************************************************
    14 				; NUM32 shr X
    15 				; ******************************************************************************
    16 420C			SHR_32          LSR32	NUM32			; SHR with C=0
Macro: LSR32 [Source: macros.inc]
     1 420C 46 C3			LSR     NUM32+3		  		; SHR with C=0
     2 420E 66 C2		        ROR     NUM32+2
     3 4210 66 C1		        ROR     NUM32+1
     4 4212 66 C0		        ROR     NUM32
Source: boot_sys_os.asm
    17 4214			                DEX.NE  SHR_32		  	; decrement #shifts, branch if not done yet
Macro: DEX.NE [Source: macros.inc]
     1 4214 CA					DEX
     2 4215 D0 F5				BNE	SHR_32
Source: boot_sys_os.asm
    18 4217 60			                RTS			  	; return
    19 				                
    20 				; ******************************************************************************
    21 				; *                               OS Entry Point                               *
    22 				; ******************************************************************************
    23 4218			OS_MAIN         PRSTR	MSG_BOOT			; Print boot-message
Macro: PRSTR [Source: macros.inc]
     1 4218 A2 DB			LDX	<MSG_BOOT				; MADS makes this immediate
     2 421A A0 4B			LDY	>MSG_BOOT
Source: boot_sys_os.asm
     2 421C 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_os.asm
    24 421F 20 E8 49		                JSR     OS_SET_ROOT_DIR	     		; set D_ACTUAL_DIR and CURR_DIR_BLK to root-dir
    25 				                
    26 				; Init CFC LOAD and SAVE VECTORS ***********************************************
    27 4222 A9 20 8D 06 18 A9 + 		MWA	#MON_RAM_BLOCK.CFC_LOAD CF_LOAD_VEC	; CF_LOAD_VEC = CFC_LOAD, Used by BASIC with CMD_LOAD
    28 422C A9 5B 8D 08 18 A9 + 		MWA	#MON_RAM_BLOCK.CFC_SAVE CF_SAVE_VEC	; CF_SAVE_VEC = CFC_SAVE, Used by BASIC with CMD_SAVE
    29 4236 20 30 54				JSR	CP_MON_RAM				; Copy BASIC related DOS functions to Monitor RAM
    30 4239 A9 1A 8D 0A 18 A9 + 		MWA	#MON_RAM_BLOCK.DOS_JMP_RET RETURN_VECT	; Return-vector for Monitor and BASIC
    31 4243 A2 00 86 01 86 02			MWX	#0 Wrmjpl				; Reset BASIC warm-start vector, so that a reboot is also a BASIC cold-start
    32 				                
    33 				; Clear Mount Table ************************************************************
    34 4249 18			                CLC
    35 424A A9 00 9D 08 05	CLR_MOUNT_TABLE MVA	#NULL_ID MOUNT_TABLE+8,X	; set device ID to NULL device
    36 424F 8A					TXA                          		; index to mount table into A
    37 4250 69 20		                ADC     #$20                 		; set to next entry
    38 4252 AA			                TAX
    39 4253 90 F5		                BCC     CLR_MOUNT_TABLE      		; repeat until all entries cleared
    40 				                
    41 				; Set Boot Device As Current Device ********************************************
    42 4255 A2 00		                LDX     #$00		     	; X=0
    43 4257 A0 00		                LDY     #$00                 	; set index to mount table = 0
    44 4259 AD 08 04		                LDA     D_DEV_ID             	; get boot device ID
    45 425C			CHECK_FDC1      CMP.EQ  #FDD1_ID SET_BOOT_DRV	; If boot drive is FDD1, set current drive to A:
Macro: CMP.EQ [Source: macros.inc]
     1 425C C9 22				CMP	#FDD1_ID
     2 425E F0 0A				BEQ	SET_BOOT_DRV
Source: boot_sys_os.asm
    46 4260 E8			                INX		     	     	; X=2
    47 4261 A0 20		                LDY     #$20                 	; set index to mount table = 32
    48 4263			CHECK_FDC2      CMP.EQ  #FDD2_ID SET_BOOT_DRV	; If boot drive is FDD2, set current drive to B:
Macro: CMP.EQ [Source: macros.inc]
     1 4263 C9 23				CMP	#FDD2_ID
     2 4265 F0 03				BEQ	SET_BOOT_DRV
Source: boot_sys_os.asm
    49 4267 E8			                INX                          	; else set current drive (SDD or a HDD) to C:
    50 4268 A0 40		                LDY     #$40                 	; set index to mount table = 64
    51 426A 8E 1E 18		SET_BOOT_DRV    STX     CURR_DRIVE	     	; 0=FDD1, 1=FDD2, 2=SD/CF card
    52
    53 				; Add Boot Device To Mount Table ***********************************************
    54 426D A2 00		                LDX     #$00
    55 426F BD 00 04 E8 99 00 + ADD_DEVBLK      MVA 	CURR_VOLUME,X+ MOUNT_TABLE,Y+	; read from current device block and write to mount table
    56 4277			                CPX.NE  #32 ADD_DEVBLK         		; 32 bytes to copy
Macro: CPX.NE [Source: macros.inc]
     1 4277 E0 20				CPX	#32
     2 4279 D0 F4				BNE	ADD_DEVBLK
Source: boot_sys_os.asm
    57 427B A9 F8		                LDA     #$F8
    58 427D			                CMP.NE  D_MEDIUM_DESCR CHK_FAT_TYPE	; Branch if boot device is not a harddisk
Macro: CMP.NE [Source: macros.inc]
     1 427D CD 09 04				CMP	D_MEDIUM_DESCR
     2 4280 D0 05				BNE	CHK_FAT_TYPE
Source: boot_sys_os.asm
    59 4282 A5 EE 8D 09 04	                MVA     PSAV D_MEDIUM_DESCR  		; yes, load partition number (ASCII) and save it as medium descr. byte
    60 4287			CHK_FAT_TYPE    LDA.EQ  D_FAT_TYPE OS_SHELL_ENTRY 	; get type of FAT, branch if FAT32 (0), has no static root directory blocks
Macro: LDA.EQ [Source: macros.inc]
     1 4287 AD 0A 04				LDA	D_FAT_TYPE
     2 428A F0 0B				BEQ	OS_SHELL_ENTRY
Source: boot_sys_os.asm
    61 428C A2 04		                LDX     #$04		     		; D_NUM_ROOT_DIR is 0 for FAT32
    62 428E			CALC_DIR_BLKS   LSR16	D_NUM_ROOT_DIR	     		; divide #root-dir entries by 16 to get total #blocks
Macro: LSR16 [Source: macros.inc]
     1 428E 4E 0E 04			LSR	D_NUM_ROOT_DIR+1
     2 4291 6E 0D 04			ROR	D_NUM_ROOT_DIR
Source: boot_sys_os.asm
    63 4294					DEX.NE	CALC_DIR_BLKS	     		; branch if not done yet
Macro: DEX.NE [Source: macros.inc]
     1 4294 CA					DEX
     2 4295 D0 F7				BNE	CALC_DIR_BLKS
Source: boot_sys_os.asm
    64 				                
    65 				; TODO: ADD MORE DEVICES #######################################################
    66
    67 				; **** Shell Entry Point *******************************************************
    68 				; ******************************************************************************
    69 4297 20 F1 57		OS_SHELL_ENTRY  JSR	GET_SIS		     		; Get sys. info sector		
    70 429A 4C 4E 4C				JMP     SH_CMD_PROMPT			; start of command shell
    71
    72 				; **** Read First Block Of Actual Directory ************************************
    73 				; The first block of D_ACTUAL_DIR cluster is read into DIR_BLK_BUF
    74 				; ******************************************************************************
    75 429D			OS_FIRST_DIR_BLK
    76 429D			                LDA.EQ  D_FAT_TYPE SET_DIR_CLUSTER  	; load type of FAT, branch if FAT32 (set cluster)
Macro: LDA.EQ [Source: macros.inc]
     1 429D AD 0A 04				LDA	D_FAT_TYPE
     2 42A0 F0 15				BEQ	SET_DIR_CLUSTER
Source: boot_sys_os.asm
    77 42A2 20 D7 49		                JSR     OS_IS_ROOT_DIR       		; No FAT32, is it the root directory?
    78 42A5 90 10		                BCC     SET_DIR_CLUSTER      		; no, set cluster
    79
    80 42A7					MVAX	4 D_START_DIR CURR_DIR_BLK	; CURR_DIR_BLK = LBA root dir., FAT16/FAT12 only
Macro: MVAX [Source: macros.inc]
     1 42A7 A2 03			LDX	#4-1
     2 42A9 BD 1C 04 9D 24 18 + lp	MVA	D_START_DIR,X CURR_DIR_BLK,X-
     3 42B0 10 F7			BPL	lp
Source: boot_sys_os.asm
    81 42B2 AE 0D 04		                LDX     D_NUM_ROOT_DIR       		; set block counter
    82 42B5 D0 17		                BNE     SET_NUM_BLOCKS       		; branch always
    83
    84 42B7			SET_DIR_CLUSTER MVAX	4 D_ACTUAL_DIR CURR_CLUSTER	; CURR_CLUSTER = D_ACTUAL_DIR, FAT32 and FAT16/FAT12 subdir
Macro: MVAX [Source: macros.inc]
     1 42B7 A2 03			LDX	#4-1
     2 42B9 BD 04 04 95 A0 CA	lp	MVA	D_ACTUAL_DIR,X CURR_CLUSTER,X-
     3 42BF 10 F8			BPL	lp
Source: boot_sys_os.asm
    85 42C1 20 FD 40		CONVERT_CLUSTER JSR     CLUSTER_TO_BLK       		; convert CURR_CLUSTER to LBA number in NUM32
    86 42C4			                LDXYI   CURR_DIR_BLK			; LBA of current directory
Macro: LDXYI [Source: macros.inc]
     1 42C4 A2 24			LDX	<CURR_DIR_BLK				; MADS makes this immediate
     2 42C6 A0 18			LDY	>CURR_DIR_BLK
Source: boot_sys_os.asm
    87 42C8 20 77 41		                JSR     STORE_32             		; and save result as current directory block
    88 42CB AE 0B 04		                LDX     D_SECT_PER_CLST      		; load number of blocks per clusters
    89 42CE 8E 1D 18		SET_NUM_BLOCKS  STX     CURR_BLK_NUM	     		; CURR_BLK_NUM = D_SECT_PER_CLST
    90
    91 				; **** Load Directory Block ****************************************************
    92 				; This routine reads a directory block into DIR_BLK_BUF.
    93 				; It is called from OS_NEXT_DIR_BLK.
    94 				; ******************************************************************************
    95 42D1 A9 00 85 DC A9 02 + OS_LOAD_DIR     MWA	#DIR_BLK_BUF BLKBUF  ; BLKBUF now points to dir block buffer
    96 42D9					LDXYI	CURR_DIR_BLK         ; block number (LBA) to be loaded
Macro: LDXYI [Source: macros.inc]
     1 42D9 A2 24			LDX	<CURR_DIR_BLK				; MADS makes this immediate
     2 42DB A0 18			LDY	>CURR_DIR_BLK
Source: boot_sys_os.asm
    97 42DD 4C 50 41		                JMP     DEV_RD_LBLK          ; read directory block into DIR_BLK_BUF and return
    98
    99 				; **** Read Next Directory Block ***********************************************
   100 				; The LBA nr in CURR_DIR_BLK is incremented by 1. It is called from OS_DIR_LOOP
   101 				; when CURR_BLK_NUM is between D_SECT_PER_CLST and 1.
   102 				; ******************************************************************************
   103 42E0 A2 00		OS_NEXT_DIR_BLK LDX     #$00
   104 42E2			INC_DIR_BLK     INC.NE  CURR_DIR_BLK,X OS_LOAD_DIR	; increment current directory block and branch if no overflow
Macro: INC.NE [Source: macros.inc]
     1 42E2 FE 24 18				INC	CURR_DIR_BLK,X
     2 42E5 D0 EA				BNE	OS_LOAD_DIR
Source: boot_sys_os.asm
   105 42E7 E8			                INX                          		; overflow, increment next byte
   106 42E8			                CMP.NE  #$04 INC_DIR_BLK     		; increment next byte if not all four bytes updated
Macro: CMP.NE [Source: macros.inc]
     1 42E8 C9 04				CMP	#$04
     2 42EA D0 F6				BNE	INC_DIR_BLK
Source: boot_sys_os.asm
   107 42EC F0 E3		                BEQ     OS_LOAD_DIR          		; branch always
   108
   109 				; **** Read Next Directory Cluster *********************************************
   110 				; Reads a first sector of a directory cluster into DIR_BLK_BUF. It is called
   111 				; from OS_DIR_LOOP and resets CURR_BLK_NUM to D_SECT_PER_CLST.
   112 				; ******************************************************************************
   113 42EE			OS_NEXT_DIR_CLSTR
   114 42EE 20 83 40		                JSR     GET_NEXT_CLSTR       ; load next directory cluster nr from FAT
   115 42F1 90 CE		                BCC     CONVERT_CLUSTER      ; if not EOF convert it to LBA + load from disk
   116 42F3 60			                RTS			     ; return
   117 				                
   118 				; **** Save Directory Block ****************************************************
   119 				; Write directory in DIR_BLK_BUF to disk with LBA nr in X,Y.
   120 				; Input: X,Y = Pointer to LBA nr.
   121 				; ******************************************************************************
   122 42F4 86 D8		OS_SAVE_DIR     STX	SAVEX				; TODO: remove SAVEX, SAVEY ?
   123 42F6 84 D9				STY	SAVEY
   124 42F8 A9 00 85 DC A9 02 + 		MWA	#DIR_BLK_BUF BLKBUF		; set source block buffer to DIR_BLK_BUF
   125 4300 A6 D8		                LDX     SAVEX       			; pointer to block number (LBA) to be saved
   126 4302 A4 D9		                LDY     SAVEY
   127 4304 4C 98 1E		                JMP     MON_RAM_BLOCK.DEV_WR_LBLK	; write directory block in DIR_BLK_BUF to LBA in NUM32 and return
   128 				                
   129 				; **** Save FAT Block **********************************************************
   130 				; Write FAT table in FAT_BUF ($0600) to disk with LBA nr in X,Y.
   131 				; Input: X,Y = Pointer to LBA nr.
   132 				; ******************************************************************************
   133 4307			OS_SAVE_FAT     LDXYI	CURR_FAT_BLK			; LBA nr of FAT
Macro: LDXYI [Source: macros.inc]
     1 4307 A2 A4			LDX	<CURR_FAT_BLK				; MADS makes this immediate
     2 4309 A0 00			LDY	>CURR_FAT_BLK
Source: boot_sys_os.asm
   134 430B 4C AD 1E		                JMP     MON_RAM_BLOCK.DEV_WR_LBLK_BUF   ; write FAT buffer and return
   135
   136 				; **** Create New File on Disk *************************************************
   137 				; Input: FILENAME = String8_3
   138 				;        A        = File Attributes
   139 				;        FREE_CLUSTER: contains cluster nr for new File/Dir
   140 				; An empty dir. entry is written with: Filename, Attribute, Date, Time and Cluster Nr.
   141 				; ******************************************************************************
   142 430E AA			OS_CREATE_FILE  TAX                         		; save attributes into X
   143 430F A0 00		                LDY     #D_FILENAME         		; set index to filename
   144 4311 B9 42 4C 91 A8 C8	FILL_FILENAME   MVA     FILENAME,Y (CURR_DIR_ENTRY),Y+	; copy filename into current directory entry
   145 4317			                CPY.CC  #D_ATTRIBUTES FILL_FILENAME 	; branch if not all characters copied?
Macro: CPY.CC [Source: macros.inc]
     1 4317 C0 0B				CPY	#D_ATTRIBUTES			; 
     2 4319 90 F6				BCC	FILL_FILENAME			; branch if C=0 (Y-b1 < 0)
Source: boot_sys_os.asm
   146 						
   147 						; Write Attribute
   148 431B 8A			                TXA                         	; yes, get attribute back to A
   149 431C 91 A8		CLEAR_ENTRY     STA     (CURR_DIR_ENTRY),Y  	; copy attributes into current directory entry
   150 431E A9 00		                LDA     #$00                	; and clear all following bytes to 0
   151 4320 C8			                INY
   152 4321			                CPY.CC  #$20 CLEAR_ENTRY	; branch if not everything cleared yet
Macro: CPY.CC [Source: macros.inc]
     1 4321 C0 20				CPY	#$20			; 
     2 4323 90 F7				BCC	CLEAR_ENTRY			; branch if C=0 (Y-b1 < 0)
Source: boot_sys_os.asm
   153 						
   154 						; Write create-Date and Last-write Date
   155 4325 20 AF 43		GET_DATE_TIME   JSR     OS_FILEDATE         	; get current date as file date
   156 4328 98			                TYA				; Y = MSB
   157 4329 A0 19		                LDY     #D_LAST_WR_DATE+1     	; set index to last write date MSB
   158 432B 91 A8		                STA     (CURR_DIR_ENTRY),Y  	; store MSB of file last write date
   159 432D A0 11		                LDY     #D_CREATE_DATE+1     	; set index to create date MSB
   160 432F 91 A8 88		                STA     (CURR_DIR_ENTRY),Y-  	; store MSB of file create date
   161 4332 8A			                TXA				; X = LSB
   162 4333 91 A8		                STA     (CURR_DIR_ENTRY),Y  	; store LSB of file create date
   163 4335 A0 18		                LDY     #D_LAST_WR_DATE     	; set index to last write date LSB
   164 4337 91 A8		                STA     (CURR_DIR_ENTRY),Y  	; store LSB of file date
   165
   166 						; Write create-Time and last-write Time
   167 4339 20 8A 43		                JSR     OS_FILETIME         	; get current time as file time
   168 433C 98			                TYA				; Y = MSB
   169 433D A0 17		                LDY     #D_LAST_WR_TIME+1     	; set index to last write time MSB
   170 433F 91 A8		                STA     (CURR_DIR_ENTRY),Y  	; store MSB of file last write time
   171 4341 A0 0F		                LDY     #D_CREATE_TIME+1     	; set index to create time MSB
   172 4343 91 A8 88		                STA     (CURR_DIR_ENTRY),Y-  	; store MSB of file create date
   173 4346 8A			                TXA				; X = LSB
   174 4347 91 A8		                STA     (CURR_DIR_ENTRY),Y  	; store LSB byte of file create time
   175 4349 A0 16		                LDY     #D_LAST_WR_TIME     	; set index to last write time LSB
   176 434B 91 A8		                STA     (CURR_DIR_ENTRY),Y  	; store LSB of file last write time
   177
   178 						; Write File Cluster Nr High and Low
   179 434D A0 15				LDY	#D_START_CLSTH+1			; index of MSB of 1st_cluster_high
   180 434F AD 23 18 91 A8 88			MVA	FREE_CLUSTER+3  (CURR_DIR_ENTRY),Y-	; MSB of new cluster nr
   181 4355 AD 22 18 91 A8			MVA	FREE_CLUSTER+2  (CURR_DIR_ENTRY),Y	; LSB of 1st_cluster_high
   182 435A A0 1B				LDY	#D_START_CLST+1				; index of MSB of 1st_cluster_low
   183 435C AD 21 18 91 A8 88			MVA	FREE_CLUSTER+1  (CURR_DIR_ENTRY),Y-	; store in MSB of 1st_cluster_low
   184 4362 AD 20 18 91 A8			MVA	FREE_CLUSTER    (CURR_DIR_ENTRY),Y	; store in LSB of 1st_cluster_low
   185 						
   186 4367 AD 12 18				LDA     F_ATTRIBS				; Get file/dir attributes again
   187 436A					AND.NE  #FA_DIRECTORY OS_CR_SAV			; create a dir? Branch if it is a dir
Macro: AND.NE [Source: macros.inc]
     6 436A 29 10				AND	#FA_DIRECTORY
     7 436C D0 15				BNE	OS_CR_SAV
Source: boot_sys_os.asm
   188
   189 436E A0 1C		                LDY     #D_FILE_SIZE      			; index to file size in dir. entry
   190 4370 AD E0 56 91 A8 C8 + 		MWA	SAVE_LEN (CURR_DIR_ENTRY),Y+		; Save file-length in current dir. entry
   191 437C A9 00 91 A8 C8 91 + 		MWA	#0 (CURR_DIR_ENTRY),Y			; Set high-word of file-size to 0
   192 						
   193 4383			OS_CR_SAV	LDXYI	CURR_DIR_BLK				; Write new subdir entry in current dir (CURR_DIR_BLK is LBA of current dir block)
Macro: LDXYI [Source: macros.inc]
     1 4383 A2 24			LDX	<CURR_DIR_BLK				; MADS makes this immediate
     2 4385 A0 18			LDY	>CURR_DIR_BLK
Source: boot_sys_os.asm
   194 4387 4C F4 42		                JMP     OS_SAVE_DIR	    			; write this dir entry back to disk and return
   195 				                
   196 				; **** Get Current Time As File Time *******************************************
   197 				; Output: File Time = Word[X,Y]
   198 				; ******************************************************************************
   199 438A 20 DE E2		OS_FILETIME     JSR     READTIME            ; read current time
   200
   201 				; **** Convert Time To File Time ***********************************************
   202 				; Input:  A - HOUR 	in BCD ($00-$23)
   203 				;	  X - MINUTE 	in BCD ($00-$59)
   204 				;	  Y - SECONDS	in BCD ($00-$59)
   205 				; Output: File Time = Word[X,Y]
   206 				; ******************************************************************************
   207 438D			OS_TIME_TO_FILETIME
   208 438D 20 D6 43		                JSR     CONVERT_DATETIME    ; convert BCD date values into binary
   209 4390 85 C0		                STA     NUM32               ; store HOUR into lower byte of Word[NUM32:NUM32+1]
   210 4392 A9 00 85 C1				MVA	#$00 NUM32+1	    ; clear upper byte of result
   211 4396 A2 06		                LDX     #$06
   212 4398 20 00 42		                JSR     SHL_32              ; shift left NUM32 by 6 bits
   213 439B A5 C5		                LDA     SUM32+1             ; load MINUTE into A
   214 439D 05 C0 85 C0		                ORA:STA NUM32               ; and add value into result
   215 43A1 A2 05		                LDX     #$05
   216 43A3 20 00 42		                JSR     SHL_32              ; shift left NUM32 by 5 bits
   217 43A6 A5 C6		                LDA     SUM32+2             ; load SECONDS into A
   218 43A8 6A			                ROR                         ; divide SECONDS by 2
   219 43A9 05 C0		                ORA     NUM32               ; and add value into result
   220 43AB AA			                TAX
   221 43AC A4 C1		                LDY     NUM32+1             ; result is in Word[X,Y]
   222 43AE 60			                RTS
   223 				                
   224 				; **** Get Current Date As File Date *******************************************
   225 				; Output: File Date = Word[X,Y]
   226 				; ******************************************************************************
   227 43AF 20 E2 E2		OS_FILEDATE     JSR     READDATE            ; read current date
   228
   229 				; **** Convert Date To File Date ***********************************************
   230 				; Input:  A - YEAR 	in BCD ($00-$99)
   231 				; 	  X - MONTH 	in BCD ($01-$12)
   232 				; 	  Y - DAY	in BCD ($01-$31)
   233 				; Output: File Date = Word[X,Y]
   234 				; ******************************************************************************
   235 43B2			OS_DATE_TO_FILEDATE
   236 43B2 20 D6 43		                JSR     CONVERT_DATETIME    ; converte BCD date values into binary
   237 43B5 18 69 14		                ADD     #20                 ; file date starts from 1980, so we have to add 20 to our year 2000 based RTC date
   238 43B8 85 C0		                STA     NUM32               ; store YEAR into lower byte of Word[NUM32:NUM32+1]
   239 43BA A9 00 85 C1		                MVA     #$00 NUM32+1	    ; clear upper byte of result
   240 43BE A2 04		                LDX     #$04
   241 43C0 20 00 42		                JSR     SHL_32              ; shift left NUM32 by 4 bits
   242 43C3 A5 C5		                LDA     SUM32+1             ; load MONTH into A
   243 43C5 05 C0 85 C0		                ORA:STA NUM32               ; and add value into result
   244 43C9 A2 05		                LDX     #$05
   245 43CB 20 00 42		                JSR     SHL_32              ; shift left NUM32 by 5 bits
   246 43CE A5 C6		                LDA     SUM32+2             ; load DAY into A
   247 43D0 05 C0		                ORA     NUM32               ; and add value into result
   248 43D2 AA			                TAX
   249 43D3 A4 C1		                LDY     NUM32+1             ; result is in Word[X,Y]
   250 43D5 60			                RTS
   251 				                
   252 				; **** Convert BCD Date Or Time Values Into Unpacked Binary ********************
   253 43D6			CONVERT_DATETIME
   254 43D6 85 C4		                STA     SUM32		    ; Year or Hour
   255 43D8					STXY	SUM32+1		    ; X=Month/Minutes, Y=Day/Seconds
Macro: STXY [Source: macros.inc]
     1 43D8 86 C5			STX	SUM32+1
     2 43DA 84 C6			STY	SUM32+1+1
Source: boot_sys_os.asm
   256 43DC A0 02		                LDY     #$02		    ; 3 bytes to convert
   257 43DE B9 C4 00		CONVERT_BCD     LDA     SUM32,Y		    ; Get byte
   258 43E1 20 48 4F		                JSR     BCD_TO_BIN	    ; Convert BCD to 8-bit binary
   259 43E4 99 C4 00 88		                STA     SUM32,Y-	    ; Store result back
   260 43E8 10 F4		                BPL     CONVERT_BCD	    ; branch if not done yet
   261 43EA 60			                RTS			    ; return
   262
   263 				; **** Copy First block of File to memory **************************************
   264 				; Input:
   265 				; ******************************************************************************
   266 43EB 20 5E 44		COPY_BLK0_DEST	JSR	INIT_FBUF_PTR		; PSTR = Ptr(FILE_BUFF)
   267 43EE					LDA.EQ	FTYPE BASFILE		; 0 = .BAS, 1=.COM, 2=.EXE, branch if .BAS file
Macro: LDA.EQ [Source: macros.inc]
     1 43EE AD 54 44				LDA	FTYPE
     2 43F1 F0 2A				BEQ	BASFILE
Source: boot_sys_os.asm
   268 43F3					CMP.EQ	#1 COMFILE		; branch if a .COM file
Macro: CMP.EQ [Source: macros.inc]
     1 43F3 C9 01				CMP	#1
     2 43F5 F0 16				BEQ	COMFILE
Source: boot_sys_os.asm
   269 						
   270 						; .EXE file (FTYPE=2)
   271 43F7 AD 00 1C 8D F7 44			MVA	FILE_BUFF OS_PROG	; load- and run-address LSB = FILE_BUFF LSB
   272 43FD 85 CC				STA	END_PTR			; destination address LSB
   273 43FF AD 01 1C 8D F8 44			MVA	FILE_BUFF+1 OS_PROG+1	; load- and run-address MSB = FILE_BUFF MSB
   274 4405 85 CD				STA	END_PTR+1		; destination address MSB
   275 4407 A9 02 85 EA				MVA	#<FILE_BUFF+2 PSTR	; load-address offset: start-address = 2nd byte in FILE_BUFF
   276 440B D0 1C				BNE	COPY_BLK_DEST		; branch always
   277 						
   278 						; .COM file  (FTYPE=1)
   279 440D A9 00 8D F7 44	COMFILE		MVA	#<COM_RUN_ADDR OS_PROG	 ; Load- and run-address LSB
   280 4412 85 CC				STA	END_PTR			 ; destination address LSB
   281 4414 A9 30 8D F8 44			MVA	#>COM_RUN_ADDR OS_PROG+1	 ; load- and run-address MSB
   282 4419 85 CD				STA	END_PTR+1		 ; destination address MSB
   283 441B D0 0C				BNE	COPY_BLK_DEST		 ; branch always
   284 						
   285 						; .BAS file (FTYPE=0)
   286 441D A9 00 85 CC A9 20 + BASFILE		MWA	#BAS_LOAD_ADDR END_PTR	; destination = BAS_LOAD_ADDR, 1st 2 bytes contain end-address
   287 4425 A9 02 85 EA				MVA	#<FILE_BUFF+2 PSTR	; skip first 2 bytes of .BAS file (contains $00 $20)
   288 						
   289 				; **** Copy Second and other blocks of File to Memory **************************
   290 				; Input: PSTR   : pointer to memory-source
   291 				;        END_PTR: pointer to memory-destination
   292 				; ******************************************************************************
   293 4429 AD 28 18		COPY_BLK_DEST	LDA	DBG_PRINT		; 1 = Debug print info
   294 442C F0 23				BEQ	CPBD_NO_DBG
   295 442E					PRCH	'['
Macro: PRCH [Source: macros.inc]
     1 442E A9 5B			LDA	#'['
     2 4430 20 52 E0			JSR	COUT
Source: boot_sys_os.asm
   296 4433					PRHEX16	PSTR
Macro: PRHEX16 [Source: macros.inc]
     1 4433 A5 EB			LDA	PSTR+1				; print MSB
     2 4435 20 91 E0			JSR	HEXOUT
     3 4438 A5 EA			LDA	PSTR
     4 443A 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_os.asm
   297 443D					PRCH	','
Macro: PRCH [Source: macros.inc]
     1 443D A9 2C			LDA	#','
     2 443F 20 52 E0			JSR	COUT
Source: boot_sys_os.asm
   298 4442					PRHEX16	END_PTR
Macro: PRHEX16 [Source: macros.inc]
     1 4442 A5 CD			LDA	END_PTR+1				; print MSB
     2 4444 20 91 E0			JSR	HEXOUT
     3 4447 A5 CC			LDA	END_PTR
     4 4449 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_os.asm
   299 444C					PRCH	']'
Macro: PRCH [Source: macros.inc]
     1 444C A9 5D			LDA	#']'
     2 444E 20 52 E0			JSR	COUT
Source: boot_sys_os.asm
   300 4451 4C 38 1E		CPBD_NO_DBG	JMP	MON_RAM_BLOCK.CP_BLK_DEST	; RAM-BANK save copy page (512 bytes)
   301 						
   302 4454 00			FTYPE		.byte  	$00				; 0 = .BAS, 1=.COM, 2=.EXE
   303
   304 				; **** Init File Buffer ********************************************************
   305 				; This routine sets BLKBUFL/BLKBUFH to FILE_BUFF
   306 				; ******************************************************************************
   307 4455 A9 00 85 DC A9 1C + INIT_FILE_BUFF	MWA	#FILE_BUFF BLKBUFL	; macro BLKBUF = FILE_BUFF
   308 445D 60					RTS				; return
   309 						
   310 				; **** Init File-buffer pointer ************************************************
   311 				; This routine sets PSTR to FILE_BUFF
   312 				; ******************************************************************************
   313 445E A9 00 85 EA A9 1C + INIT_FBUF_PTR	MWA	#FILE_BUFF PSTR		; macro PSTR = FILE_BUFF
   314 4466 60					RTS				; return
   315
   316 				; **** Load BAS/COM/EXE File ***************************************************
   317 				; Input: CURR_CLUSTER: cluster nr of file to load
   318 				; ******************************************************************************
   319 4467 20 DC 48		OS_LOAD_FILE    JSR     OS_FILE_EMPTY       		; check if filesize is 0
   320 446A 90 01		                BCC     OS_LOAD_COM2			; branch if file is not empty
   321 						
   322 446C 60			                RTS                         		; filesize is 0, just do nothing
   323 						
   324 446D			OS_LOAD_COM2    LDXYI   CURR_CLUSTER      		; current cluster nr
Macro: LDXYI [Source: macros.inc]
     1 446D A2 A0			LDX	<CURR_CLUSTER				; MADS makes this immediate
     2 446F A0 00			LDY	>CURR_CLUSTER
Source: boot_sys_os.asm
   325 4471 20 01 41		                JSR     CLSTR_TO_BLK        		; convert cluster number to LBA number in NUM32
   326 4474 A9 00 85 AB		                MVA     #$00 BCNT              		; init. block counter
   327 						; Emile: This was apparently an error: SCNT was not initialized, now added here
   328 4478 AD 0B 04 85 AD	                MVA     D_SECT_PER_CLST SCNT   		; SCNT = numbers of sectors per cluster
   329 447D A0 1D		                LDY     #D_FILE_SIZE+1      		; index to file size in dir. entry
   330 447F B1 A8		                LDA     (CURR_DIR_ENTRY),Y  		; load file size byte 1
   331 4481 4A			                LSR                         		; check if bit 0 is set (bytes 256-511 of buffer)
   332 4482 48			                PHA			    		; save byte: now contains file-size in blocks of 512 bytes
   333 4483 B0 06		                BCS     LOAD_COM1           		; yes, add one block
   334 						
   335 4485 88			                DEY					; now points to D_FILE_SIZE LSB
   336 4486			                LDA.EQ  (CURR_DIR_ENTRY),Y LOAD_COM1	; load file size byte 0, branch if 0
Macro: LDA.EQ [Source: macros.inc]
     1 4486 B1 A8				LDA	(CURR_DIR_ENTRY),Y
     2 4488 F0 01				BEQ	LOAD_COM1
Source: boot_sys_os.asm
   337 448A 38			                SEC                         		; yes, add one block
   338 448B 68			LOAD_COM1       PLA
   339 448C 65 AB 85 AB		                ADC:STA BCNT                		; calc used blocks, BCNT now contains number of blocks
   340 4490			                CMP.CS  #89 OS_SIZE_ERR         	; branch if file is too big (>88 blocks, 44 KB, $3000-$E000)
Macro: CMP.CS [Source: macros.inc]
     1 4490 C9 59				CMP	#89			; 
     2 4492 B0 28				BCS	OS_SIZE_ERR			; branch if C=1 (A-b1 >= 0)
Source: boot_sys_os.asm
   341 						
   342 4494 A0 1E		                LDY     #D_FILE_SIZE+2      		; index to file size entry
   343 4496			                LDA.NE  (CURR_DIR_ENTRY),Y OS_SIZE_ERR	; load file size byte 2, branch if > 0 -> file is too big
Macro: LDA.NE [Source: macros.inc]
     1 4496 B1 A8				LDA	(CURR_DIR_ENTRY),Y
     2 4498 D0 22				BNE	OS_SIZE_ERR
Source: boot_sys_os.asm
   344 449A C8			                INY					; D_FILE_SIZE+3
   345 449B			                LDA.NE  (CURR_DIR_ENTRY),Y OS_SIZE_ERR 	; load D_FILE_SIZE+3, branch if > 0 -> file is too big
Macro: LDA.NE [Source: macros.inc]
     1 449B B1 A8				LDA	(CURR_DIR_ENTRY),Y
     2 449D D0 1D				BNE	OS_SIZE_ERR
Source: boot_sys_os.asm
   346 						
   347 						; Read first part of file into FILE_BUFF
   348 449F 20 55 44				JSR	INIT_FILE_BUFF			; Set BLKBUF pointer to FILE_BUFF
   349 44A2			                LDXYI   NUM32		    		; NUM32 contains LBA of cluster to read
Macro: LDXYI [Source: macros.inc]
     1 44A2 A2 C0			LDX	<NUM32				; MADS makes this immediate
     2 44A4 A0 00			LDY	>NUM32
Source: boot_sys_os.asm
   350 44A6 20 50 41		                JSR     DEV_RD_LBLK         		; Read first block of file into FILE_BUFF
   351 44A9 20 EB 43				JSR	COPY_BLK0_DEST			; Copy first block to destination
   352 44AC					DEC.EQ	BCNT OS_EXEC_CHK		; Branch if #blocks to read is 1
Macro: DEC.EQ [Source: macros.inc]
     1 44AC C6 AB				DEC	BCNT
     2 44AE F0 3E				BEQ	OS_EXEC_CHK
Source: boot_sys_os.asm
   353 44B0					DEC.EQ  SCNT NEXT_CLUSTER0     		; Branch if sectors/cluster is 1
Macro: DEC.EQ [Source: macros.inc]
     1 44B0 C6 AD				DEC	SCNT
     2 44B2 F0 2A				BEQ	NEXT_CLUSTER0
Source: boot_sys_os.asm
   354 						
   355 44B4 20 C3 44		                JSR     LOAD_NEXT_BLKS	    		; Load next blocks of file and execute it
   356 44B7 A9 25		                LDA     #HDD1_ID   	    		; Replace by D_DEV_ID?
   357 44B9 4C AA E1				JMP     OPEN_DEVICE			; Init. device driver again and return
   358 						
   359 44BC			OS_SIZE_ERR     LDXYI   MSG_SIZE_ERR      		; load error message...
Macro: LDXYI [Source: macros.inc]
     1 44BC A2 33			LDX	<MSG_SIZE_ERR				; MADS makes this immediate
     2 44BE A0 4C			LDY	>MSG_SIZE_ERR
Source: boot_sys_os.asm
   360 44C0 4C 71 4A		                JMP     OS_PRINT_ERR			; Print it
   361
   362 				; **** Read Next File Blocks ***************************************************
   363 				; ******************************************************************************
   364 44C3 20 86 41		LOAD_NEXT_BLKS  JSR     INC_32              		; Increment LBA block address in NUM32
   365 44C6 20 55 44		LOAD_BLK0       JSR	INIT_FILE_BUFF			; Set BLKBUF pointer to FILE_BUFF
   366 44C9					LDXYI   NUM32		    		; NUM32 contains LBA of cluster to read
Macro: LDXYI [Source: macros.inc]
     1 44C9 A2 C0			LDX	<NUM32				; MADS makes this immediate
     2 44CB A0 00			LDY	>NUM32
Source: boot_sys_os.asm
   367 44CD 20 50 41		                JSR     DEV_RD_LBLK         		; and read next block of file into FILE_BUFF
   368 44D0 20 5E 44				JSR	INIT_FBUF_PTR			; reset file-buffer pointer PSTR to FILE_BUFF again
   369 44D3 20 29 44				JSR	COPY_BLK_DEST	    		; Copy block to destination
   370 44D6			                DEC.EQ  BCNT OS_EXEC_CHK      		; branch if no more blocks to read
Macro: DEC.EQ [Source: macros.inc]
     1 44D6 C6 AB				DEC	BCNT
     2 44D8 F0 14				BEQ	OS_EXEC_CHK
Source: boot_sys_os.asm
   371 44DA					DEC.NE  SCNT LOAD_NEXT_BLKS    		; branch if more blocks in cluster to read
Macro: DEC.NE [Source: macros.inc]
     1 44DA C6 AD				DEC	SCNT
     2 44DC D0 E5				BNE	LOAD_NEXT_BLKS
Source: boot_sys_os.asm
   372
   373 				; next cluster needs to be loaded considering the volume FAT type **************
   374 44DE 20 83 40		NEXT_CLUSTER0   JSR     GET_NEXT_CLSTR	   		; Get next cluster from FAT table in CURR_CLUSTER.
   375 44E1 B0 0B		                BCS     OS_EXEC_CHK	    		; C=1, EOF, go execute File
   376 							
   377 44E3 20 FD 40		                JSR     CLUSTER_TO_BLK	    		; convert CURR_CLUSTER to LBA number in NUM32.
   378 44E6 AD 0B 04 85 AD	                MVA     D_SECT_PER_CLST SCNT   		; SCNT = numbers of sectors per cluster
   379 44EB 4C C6 44		                JMP     LOAD_BLK0	    		; branch always
   380 						
   381 				; Run file if needed ***********************************************************
   382 				; ******************************************************************************
   383 44EE			OS_EXEC_CHK	LDA.NE	FTYPE OS_EXECUTE		; 0 = .BAS, 1=.COM, 2=.EXE, branch if an executable file
Macro: LDA.NE [Source: macros.inc]
     1 44EE AD 54 44				LDA	FTYPE
     2 44F1 D0 01				BNE	OS_EXECUTE
Source: boot_sys_os.asm
   384 44F3 60					RTS					; return in case of a .BAS file
   385
   386 				; **** Execute File ************************************************************
   387 				; Input:  Ptr[OS_PROG] to Start Address
   388 				; Output: A - Result Code
   389 				; ******************************************************************************
   390 44F4 6C F7 44		OS_EXECUTE      JMP     (OS_PROG)           		; run .com or .exe file
   391 44F7 00 00		OS_PROG         .word      $0000
   392 				                
   393 				; **** Save the contents of a file to disk *************************************
   394 				; OS_CREATE/OS_CREATE_FILE has already created an entry in the current directory
   395 				; and allocated the first free cluster (in CURR_CLUSTER) to the file. If the file
   396 				; existed, it was deleted first, so you always have a new first cluster number. 
   397 				; This routine writes all sectors of this file and updates (=links clusters 
   398 				; together) the FAT table. 
   399 				; Input: FREE_CLUSTER: first cluster nr of file to save
   400 				; ******************************************************************************
   401 44F9			OS_SAVE_FILE	LDXYI   FREE_CLUSTER      		; free cluster nr, first cluster of created file
Macro: LDXYI [Source: macros.inc]
     1 44F9 A2 20			LDX	<FREE_CLUSTER				; MADS makes this immediate
     2 44FB A0 18			LDY	>FREE_CLUSTER
Source: boot_sys_os.asm
   402 44FD 20 01 41		                JSR     CLSTR_TO_BLK        		; convert cluster number to LBA number in NUM32
   403 4500 A9 FE 8D D3 45 A9 + 		MWA	#$1FFE FSAVE_PTR		; Init. BLKBUF to start of .BAS file to save
   404 450A A9 00 8D FE 1F A9 + 		MWA	#$2000 $1FFE			; Set first word of Basic file to start-address
   405 4514 AD E2 56 85 AB	                MVA     SAVE_SECS BCNT      		; init. block counter, SAVE_SECS was calculated by CFC_SAVE
   406 4519 AD 0B 04 85 AD	                MVA     D_SECT_PER_CLST SCNT   		; SCNT = numbers of sectors per cluster
   407 451E A9 01 8D 90 58			MVA	#1 SIS_CNT			; #clusters allocated
   408
   409 				; Write sectors/cluster until --BCNT = 0
   410 4523 AD D3 45 85 DC AD + SAVE_NXT_BLK	MWA	FSAVE_PTR BLKBUF		; BLKBUF = FSAVE_PTR
   411 452D					LDXYI	NUM32				; LBA number
Macro: LDXYI [Source: macros.inc]
     1 452D A2 C0			LDX	<NUM32				; MADS makes this immediate
     2 452F A0 00			LDY	>NUM32
Source: boot_sys_os.asm
   412 4531 20 98 1E				JSR	MON_RAM_BLOCK.DEV_WR_LBLK	; Write another sector to disk (RAM-BANK save write)
   413 4534					LDXYI	OS_SV_ERR1			; 'OS_SAVE_FILE: Write error'
Macro: LDXYI [Source: macros.inc]
     1 4534 A2 84			LDX	<OS_SV_ERR1				; MADS makes this immediate
     2 4536 A0 45			LDY	>OS_SV_ERR1
Source: boot_sys_os.asm
   414 4538 90 3F				BCC	OS_SAVE_ERR			; Branch on error
   415 						
   416 453A EE D4 45 EE D4 45		:2	INC	FSAVE_PTR+1			; BLKBUF += $0200, points to next block in memory to save
   417 4540			                DEC.EQ  BCNT OS_SAVE_X      		; branch if no more blocks to write
Macro: DEC.EQ [Source: macros.inc]
     1 4540 C6 AB				DEC	BCNT
     2 4542 F0 3A				BEQ	OS_SAVE_X
Source: boot_sys_os.asm
   418 4544					DEC.EQ  SCNT SAVE_NXT_CLSTR    		; branch if more blocks in cluster to write
Macro: DEC.EQ [Source: macros.inc]
     1 4544 C6 AD				DEC	SCNT
     2 4546 F0 06				BEQ	SAVE_NXT_CLSTR
Source: boot_sys_os.asm
   419 4548 20 86 41				JSR     INC_32				; Increment LBA block address in NUM32
   420 454B 4C 23 45				JMP	SAVE_NXT_BLK			; branch always
   421 						
   422 				; next cluster needs to be allocated considering the volume FAT type **************
   423 454E			SAVE_NXT_CLSTR	MVAX	4 FREE_CLUSTER PREV_CLUSTER	; PREV_CLUSTER = FREE_CLUSTER
Macro: MVAX [Source: macros.inc]
     1 454E A2 03			LDX	#4-1
     2 4550 BD 20 18 9D 80 45 + lp	MVA	FREE_CLUSTER,X PREV_CLUSTER,X-
     3 4557 10 F7			BPL	lp
Source: boot_sys_os.asm
   424 4559 20 C2 47				JSR     OS_ADD_CLUSTER	   		; Find next free cluster in FAT and allocates it (does NOT write FAT back to disk)
   425 455C 20 D5 45				JSR	LINK_FAT_ENTRY			; Link new FREE_CLUSTER to PREV_CLUSTER (does NOT write FAT back to disk)
   426 455F 20 07 43				JSR	OS_SAVE_FAT			; Write updated FAT buffer back to disk
   427 4562					LDXYI	OS_SV_ERR2			; 'FAT write error'
Macro: LDXYI [Source: macros.inc]
     1 4562 A2 A4			LDX	<OS_SV_ERR2				; MADS makes this immediate
     2 4564 A0 45			LDY	>OS_SV_ERR2
Source: boot_sys_os.asm
   428 4566 90 11				BCC	OS_SAVE_ERR			; Branch on error
   429 						
   430 4568 EE 90 58				INC	SIS_CNT				; #clusters allocated += 1
   431 456B					LDXYI   FREE_CLUSTER      		; free cluster nr, first cluster of created file
Macro: LDXYI [Source: macros.inc]
     1 456B A2 20			LDX	<FREE_CLUSTER				; MADS makes this immediate
     2 456D A0 18			LDY	>FREE_CLUSTER
Source: boot_sys_os.asm
   432 456F 20 01 41		                JSR     CLSTR_TO_BLK	    		; convert FREE_CLUSTER to LBA number in NUM32.
   433 4572 AD 0B 04 85 AD	                MVA     D_SECT_PER_CLST SCNT   		; SCNT = numbers of sectors per cluster
   434 4577 D0 AA		                BNE     SAVE_NXT_BLK	    		; branch always
   435
   436 4579 20 82 F6		OS_SAVE_ERR	JSR	OS_STRING_OUT			; Print error message
   437 457C 18					CLC					; C=0, error
   438 457D 60					RTS					; return
   439 457E 38			OS_SAVE_X	SEC					; C=1, oke
   440 457F 60					RTS					; return
   441
   442 4580 00 00 00 00		PREV_CLUSTER	.dword 	$00000000			; Previous cluster nr of file
   443 4584 4F 53 5F 53 41 56 + OS_SV_ERR1	.by	'OS_SAVE_FILE: File write error' CR $00
   444 45A4 4F 53 5F 53 41 56 + OS_SV_ERR2	.by	'OS_SAVE_FILE: FAT write error' CR $00
   445 45C3 46 41 54 20 4C 69 + TXT_LINK	.by	'FAT Link: ' $00
   446 45CE 20 74 6F 20 00	TXT_LINK2	.by	' to ' $00
   447 45D3 00 00		FSAVE_PTR	.word	$0000				; File-save Pointer
   448
   449 				; ******************************************************************************
   450 				; Links a new cluster (FREE_CLUSTER) to the current cluster (PREV_CLUSTER) of a file.
   451 				; It also updates (writes) the FAT table.
   452 				; ******************************************************************************
   453 45D5			LINK_FAT_ENTRY	PRSTR	TXT_LINK
Macro: PRSTR [Source: macros.inc]
     1 45D5 A2 C3			LDX	<TXT_LINK				; MADS makes this immediate
     2 45D7 A0 45			LDY	>TXT_LINK
Source: boot_sys_os.asm
     2 45D9 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_os.asm
   454 45DC					PRHEX16	PREV_CLUSTER
Macro: PRHEX16 [Source: macros.inc]
     1 45DC AD 81 45			LDA	PREV_CLUSTER+1				; print MSB
     2 45DF 20 91 E0			JSR	HEXOUT
     3 45E2 AD 80 45			LDA	PREV_CLUSTER
     4 45E5 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_os.asm
   455 45E8					PRSTR	TXT_LINK2
Macro: PRSTR [Source: macros.inc]
     1 45E8 A2 CE			LDX	<TXT_LINK2				; MADS makes this immediate
     2 45EA A0 45			LDY	>TXT_LINK2
Source: boot_sys_os.asm
     2 45EC 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_os.asm
   456 45EF					PRHEX16	FREE_CLUSTER
Macro: PRHEX16 [Source: macros.inc]
     1 45EF AD 21 18			LDA	FREE_CLUSTER+1				; print MSB
     2 45F2 20 91 E0			JSR	HEXOUT
     3 45F5 AD 20 18			LDA	FREE_CLUSTER
     4 45F8 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_os.asm
   457 45FB 20 5A E0				JSR	CROUT				; Print CR
   458 45FE AD 80 45				LDA	PREV_CLUSTER			; get LSB of PREV_CLUSTER
   459 4601 0A 0A			:2	ASL					; SHL2, DWORD index in FAT page
   460 4603 A8					TAY					; Y = DWORD byte 0 in FAT page
   461 4604 AD 81 45				LDA	PREV_CLUSTER+1
   462 4607 4A					LSR					; check bit 0 of PREV_CLUSTER[1]
   463 4608 B0 19				BCS	LINK_UPPER_PAGE			; if bit 0 = 1 then write byte to upper half of block
   464 						
   465 						; lower half block of Buffer
   466 460A AD 20 18 99 00 06 + 		MWA	FREE_CLUSTER   FAT_BUF,Y	; Write CURR_CLUSTER nr into PREV_CLUSTER FAT entry
   467 4616 AD 22 18 99 02 06 + 		MWA	FREE_CLUSTER+2 FAT_BUF+2,Y
   468 4622 60					RTS					; return
   469 						
   470 						; upper half block of Buffer
   471 4623 AD 20 18 99 00 07 + LINK_UPPER_PAGE	MWA	FREE_CLUSTER   FAT_BUF+256,Y
   472 462F AD 22 18 99 02 07 + 		MWA	FREE_CLUSTER+2 FAT_BUF+258,Y
   473 463B 60					RTS					; return
   474
   475 				; ******************************************************************************
   476 463C			INIT_FREE_CLUSTER
   477 463C A9 02 8D 20 18 A9 + 		MWA	#$02 FREE_CLUSTER		; first data cluster is $000002
   478 4646 8D 22 18				STA     FREE_CLUSTER+2
   479 4649 8D 23 18		                STA     FREE_CLUSTER+3
   480 464C 60			                RTS
   481 				                
   482 				; ******************************************************************************
   483 				; Input: FREE_CLUSTER: number of possible free cluster
   484 				; Output: C=1: CURR_CLUSTER is free ; C=0: 
   485 				; ******************************************************************************
   486 464D			OS_NEXT_FREE_CLUSTER
   487 464D			                MVAX	4 FREE_CLUSTER CURR_CLUSTER	; CURR_CLUSTER = FREE_CLUSTER
Macro: MVAX [Source: macros.inc]
     1 464D A2 03			LDX	#4-1
     2 464F BD 20 18 95 A0 CA	lp	MVA	FREE_CLUSTER,X CURR_CLUSTER,X-
     3 4655 10 F8			BPL	lp
Source: boot_sys_os.asm
   488 4657 20 83 40		                JSR     GET_NEXT_CLSTR      		; get FAT entry for current cluster
   489 465A A2 03		                LDX     #$03
   490 465C			CHK_FREE        LDA.NE  CURR_CLUSTER,X SET_NEXT_CLSTR	; branch if cluster is not free
Macro: LDA.NE [Source: macros.inc]
     1 465C B5 A0				LDA	CURR_CLUSTER,X
     2 465E D0 05				BNE	SET_NEXT_CLSTR
Source: boot_sys_os.asm
   491 4660			                DEX.PL	CHK_FREE	    		; branch if not all bytes checked
Macro: DEX.PL [Source: macros.inc]
     1 4660 CA					DEX
     2 4661 10 F9				BPL	CHK_FREE
Source: boot_sys_os.asm
   492 4663 38			                SEC                         		; cluster is free, exit with C = 1
   493 4664 60			                RTS
   494
   495 				; ******************************************************************************
   496 				; This routines increments FREE_CLUSTER by 1, called from OS_NEXT_FREE_CLUSTER.
   497 				; ******************************************************************************
   498 4665 A2 00		SET_NEXT_CLSTR  LDX     #$00
   499 4667			INC_FREE_CLSTR  INC.NE  FREE_CLUSTER,X CHK_MAX_FAT 		; increment FREE_CLUSTER[0:3], branch if no overflow
Macro: INC.NE [Source: macros.inc]
     1 4667 FE 20 18				INC	FREE_CLUSTER,X
     2 466A D0 05				BNE	CHK_MAX_FAT
Source: boot_sys_os.asm
   500 466C E8			                INX						; next byte of FREE_CLUSTER
   501 466D			                CPX.NE  #$04 INC_FREE_CLSTR	 		; branch if not done yet
Macro: CPX.NE [Source: macros.inc]
     1 466D E0 04				CPX	#$04
     2 466F D0 F6				BNE	INC_FREE_CLSTR
Source: boot_sys_os.asm
   502 						
   503 4671 A2 03		CHK_MAX_FAT     LDX     #03					; 3 bytes to check
   504 4673 B5 A4		CHK_MAX_FAT2    LDA     CURR_FAT_BLK,X	    			; LBA of current FAT block
   505 4675			                CMP.CC  D_START_FAT2,X OS_NEXT_FREE_CLUSTER	; end of FAT1 reached? No, check next FAT entry
Macro: CMP.CC [Source: macros.inc]
     1 4675 DD 18 04				CMP	D_START_FAT2,X			; 
     2 4678 90 D3				BCC	OS_NEXT_FREE_CLUSTER			; branch if C=0 (A-b1 < 0)
Source: boot_sys_os.asm
   506 467A			                DEX.PL  CHK_MAX_FAT2	      			; branch if not done yet
Macro: DEX.PL [Source: macros.inc]
     1 467A CA					DEX
     2 467B 10 F6				BPL	CHK_MAX_FAT2
Source: boot_sys_os.asm
   507 467D 18			                CLC                         			; no emtpy cluster found, exit with error
   508 467E 60			                RTS
   509
   510 				; ******************************************************************************
   511 				; This routine sets a DWORD in the FAT sector from free to allocated, it is 
   512 				; called from OS_ADD_CLUSTER. The correct FAT page has already been loaded into 
   513 				; FAT_BUF ($600) by OS_NEXT_FREE_CLUSTER -> GET_NEXT_CLUSTER. So the cluster nr
   514 				; in FREE_CLUSTER needs to be allocated in the FAT table.
   515 				; ******************************************************************************
   516 467F			UPDATE_FAT_TABLE
   517 467F AD 28 18				LDA	DBG_PRINT		; 1 = Print debug info
   518 4682 F0 16				BEQ	UPD_NO_DBG
   519 4684					PRCH	'['			; Print [
Macro: PRCH [Source: macros.inc]
     1 4684 A9 5B			LDA	#'['
     2 4686 20 52 E0			JSR	COUT
Source: boot_sys_os.asm
   520 4689					PRHEX16	FREE_CLUSTER		; Print FREE_CLUSTER
Macro: PRHEX16 [Source: macros.inc]
     1 4689 AD 21 18			LDA	FREE_CLUSTER+1				; print MSB
     2 468C 20 91 E0			JSR	HEXOUT
     3 468F AD 20 18			LDA	FREE_CLUSTER
     4 4692 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_os.asm
   521 4695					PRCH	']'
Macro: PRCH [Source: macros.inc]
     1 4695 A9 5D			LDA	#']'
     2 4697 20 52 E0			JSR	COUT
Source: boot_sys_os.asm
   522 469A AD 20 18		UPD_NO_DBG	LDA	FREE_CLUSTER		; get LSB of cluster nr
   523 469D 0A 0A			:2	ASL				; SHL2, DWORD index in FAT page
   524 469F A8					TAY				; Y = DWORD byte 0 in FAT page
   525 					.rept 3					; Write 3 x $FF into FAT entry
   526 						LDA	#$FF			
   527 						JSR	WRITE_ENTRY_BYTE	
   528 						INY				
   529 					.endr	
Source: REPT
   526 46A0 A9 FF				LDA	#$FF			
   526 46A2 20 B7 46				JSR	WRITE_ENTRY_BYTE	
   526 46A5 C8					INY				
   526 46A6 A9 FF				LDA	#$FF			
   526 46A8 20 B7 46				JSR	WRITE_ENTRY_BYTE	
   526 46AB C8					INY				
   526 46AC A9 FF				LDA	#$FF			
   526 46AE 20 B7 46				JSR	WRITE_ENTRY_BYTE	
   526 46B1 C8					INY				
Source: boot_sys_os.asm
   530 46B2 A9 0F				LDA	#$0F			; write end marker
   531 46B4 4C B7 46				JMP	WRITE_ENTRY_BYTE	; Write 4th byte ($0F) and return
   532 						
   533 				; **** Write a Single FAT Entry Byte To Block Buffer ***************************
   534 				; INPUT : A = Write Data
   535 				;         Y - Index To FAT Entry Byte
   536 				; ******************************************************************************
   537 46B7			WRITE_ENTRY_BYTE
   538 46B7 AA					TAX
   539 46B8 AD 21 18		                LDA     FREE_CLUSTER+1
   540 46BB 4A			                LSR				; check bit 0 of free_cluster[1]
   541 46BC 8A			                TXA
   542 46BD B0 04		                BCS     WR_UPPER_PAGE       	; if bit 0 = 1 then write byte to upper half of block
   543 						
   544 46BF 99 00 06		                STA     FAT_BUF,Y		; write entry byte to lower half of block buffer
   545 46C2 60					RTS				
   546 						
   547 46C3 99 00 07		WR_UPPER_PAGE   STA     FAT_BUF+256,Y		; write entry byte to upper half of block buffer
   548 46C6 60					RTS
   549 				                
   550 				; **** Add Date and Time to subdir entry ***************************************
   551 				; ******************************************************************************
   552 46C7			ADD_DATE_TIME	; Write create-Date and Last-write Date
   553 46C7 20 AF 43				JSR     OS_FILEDATE         	; get current date as file date
   554 46CA 98			                TYA				; Y = MSB
   555 46CB A0 19		                LDY     #D_LAST_WR_DATE+1     	; set index to last write date MSB
   556 46CD 91 DC		                STA     (BLKBUF),Y  		; store MSB of file last write date
   557 46CF A0 11		                LDY     #D_CREATE_DATE+1     	; set index to create date MSB
   558 46D1 91 DC 88		                STA     (BLKBUF),Y-  		; store MSB of file create date
   559 46D4 8A			                TXA				; X = LSB
   560 46D5 91 DC		                STA     (BLKBUF),Y  		; store LSB of file create date
   561 46D7 A0 18		                LDY     #D_LAST_WR_DATE     	; set index to last write date LSB
   562 46D9 91 DC		                STA     (BLKBUF),Y  		; store LSB of file date
   563
   564 						; Write create-Time and last-write Time
   565 46DB 20 8A 43		                JSR     OS_FILETIME         	; get current time as file time
   566 46DE 98			                TYA				; Y = MSB
   567 46DF A0 17		                LDY     #D_LAST_WR_TIME+1     	; set index to last write time MSB
   568 46E1 91 DC		                STA     (BLKBUF),Y  		; store MSB of file last write time
   569 46E3 A0 0F		                LDY     #D_CREATE_TIME+1     	; set index to create time MSB
   570 46E5 91 DC 88		                STA     (BLKBUF),Y-  		; store MSB of file create date
   571 46E8 8A			                TXA				; X = LSB
   572 46E9 91 DC		                STA     (BLKBUF),Y  		; store LSB byte of file create time
   573 46EB A0 16		                LDY     #D_LAST_WR_TIME     	; set index to last write time LSB
   574 46ED 91 DC		                STA     (BLKBUF),Y  		; store LSB of file last write time
   575 46EF 60					RTS
   576 						
   577 				; **** Add new subdirectory entry to dir buffer ********************************
   578 				; Input: X=1: . subdir, X=2: .. subdir
   579 				; ******************************************************************************
   580 46F0 8A			ADD_NEW_SUBDIR	TXA					; . or .. subdir
   581 46F1 48					PHA					; save it
   582 46F2 A0 00				LDY	#D_FILENAME			; Filename entry
   583 46F4 A9 20 91 DC C8	ANS_FILL_FN	MVA     #' ' (BLKBUF),Y+			; Fill filename entry with spaces
   584 46F9			                CPY.CC  #D_ATTRIBUTES ANS_FILL_FN	; branch if not all chars copied
Macro: CPY.CC [Source: macros.inc]
     1 46F9 C0 0B				CPY	#D_ATTRIBUTES			; 
     2 46FB 90 F7				BCC	ANS_FILL_FN			; branch if C=0 (Y-b1 < 0)
Source: boot_sys_os.asm
   585
   586 46FD A9 10 91 DC				MVA	#FA_DIRECTORY (BLKBUF),Y		; set directory attribute
   587 4701 A0 00				LDY	#D_FILENAME			; Filename entry
   588 4703 A9 2E				LDA	#'.'				; 1 or 2 dots for subdir name
   589 4705 91 DC C8		ANS_LP1		STA	(BLKBUF),Y+
   590 4708					DEX.NE	ANS_LP1				; branch if name not done yet
Macro: DEX.NE [Source: macros.inc]
     1 4708 CA					DEX
     2 4709 D0 FA				BNE	ANS_LP1
Source: boot_sys_os.asm
   591
   592 470B 20 C7 46				JSR	ADD_DATE_TIME			; Add date and time to subdir entry
   593 470E 68					PLA
   594 470F					CMP.NE	#1 PARENT_DIR			; branch if .. Subdir
Macro: CMP.NE [Source: macros.inc]
     1 470F C9 01				CMP	#1
     2 4711 D0 1B				BNE	PARENT_DIR
Source: boot_sys_os.asm
   595 					
   596 						; Current subdir .: Write File Cluster Nr High and Low
   597 4713 A0 15				LDY	#D_START_CLSTH+1		; index of MSB of 1st_cluster_high
   598 4715 AD 23 18 91 DC 88			MVA	FREE_CLUSTER+3 (BLKBUF),Y-	; store in MSB of 1st_cluster_high
   599 471B AD 22 18 91 DC			MVA	FREE_CLUSTER+2 (BLKBUF),Y	; store in LSB of 1st_cluster_high
   600 4720 A0 1B				LDY	#D_START_CLST+1			; index of MSB of 1st_cluster_low
   601 4722 AD 21 18 91 DC 88			MVA	FREE_CLUSTER+1 (BLKBUF),Y-	; store in MSB of 1st_cluster_low
   602 4728 AD 20 18 91 DC			MVA	FREE_CLUSTER   (BLKBUF),Y	; store in LSB of 1st_cluster_low
   603 472D 60					RTS					; return
   604 						
   605 						; Parent subdir ..: Write File Cluster Nr High and Low
   606 472E A0 15		PARENT_DIR	LDY	#D_START_CLSTH+1		; index of MSB of 1st_cluster_high
   607 4730 AD 07 04 91 DC 88			MVA	D_ACTUAL_DIR+3 (BLKBUF),Y-	; store in MSB of 1st_cluster_high
   608 4736 AD 06 04 91 DC			MVA	D_ACTUAL_DIR+2 (BLKBUF),Y	; store in LSB of 1st_cluster_high
   609 473B A0 1B				LDY	#D_START_CLST+1			; index of MSB of 1st_cluster_low
   610 473D AD 05 04 91 DC 88			MVA	D_ACTUAL_DIR+1 (BLKBUF),Y-	; store in MSB of 1st_cluster_low
   611 4743 AD 04 04 91 DC			MVA	D_ACTUAL_DIR   (BLKBUF),Y	; store in LSB of 1st_cluster_low
   612 4748 60					RTS
   613 						
   614 				; **** Add new Directory Cluster to Disk ***************************************
   615 				; Create a new Directory Cluster in DIR_BLK_BUF and write . and .. subdirs in it.
   616 				; ******************************************************************************
   617 4749			ADD_NEW_DIR_CLST
   618 4749 A9 00 85 DC A9 02 + 		MWA	#DIR_BLK_BUF BLKBUF	; BLKBUF now points to dir block buffer
   619 4751 A2 01				LDX	#1
   620 4753 A9 00				LDA	#0
   621 4755			ANDIR_LP1	STA.NE	(BLKBUF),Y+ ANDIR_LP1	; Clear dir block buffer (512 bytes) and loop
Macro: STA.NE [Source: macros.inc]
     1 4755 91 DC C8				STA	(BLKBUF),Y+
     2 4758 D0 FB				BNE	ANDIR_LP1
Source: boot_sys_os.asm
   622 475A E6 DD				INC	BLKBUF+1		; next page
   623 475C					DEX.PL	ANDIR_LP1		; branch always
Macro: DEX.PL [Source: macros.inc]
     1 475C CA					DEX
     2 475D 10 F6				BPL	ANDIR_LP1
Source: boot_sys_os.asm
   624 						
   625 475F A9 02 85 DD				MVA	#>DIR_BLK_BUF BLKBUF+1	; Set to begin of buffer again
   626 4763 A2 01				LDX	#1			; 1 = . subdir entry
   627 4765 20 F0 46				JSR	ADD_NEW_SUBDIR		; add subdir . (current dir)
   628 4768 A5 DC 18 69 20 85 + 		ADB	BLKBUFL #$20		; BLKBUF += $20, next dir entry
   629 476F A2 02				LDX	#2			; 2 = .. subdir entry
   630 4771 20 F0 46				JSR	ADD_NEW_SUBDIR		; add subdir .. (parent dir)
   631
   632 						; and write it to disk
   633 4774 AD 28 18				LDA	DBG_PRINT		; 1 = Debug print info
   634 4777 F0 22				BEQ	AND_NO_DBG
   635 4779					PRSTR	TXT_CURR_CLST3		; Print 'ADD_NEW_DIR, FREE=$'
Macro: PRSTR [Source: macros.inc]
     1 4779 A2 A9			LDX	<TXT_CURR_CLST3				; MADS makes this immediate
     2 477B A0 47			LDY	>TXT_CURR_CLST3
Source: boot_sys_os.asm
     2 477D 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_os.asm
   636 4780					PRHEX32	FREE_CLUSTER		; print FREE_CLUSTER in hex
Macro: PRHEX32 [Source: macros.inc]
     1 4780 AD 23 18			LDA	FREE_CLUSTER+2+1				; print MSB
     2 4783 20 91 E0			JSR	HEXOUT
     3 4786 AD 22 18			LDA	FREE_CLUSTER+2
     4 4789 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_os.asm
     1 478C AD 21 18			LDA	FREE_CLUSTER+1				; print MSB
     2 478F 20 91 E0			JSR	HEXOUT
     3 4792 AD 20 18			LDA	FREE_CLUSTER
     4 4795 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_os.asm
Source: boot_sys_os.asm
   637 4798 20 5A E0				JSR	CROUT			; Print CR
   638
   639 479B			AND_NO_DBG	LDXYI	FREE_CLUSTER		; Write new subdir in cluster with FREE_CLUSTER nr
Macro: LDXYI [Source: macros.inc]
     1 479B A2 20			LDX	<FREE_CLUSTER				; MADS makes this immediate
     2 479D A0 18			LDY	>FREE_CLUSTER
Source: boot_sys_os.asm
   640 479F 20 01 41				JSR	CLSTR_TO_BLK		; Convert FREE_CLUSTER nr to LBA nr in num32
   641 47A2					LDXYI	NUM32			; LBA nr
Macro: LDXYI [Source: macros.inc]
     1 47A2 A2 C0			LDX	<NUM32				; MADS makes this immediate
     2 47A4 A0 00			LDY	>NUM32
Source: boot_sys_os.asm
   642 47A6 4C F4 42				JMP	OS_SAVE_DIR		; Save new subdir to disk and return
   643 						
   644 47A9 41 44 44 5F 4E 45 + TXT_CURR_CLST3	.by	'ADD_NEW_DIR_CLST, Free=$' $00
   645
   646 				; **** Add First Cluster To Empty File *****************************************
   647 				; Note: does NOT write FAT table back to disk, only FAT table in memory is updated.
   648 				; ******************************************************************************
   649 47C2 20 3C 46		OS_ADD_CLUSTER  JSR	INIT_FREE_CLUSTER	; FREE_CLUSTER = 2L
   650 47C5 20 4D 46				JSR     OS_NEXT_FREE_CLUSTER	; Get free cluster in FREE_CLUSTER
   651 47C8 90 03		                BCC     ADD_CLUSTER_END     	; no free cluster found
   652 						
   653 47CA 20 7F 46		                JSR     UPDATE_FAT_TABLE	; Allocate FREE_CLUSTER, does NOT write FAT block back to disk
   654 47CD 60			ADD_CLUSTER_END RTS
   655
   656 				; **** Create New File *********************************************************
   657 				; Input:  A = File Attributes
   658 				; Output: C = 0 - Error; C = 1 - No Error
   659 				;         A = $FF - File/Directory already exists; A <> $FF Write Error Codes
   660 				; ******************************************************************************
   661 47CE 8D 12 18		OS_CREATE       STA     F_ATTRIBS           		; save attributes
   662 47D1			                AND.EQ  #FA_DIRECTORY ADD_FILE 		; create a directory? Branch if not (add a file)
Macro: AND.EQ [Source: macros.inc]
     6 47D1 29 10				AND	#FA_DIRECTORY
     7 47D3 F0 07				BEQ	ADD_FILE
Source: boot_sys_os.asm
   663 						
   664 						; Find directory
   665 47D5 20 F1 48		                JSR     OS_DIR_EXISTS       		; C=1: dirname already exists
   666 47D8 90 21				BCC	OS_CREATE_CONT			; branch if dirname does not exist yet
   667 47DA B0 62				BCS	OS_CREATE_ERR			; branch on error
   668
   669 						; Find file
   670 47DC 20 F7 48		ADD_FILE        JSR     OS_FILE_EXISTS      		; check if file already exists
   671 47DF 90 1A				BCC	OS_CREATE_CONT			; branch if file does not exist
   672 						
   673 						; delete file (SH_DEL)	
   674 47E1					PRSTR	TXT_OVERWRITE			; Print 'File exists, overwrite (y/n)?'
Macro: PRSTR [Source: macros.inc]
     1 47E1 A2 43			LDX	<TXT_OVERWRITE				; MADS makes this immediate
     2 47E3 A0 48			LDY	>TXT_OVERWRITE
Source: boot_sys_os.asm
     2 47E5 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_os.asm
   675 47E8 20 47 E0				JSR 	CIN           			; get character
   676 47EB 29 DF				AND 	#$DF            		; uppercase chars only
   677 47ED					CMP.NE 	#'Y' OS_CREATE_ERR    		; if not Y then exit with error
Macro: CMP.NE [Source: macros.inc]
     1 47ED C9 59				CMP	#'Y'
     2 47EF D0 4D				BNE	OS_CREATE_ERR
Source: boot_sys_os.asm
   678 47F1					PRSTR	TXT_SH_DEL			; DEBUG
Macro: PRSTR [Source: macros.inc]
     1 47F1 A2 72			LDX	<TXT_SH_DEL				; MADS makes this immediate
     2 47F3 A0 48			LDY	>TXT_SH_DEL
Source: boot_sys_os.asm
     2 47F5 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_os.asm
   679 47F8 20 70 53				JSR	SH_DEL_FILE			; Delete file and update FAT table
   680
   681 47FB 20 C2 47		OS_CREATE_CONT	JSR	OS_ADD_CLUSTER			; Return free cluster in FREE_CLUSTER (does NOT write FAT back to disk)
   682 47FE 20 07 43				JSR	OS_SAVE_FAT			; Write updated FAT buffer back to disk
   683 4801					LDXYI	TXT_CR_ERR1			; 'FAT Save Error'
Macro: LDXYI [Source: macros.inc]
     1 4801 A2 84			LDX	<TXT_CR_ERR1				; MADS makes this immediate
     2 4803 A0 48			LDY	>TXT_CR_ERR1
Source: boot_sys_os.asm
   684 4805 90 37				BCC	OS_CREATE_ERR			; Branch on error
   685 						
   686 						; Find a Free dir. entry and fill it with file info and save it to disk
   687 4807 20 EB 48				JSR 	OS_FIND_FREE			; Find a free directory entry in the current directory
   688 480A					LDXYI	TXT_CR_ERR2			; 'No free dir. entry'
Macro: LDXYI [Source: macros.inc]
     1 480A A2 9F			LDX	<TXT_CR_ERR2				; MADS makes this immediate
     2 480C A0 48			LDY	>TXT_CR_ERR2
Source: boot_sys_os.asm
   689 480E 90 2E				BCC	OS_CREATE_ERR			; Branch if no free dir entry was found
   690 						
   691 						;LDA	DBG_PRINT			; 1 = Debug print info
   692 						;BEQ	OSCR_NO_DBG			; 0 = no debug
   693 4810					PRSTR	TXT_FFREE1			; DEBUG
Macro: PRSTR [Source: macros.inc]
     1 4810 A2 61			LDX	<TXT_FFREE1				; MADS makes this immediate
     2 4812 A0 48			LDY	>TXT_FFREE1
Source: boot_sys_os.asm
     2 4814 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_os.asm
   694 4817					PRHEX16	CURR_DIR_ENTRY
Macro: PRHEX16 [Source: macros.inc]
     1 4817 A5 A9			LDA	CURR_DIR_ENTRY+1				; print MSB
     2 4819 20 91 E0			JSR	HEXOUT
     3 481C A5 A8			LDA	CURR_DIR_ENTRY
     4 481E 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_os.asm
   695 4821 20 5A E0				JSR	CROUT				; Print CR
   696 4824 AD 12 18		OSCR_NO_DBG	LDA     F_ATTRIBS			; Get file/dir attributes
   697 4827 20 0E 43				JSR	OS_CREATE_FILE			; create the file/dir on disk
   698 482A					LDXYI	TXT_CR_ERR3			; 'OS_CREATE: File create error'
Macro: LDXYI [Source: macros.inc]
     1 482A A2 BE			LDX	<TXT_CR_ERR3				; MADS makes this immediate
     2 482C A0 48			LDY	>TXT_CR_ERR3
Source: boot_sys_os.asm
   699 482E 90 0E				BCC	OS_CREATE_ERR			; Branch on error
   700 						
   701 4830 AD 12 18				LDA     F_ATTRIBS			; Get file/dir attributes again
   702 4833					AND.EQ  #FA_DIRECTORY OS_CREATE_X	; create a file? Branch if it is a file
Macro: AND.EQ [Source: macros.inc]
     6 4833 29 10				AND	#FA_DIRECTORY
     7 4835 F0 05				BEQ	OS_CREATE_X
Source: boot_sys_os.asm
   703 						
   704 4837 20 49 47				JSR	ADD_NEW_DIR_CLST		; Add new dir cluster with . and .. and save it to disk
   705 483A 90 02				BCC	OS_CREATE_ERR			; Branch on error
   706 						
   707 483C 38			OS_CREATE_X	SEC					; C=1, OK
   708 483D 60			                RTS					; and return
   709 483E 20 82 F6		OS_CREATE_ERR   JSR	OS_STRING_OUT			; Print error message
   710 4841 18					CLC					; C=0, error
   711 4842 60			OS_CREATE_END   RTS					; return
   712 				                
   713 4843 46 69 6C 65 20 65 + TXT_OVERWRITE	.by	'File exists, overwrite (y/n)?' $00
   714 4861 46 72 65 65 20 44 + TXT_FFREE1	.by	'Free Dir Entry $' $00
   715 4872 44 65 6C 65 74 69 + TXT_SH_DEL	.by	'Deleting file...' CR $00
   716 4884 4F 53 5F 43 52 45 + TXT_CR_ERR1	.by	'OS_CREATE: FAT Save Error' CR $00
   717 489F 4F 53 5F 43 52 45 + TXT_CR_ERR2	.by	'OS_CREATE: No free dir. error' CR $00
   718 48BE 4F 53 5F 43 52 45 + TXT_CR_ERR3	.by	'OS_CREATE: File create error' CR $00
   719
   720 				; **** Test If File Is Empty ************** ************************************
   721 				; Input:  Ptr(CURR_DIR_ENTRY)
   722 				; Output: C = 1 - File is empty; C = 0 - File not empty
   723 				; ******************************************************************************
   724 48DC A2 04		OS_FILE_EMPTY   LDX     #$04
   725 48DE A0 1C		                LDY     #D_FILE_SIZE        			; index to file size
   726 48E0 18			                CLC
   727 48E1			NEXT_SIZE_BYTE  LDA.NE  (CURR_DIR_ENTRY),Y OS_FILE_EMPTY2	; branch if file-size byte > 0 (file is not empty)
Macro: LDA.NE [Source: macros.inc]
     1 48E1 B1 A8				LDA	(CURR_DIR_ENTRY),Y
     2 48E3 D0 05				BNE	OS_FILE_EMPTY2
Source: boot_sys_os.asm
   728 48E5 C8			                INY
   729 48E6			                DEX.NE	NEXT_SIZE_BYTE      			; test next byte
Macro: DEX.NE [Source: macros.inc]
     1 48E6 CA					DEX
     2 48E7 D0 F8				BNE	NEXT_SIZE_BYTE
Source: boot_sys_os.asm
   730 48E9 38			                SEC			    			; C=1: File is empty
   731 48EA 60			OS_FILE_EMPTY2  RTS			    			; return
   732
   733 				; **** Check If a directory entry is free or deleted ***************************
   734 				; ******************************************************************************
   735 48EB			OS_FIND_FREE   	LDXYI	CB_FIND_FREE_DIR_ENTRY
Macro: LDXYI [Source: macros.inc]
     1 48EB A2 BF			LDX	<CB_FIND_FREE_DIR_ENTRY				; MADS makes this immediate
     2 48ED A0 4B			LDY	>CB_FIND_FREE_DIR_ENTRY
Source: boot_sys_os.asm
   736 48EF D0 1A		                BNE     OS_FIND			; branch always
   737
   738 				; **** Check If Directory Already Exists ***************************************
   739 				; ******************************************************************************
   740 48F1			OS_DIR_EXISTS   LDXYI   CB_DIR_EXISTS
Macro: LDXYI [Source: macros.inc]
     1 48F1 A2 73			LDX	<CB_DIR_EXISTS				; MADS makes this immediate
     2 48F3 A0 4B			LDY	>CB_DIR_EXISTS
Source: boot_sys_os.asm
   741 48F5 D0 14		                BNE     OS_FIND			; branch always
   742 				                
   743 				; **** Check If Directory Is Available *****************************************
   744 				; ******************************************************************************
   745 48F7			OS_FILE_EXISTS  LDXYI   CB_FILE_EXISTS
Macro: LDXYI [Source: macros.inc]
     1 48F7 A2 97			LDX	<CB_FILE_EXISTS				; MADS makes this immediate
     2 48F9 A0 4B			LDY	>CB_FILE_EXISTS
Source: boot_sys_os.asm
   746 48FB D0 0E		                BNE     OS_FIND			; branch always
   747
   748 				; **** Find Directory **********************************************************
   749 				; ******************************************************************************
   750 48FD			OS_FIND_PATH    LDXYI   CB_FIND_SUBDIR
Macro: LDXYI [Source: macros.inc]
     1 48FD A2 76			LDX	<CB_FIND_SUBDIR				; MADS makes this immediate
     2 48FF A0 4B			LDY	>CB_FIND_SUBDIR
Source: boot_sys_os.asm
   751 4901 D0 08		                BNE     OS_FIND			; branch always
   752
   753 				; **** Find File ***************************************************************
   754 				; ******************************************************************************
   755 4903			OS_FIND_FILE    LDXYI   CB_FIND_FILE
Macro: LDXYI [Source: macros.inc]
     1 4903 A2 9A			LDX	<CB_FIND_FILE				; MADS makes this immediate
     2 4905 A0 4B			LDY	>CB_FIND_FILE
Source: boot_sys_os.asm
   756 				                                           ; fall through to OS_FIND
   757 				                                           
   758 				; **** Find All Files **********************************************************
   759 				; ******************************************************************************
   760 4907 A9 FF		OS_FIND_ALL     LDA     #$FF                ; disable total file counting
   761 4909 D0 02		                BNE     OS_FIND2
   762
   763 				; **** Main Find Routine *******************************************************
   764 				; ******************************************************************************
   765 490B A9 00		OS_FIND         LDA     #$00                ; enable total file counting
   766 490D			OS_FIND2        STXY    CMD_ADDR            ; set command function address
Macro: STXY [Source: macros.inc]
     1 490D 8E D9 4B			STX	CMD_ADDR
     2 4910 8C DA 4B			STY	CMD_ADDR+1
Source: boot_sys_os.asm
   767 				                                            ; fall through to OS_DIR_LOOP
   768
   769 				; **** Loop Through Actual Directory *******************************************
   770 				; Input:  Ptr[X:Y] = Address to command specific function
   771 				;         A = $00 - Enable total file counting; A <> $00 - counting disabled
   772 				; Output: C = 1 - Found; C = 0 - Not Found
   773 				; ******************************************************************************
   774 4913 8D 13 18		OS_DIR_LOOP     STA     TERM_FLAG           			; set/clear counter termination flag
   775 4916 A9 00 8D 15 18 8D +                 MWA	#0 CURR_FILE_CNT    			; clear total file counter
   776 491E 20 9D 42		                JSR     OS_FIRST_DIR_BLK    			; load first block of actual directory
   777 4921			LOWER_DIR_BLK   LDXYI   DIR_BLK_BUFL        			; set pointer to lower page of block buffer
Macro: LDXYI [Source: macros.inc]
     1 4921 A2 00			LDX	<DIR_BLK_BUFL				; MADS makes this immediate
     2 4923 A0 02			LDY	>DIR_BLK_BUFL
Source: boot_sys_os.asm
   778 4925			SET_CURR_ENTRY  STXY	CURR_DIR_ENTRY	    			; select current directory entry
Macro: STXY [Source: macros.inc]
     1 4925 86 A8			STX	CURR_DIR_ENTRY
     2 4927 84 A9			STY	CURR_DIR_ENTRY+1
Source: boot_sys_os.asm
   779 4929 A0 0B		GET_CURR_ENTRY  LDY     #D_ATTRIBUTES       			; index to file attributes
   780 492B B1 A8		                LDA     (CURR_DIR_ENTRY),Y  			; load file attributes
   781 492D AA			                TAX                         			; load attributes into X
   782 492E A0 00		                LDY     #D_FILENAME         			; index to filename
   783 4930 A9 4B CD DA 4B D0 + 		CPW	#CB_FIND_FREE_DIR_ENTRY CMD_ADDR	; Is it OS_FIND_FREE ?
   784 493C F0 04				BEQ	OS_DIR_CONT				; Branch if so (NULL also means a free dir entry is found)
   785 						
   786 493E			                LDA.EQ  (CURR_DIR_ENTRY),Y OS_DIR_LOOP_EOF	; load first char of filename and branch if NULL (= last entry)
Macro: LDA.EQ [Source: macros.inc]
     1 493E B1 A8				LDA	(CURR_DIR_ENTRY),Y
     2 4940 F0 47				BEQ	OS_DIR_LOOP_EOF
Source: boot_sys_os.asm
   787 4942 20 6F 4C		OS_DIR_CONT     JSR     CMD_EXECUTE         			; call command routine
   788 4945 B0 43		                BCS     OS_DIR_LOOP_END	    			; C=1: OK and return
   789 						
   790 4947			NEXT_ITEM       LDA.NE  TERM_FLAG END_LOOP_CHK           	; check if count is terminated, branch if flag > 0
Macro: LDA.NE [Source: macros.inc]
     1 4947 AD 13 18				LDA	TERM_FLAG
     2 494A D0 08				BNE	END_LOOP_CHK
Source: boot_sys_os.asm
   791 494C EE 15 18 D0 03 EE + 		INW	CURR_FILE_CNT	    			; yes, increment total file counter
   792 4954 A5 A8 18 69 20 85 + END_LOOP_CHK    ADB	CURR_DIR_ENTRY #$20 			; CURR_DIR_ENTRY += $20, next dir. entry
   793 495B 90 CC		                BCC     GET_CURR_ENTRY	    			; LSB overflow?
   794 						
   795 495D A9 00		                LDA     #$00
   796 495F 65 A9 85 A9		                ADC:STA	CURR_DIR_ENTRY+1    			; MSB +1
   797 4963			                CMP.NE  #(> DIR_BLK_BUFH)+1 UPPER_DIR_BLK	; branch if we are in 2nd page above 512 B dir buffer
Macro: CMP.NE [Source: macros.inc]
     1 4963 C9 04				CMP	#(> DIR_BLK_BUFH)+1
     2 4965 D0 1B				BNE	UPPER_DIR_BLK
Source: boot_sys_os.asm
   798
   799 4967			                DEC.NE  CURR_BLK_NUM LOAD_DIR_BLK	    	; CURR_BLK_NUM counts from D_SECT_PER_CLST down to 0, load next block if > 0
Macro: DEC.NE [Source: macros.inc]
     1 4967 CE 1D 18				DEC	CURR_BLK_NUM
     2 496A D0 10				BNE	LOAD_DIR_BLK
Source: boot_sys_os.asm
   800 496C			                LDA.EQ  D_FAT_TYPE LOAD_DIR_CLSTR          	; get FAT type, branch if FAT32 (load next dir cluster)
Macro: LDA.EQ [Source: macros.inc]
     1 496C AD 0A 04				LDA	D_FAT_TYPE
     2 496F F0 04				BEQ	LOAD_DIR_CLSTR
Source: boot_sys_os.asm
   801 4971 24 0B		                BIT     D_ATTRIBUTES        			; else check if root directory
   802 4973 B0 14		                BCS     OS_DIR_LOOP_EOF     			; if root dir and not FAT32, all directory blocks read. Exit
   803
   804 4975 20 EE 42		LOAD_DIR_CLSTR  JSR     OS_NEXT_DIR_CLSTR   			; load next directory cluster from device
   805 4978 90 A7		                BCC     LOWER_DIR_BLK       			; and reset read pointer to lower page of block buffer
   806 497A B0 0D		                BCS     OS_DIR_LOOP_EOF     			; directory EOF reached. Exit
   807
   808 497C 20 E0 42		LOAD_DIR_BLK    JSR     OS_NEXT_DIR_BLK     			; load next directory block from device
   809 497F 4C 21 49		                JMP     LOWER_DIR_BLK       			; and reset read pointer to lower page of block buffer
   810
   811 4982			UPPER_DIR_BLK   LDXYI   DIR_BLK_BUFH        			; set pointer to upper page of block buffer
Macro: LDXYI [Source: macros.inc]
     1 4982 A2 00			LDX	<DIR_BLK_BUFH				; MADS makes this immediate
     2 4984 A0 03			LDY	>DIR_BLK_BUFH
Source: boot_sys_os.asm
   812 4986 4C 25 49		                JMP     SET_CURR_ENTRY	    			; branch to begin of loop
   813
   814 4989 18			OS_DIR_LOOP_EOF CLC			    			; C=1: not found
   815 498A 60			OS_DIR_LOOP_END RTS			    			; return
   816
   817 				; **** Set Drive Command *******************************************************
   818 				; Input:  A = Drive Number (0..25)
   819 				; Output: C = 0 - Error
   820 				; ******************************************************************************
   821 498B			OS_SET_DRIVE    CMP.EQ  CURR_DRIVE SET_DRIVE_END	; Branch (just exit) if actual drive equals current drive
Macro: CMP.EQ [Source: macros.inc]
     1 498B CD 1E 18				CMP	CURR_DRIVE
     2 498E F0 3E				BEQ	SET_DRIVE_END
Source: boot_sys_os.asm
   822 4990			                CMP.CS  #$08       SET_DRIVE_ERR  	; show error message if actual drive number exceeds max drive?
Macro: CMP.CS [Source: macros.inc]
     1 4990 C9 08				CMP	#$08			; 
     2 4992 B0 3C				BCS	SET_DRIVE_ERR			; branch if C=1 (A-b1 >= 0)
Source: boot_sys_os.asm
   823 4994 AA			                TAX                         		; save actual drive number to Y
   824 4995 AD 1E 18		                LDA     CURR_DRIVE          		; load current drive number into A
   825 4998 0A 0A 0A 0A 0A	        :5      ASL             	    		; multiply current drive number by 32
   826 499D 85 E8		                STA     STOL           	    		; and save it to indirect pointer low byte
   827 499F A9 05 85 E9		                MVA	#>MOUNT_TABLE STOH  		; set high byte of mount table
   828 49A3					MVAY	$20 CURR_VOLUME (STOL)		; update device descriptor in mount table
Macro: MVAY [Source: macros.inc]
     1 49A3 A0 1F			LDY	#$20-1
     2 49A5 B9 00 04 91 E8 88	lp	MVA	CURR_VOLUME,Y (STOL),Y-
     3 49AB 10 F8			BPL	lp
Source: boot_sys_os.asm
   829 49AD 8A			                TXA
   830 49AE 0A 0A 0A 0A 0A	        :5      ASL             	    		; multiply current drive number by 32
   831 49B3 85 E8		                STA     STOL                		; and save it to indirect pointer low byte
   832 49B5 A0 08		                LDY     #$08                		; set index to D_DEV_ID
   833 49B7			                LDA.EQ  (STOL),Y SET_DRIVE_ERR		; load device ID, if NULL then show error message
Macro: LDA.EQ [Source: macros.inc]
     1 49B7 B1 E8				LDA	(STOL),Y
     2 49B9 F0 15				BEQ	SET_DRIVE_ERR
Source: boot_sys_os.asm
   834
   835 49BB					MVAY    $20 (STOL) CURR_VOLUME	; load device descriptor into CURR_VOLUME
Macro: MVAY [Source: macros.inc]
     1 49BB A0 1F			LDY	#$20-1
     2 49BD B1 E8 99 00 04 88	lp	MVA	(STOL),Y CURR_VOLUME,Y-
     3 49C3 10 F8			BPL	lp
Source: boot_sys_os.asm
   836 49C5 8E 1E 18		                STX     CURR_DRIVE          	; store actual drive as current drive
   837 49C8 AD 08 04		                LDA     D_DEV_ID            	; get current device id
   838 49CB 20 AA E1		                JSR     OPEN_DEVICE         	; and open the device driver
   839 49CE 38			SET_DRIVE_END   SEC			    	; C=1: no error
   840 49CF 60			                RTS
   841
   842 49D0			SET_DRIVE_ERR   LDXYI   MSG_DRIVE_ERR	
Macro: LDXYI [Source: macros.inc]
     1 49D0 A2 54			LDX	<MSG_DRIVE_ERR				; MADS makes this immediate
     2 49D2 A0 59			LDY	>MSG_DRIVE_ERR
Source: boot_sys_os.asm
   843 49D4 4C 71 4A		                JMP     OS_PRINT_ERR	    	; Print 'Drive not found'
   844
   845 				; **** Test If Root Directory **************************************************
   846 				; Input:
   847 				; Output: C = 1 - is root dir; C = 0 - is not root dir
   848 				; ******************************************************************************
   849 49D7 A0 03		OS_IS_ROOT_DIR  LDY     #$03
   850 49D9 B9 04 04		COMP_DIR        LDA     D_ACTUAL_DIR,Y	     		; contains cluster nr of actual dir.
   851 49DC			                CMP.NE  D_START_DIR,Y OS_IS_ROOT_END	; branch if not a root dir.
Macro: CMP.NE [Source: macros.inc]
     1 49DC D9 1C 04				CMP	D_START_DIR,Y
     2 49DF D0 05				BNE	OS_IS_ROOT_END
Source: boot_sys_os.asm
   852 49E1			                DEY.PL	COMP_DIR             		; test next cluster byte
Macro: DEY.PL [Source: macros.inc]
     1 49E1 88					DEY
     2 49E2 10 F5				BPL	COMP_DIR
Source: boot_sys_os.asm
   853 						
   854 49E4 38			                SEC			     		; C=1 => is root dir.
   855 49E5 60			                RTS
   856 49E6 18			OS_IS_ROOT_END  CLC			     		; C=0 => not a root dir.
   857 49E7 60			                RTS
   858
   859 				; **** Set Root Directory Command **********************************************
   860 				; ******************************************************************************
   861 49E8 A2 03		OS_SET_ROOT_DIR LDX	#3				; 4 byte to copy
   862 49EA BD 1C 04 9D 04 04	OS_SET_RDIR_LP	MVA 	D_START_DIR,X D_ACTUAL_DIR,X	; D_ACTUAL_DIR = root dir cluster nr
   863 49F0 9D 24 18 CA				STA	CURR_DIR_BLK,X-			; Save in CURR_DIR_BLK
   864 49F4 10 F4				BPL	OS_SET_RDIR_LP			; branch if not done yet
   865 						
   866 49F6 A9 5C 8D 20 04 A9 + 		MWA	#BSLASH	D_SUBDIR_NAME		; Add '\'and '\0' to D_SUBDIR_NAME
   867 4A00 60					RTS					; return
   868
   869 				; **** Set Directory Command ***************************************************
   870 				; Input : CURR_DIR_ENTRY: Pointer into current directory block
   871 				; Copy the directory cluster number to D_ACTUAL_DIR and CURR_DIR_BLK.
   872 				; A cluster number cannot be < 2. If a cluster number is 0, then it is 
   873 				; considered to be the root-dir and cluster number is set to 2.
   874 				; ******************************************************************************
   875 4A01 AD 28 18		OS_SET_DIR      LDA	DBG_PRINT			; 1 Debug print info
   876 4A04 F0 30				BEQ	SD_NO_DBG			; branch if no debug print info
   877 4A06					PRHEX16	CURR_DIR_ENTRY
Macro: PRHEX16 [Source: macros.inc]
     1 4A06 A5 A9			LDA	CURR_DIR_ENTRY+1				; print MSB
     2 4A08 20 91 E0			JSR	HEXOUT
     3 4A0B A5 A8			LDA	CURR_DIR_ENTRY
     4 4A0D 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_os.asm
   878 4A10					PRCH	','
Macro: PRCH [Source: macros.inc]
     1 4A10 A9 2C			LDA	#','
     2 4A12 20 52 E0			JSR	COUT
Source: boot_sys_os.asm
   879 4A15					PRCLW	D_START_CLSTH CURR_DIR_ENTRY	; Print 1st cluster HIGH word
Macro: PRCLW [Source: macros.inc]
     1 4A15 A0 15				LDY	#D_START_CLSTH+1		; Print MSB of word
     1 4A17 B1 A8				LDA	(CURR_DIR_ENTRY),Y
     5 4A19 20 91 E0				JSR	HEXOUT			; changes Y!
Source: boot_sys_os.asm
     7 4A1C A0 14				LDY	#D_START_CLSTH			; Print LSB of word
     1 4A1E B1 A8				LDA	(CURR_DIR_ENTRY),Y
     5 4A20 20 91 E0				JSR	HEXOUT			; changes Y!
Source: boot_sys_os.asm
Source: boot_sys_os.asm
   880 4A23					PRCLW	D_START_CLST  CURR_DIR_ENTRY	; Print 1st cluster LOW  word
Macro: PRCLW [Source: macros.inc]
     1 4A23 A0 1B				LDY	#D_START_CLST+1		; Print MSB of word
     1 4A25 B1 A8				LDA	(CURR_DIR_ENTRY),Y
     5 4A27 20 91 E0				JSR	HEXOUT			; changes Y!
Source: boot_sys_os.asm
     7 4A2A A0 1A				LDY	#D_START_CLST			; Print LSB of word
     1 4A2C B1 A8				LDA	(CURR_DIR_ENTRY),Y
     5 4A2E 20 91 E0				JSR	HEXOUT			; changes Y!
Source: boot_sys_os.asm
Source: boot_sys_os.asm
   881 4A31					PRCH	']'
Macro: PRCH [Source: macros.inc]
     1 4A31 A9 5D			LDA	#']'
     2 4A33 20 52 E0			JSR	COUT
Source: boot_sys_os.asm
   882 4A36 A0 15		SD_NO_DBG	LDY     #D_START_CLSTH+1		; MSB of 1st cluster HIGH word
   883 4A38 A2 04		                LDX     #$04				; Copy 4 bytes
   884 4A3A 8E 5F 4A				STX	OS_DWORD0			; Flag for zero all 4 bytes 
   885 4A3D CA					DEX					; Copy bytes 3..0
   886 4A3E 20 4C 4A				JSR	OS_SET_WORD			; Save 1st cluster HIGH word
   887 4A41 A0 1B				LDY	#D_START_CLST+1			; MSB of 1st cluster LOW word
   888 4A43 20 4C 4A				JSR	OS_SET_WORD			; Save 1st cluster LOW word
   889 4A46					LDA.EQ	OS_DWORD0 OS_SET_ROOT_DIR	; branch if flag is 0 (all 4 bytes are 0), branch to set actual dir to D_START_DIR
Macro: LDA.EQ [Source: macros.inc]
     1 4A46 AD 5F 4A				LDA	OS_DWORD0
     2 4A49 F0 9D				BEQ	OS_SET_ROOT_DIR
Source: boot_sys_os.asm
   890 4A4B 60			                RTS			     		; return
   891 				                
   892 				;-------------------------------------------------------------------------------------------------
   893 				; Used by OS_SET_DIR to copy a cluster nr in a dir. entry to D_ACTUAL_DIR and CURR_DIR_BLK
   894 				; A cluster nr is stored in two words in a dir. entry: a High word in $14 and a Low word in $1A.
   895 				; A flag (OS_DWORD0) is used to check if all 4 bytes are zero.
   896 				;-------------------------------------------------------------------------------------------------
   897 4A4C 20 4F 4A		OS_SET_WORD	JSR	OS_SET_BYTE				; Store word in D_ACTUAL_DIR and CURR_DIR_BLK
   898 4A4F B1 A8 9D 04 04	OS_SET_BYTE	MVA	(CURR_DIR_ENTRY),Y D_ACTUAL_DIR,X	; Get byte from D_START_CLSTH or D_START_CLST and save in D_ACTUAL_DIR
   899 4A54					STA.NE	CURR_DIR_BLK,X SET_BYTE_NOT0		; Save in CURR_DIR_BLK and branch if > 0
Macro: STA.NE [Source: macros.inc]
     1 4A54 9D 24 18				STA	CURR_DIR_BLK,X
     2 4A57 D0 03				BNE	SET_BYTE_NOT0
Source: boot_sys_os.asm
   900 4A59 CE 5F 4A				DEC	OS_DWORD0				; decrement flag for zero all 4 bytes
   901 4A5C 88			SET_BYTE_NOT0	DEY				
   902 4A5D CA					DEX
   903 4A5E 60					RTS				; return
   904 4A5F 00			OS_DWORD0	.byte	$00
   905
   906 				; **** Read Input String *******************************************************
   907 				; Output: Null terminated string in STRBUF
   908 				; ******************************************************************************
   909 4A60 20 62 E0		OS_STRING_IN    JSR     STRIN                ; input string into string buffer
   910 4A63 A9 00 85 EA A9 14 +                 MWA	#STRBUF PSTR	     ; set string pointer to buffer
   911 4A6B A9 00 9D 00 14	                MVA     #$00    STRBUF,X     ; terminate string with NULL
   912 4A70 60			                RTS
   913
   914 				; **** Print Error Message *****************************************************
   915 				; Input:  Ptr[X:Y] = Pointer to Error Message
   916 				; Output: C = 0
   917 				; ******************************************************************************
   918 4A71 20 82 F6		OS_PRINT_ERR    JSR     OS_STRING_OUT
   919 4A74 18			                CLC
   920 4A75 60			                RTS
   921 				                
   922 				; **** Parse Full Path String **************************************************
   923 				; Input:  Ptr[X:Y] to Path String
   924 				; Output: C = 0 - Error; C = 1 - No Error
   925 				;         A = $00       - End Of String
   926 				;           = $FF       - Path Not Found
   927 				;           = ?         - Wildcard Included
   928 				;           = PATH_SEP  - No Trailing Name
   929 				; ******************************************************************************
   930 4A76			OS_PARSE_PATH   STXY    PSTR                	; save string pointer
Macro: STXY [Source: macros.inc]
     1 4A76 86 EA			STX	PSTR
     2 4A78 84 EB			STY	PSTR+1
Source: boot_sys_os.asm
   931 4A7A A0 00		                LDY     #$00
   932 4A7C 8C 11 18		                STY     TERM_CHAR
   933 4A7F A9 5C		                LDA     #PATH_SEP
   934 4A81			                CMP.NE  (PSTR),Y PARSE_PATH2	; check if first char is the path seperator. Branch if not, just check the path
Macro: CMP.NE [Source: macros.inc]
     1 4A81 D1 EA				CMP	(PSTR),Y
     2 4A83 D0 06				BNE	PARSE_PATH2
Source: boot_sys_os.asm
   935 4A85 20 E8 49		                JSR     OS_SET_ROOT_DIR     	; yes, switch to root directory
   936 4A88 A0 00		                LDY     #$00
   937 4A8A C8			PARSE_PATH      INY
   938 4A8B			PARSE_PATH2     LDA.EQ  (PSTR),Y PARSE_TERM     ; load next char from path string, branch if NULL (set termination char)
Macro: LDA.EQ [Source: macros.inc]
     1 4A8B B1 EA				LDA	(PSTR),Y
     2 4A8D F0 18				BEQ	PARSE_TERM
Source: boot_sys_os.asm
   939 4A8F			                CMP.EQ  #SPC     PARSE_TERM     ; Set termination char if it is a SPACE char
Macro: CMP.EQ [Source: macros.inc]
     1 4A8F C9 20				CMP	#SPC
     2 4A91 F0 14				BEQ	PARSE_TERM
Source: boot_sys_os.asm
   940 						
   941 4A93 20 BD 4A		PARSE_NAME      JSR     OS_PARSE_NAME       ; no, parse partial path name
   942 4A96 90 21		                BCC     PARSE_PATH_END      ; filename includes forbidden chars, exit with error
   943 						
   944 4A98			                CMP.NE  #PATH_SEP PARSE_PATH_OK	; is termination char the path seperator? No, trailing name, exit withour error
Macro: CMP.NE [Source: macros.inc]
     1 4A98 C9 5C				CMP	#PATH_SEP
     2 4A9A D0 1C				BNE	PARSE_PATH_OK
Source: boot_sys_os.asm
   945 4A9C 84 EE		                STY     PSAV                ; save string index
   946 4A9E 20 FD 48		                JSR     OS_FIND_PATH        ; yes, find and switch patch
   947 4AA1 A4 EE		                LDY     PSAV                ; restore string index
   948 4AA3 90 0F		                BCC     PARSE_PATH_ERR      ; path not found, exit with error
   949 4AA5 B0 E3		                BCS     PARSE_PATH          ; branch always
   950 				                
   951 4AA7 18			PARSE_TERM      CLC
   952 4AA8			                LDA.NE  TERM_CHAR PARSE_PATH_END2	; branch if TERM_CHAR > 0
Macro: LDA.NE [Source: macros.inc]
     1 4AA8 AD 11 18				LDA	TERM_CHAR
     2 4AAB D0 0F				BNE	PARSE_PATH_END2
Source: boot_sys_os.asm
   953 4AAD A9 5C 8D 11 18	                MVA     #PATH_SEP TERM_CHAR		; TERM_CHAR = PATH_SEP
   954 4AB2 D0 04		                BNE     PARSE_PATH_OK			; branch always
   955 				                
   956 4AB4			PARSE_PATH_ERR  LDA.NE  #$FF PARSE_PATH_END2    ; path not found error
Macro: LDA.NE [Source: macros.inc]
     1 4AB4 A9 FF				LDA	#$FF
     2 4AB6 D0 04				BNE	PARSE_PATH_END2
Source: boot_sys_os.asm
   957 4AB8 38			PARSE_PATH_OK   SEC
   958 4AB9 AD 11 18		PARSE_PATH_END  LDA     TERM_CHAR           	; load termination char as error status into A
   959 4ABC 60			PARSE_PATH_END2 RTS
   960
   961 				; **** Parse A Partial Path Name String ****************************************
   962 				; Input:  A = First Char Of Partial Path
   963 				;         Y = Index Into Path String
   964 				; Output: C = 0 - Error; C = 1 - No Error
   965 				;         TERM_CHAR = NULL      - Filename
   966 				;                   = ?         - Wildcard Chars Included
   967 				;                   = PATH_SEP  - Subdirectory Name
   968 				; ******************************************************************************
   969 4ABD A2 08		OS_PARSE_NAME   LDX     #8
   970 4ABF 86 AB		                STX     BCNT                	; set max char count to 8
   971 4AC1 A2 00		                LDX     #$00                	; reset index to name string buffer
   972 4AC3 8E 11 18		                STX     TERM_CHAR
   973 4AC6			CHK_DOT         CMP.NE  #DOT GET_CHAR       	; is first char a . char? (. dir?), branch if not
Macro: CMP.NE [Source: macros.inc]
     1 4AC6 C9 2E				CMP	#DOT
     2 4AC8 D0 10				BNE	GET_CHAR
Source: boot_sys_os.asm
   974 4ACA 9D 42 4C E8		                STA     FILENAME,X+         	; yes, store it
   975 4ACE C8			                INY
   976 4ACF B1 EA		                LDA     (PSTR),Y            	; get next char from input string
   977 4AD1			                CMP.NE  #DOT GET_CHAR       	; is second char a . char? (.. dir?), branch if not
Macro: CMP.NE [Source: macros.inc]
     1 4AD1 C9 2E				CMP	#DOT
     2 4AD3 D0 05				BNE	GET_CHAR
Source: boot_sys_os.asm
   978 4AD5 9D 42 4C		SET_CHAR        STA     FILENAME,X          	; yes, store it
   979 4AD8 E8			NEXT_CHAR       INX                         	; point to next char of parsed name
   980 4AD9 C8			NEXT_CHAR2      INY                         	; point to next char of input string
   981 4ADA			GET_CHAR        LDA.EQ  (PSTR),Y  FILL_ALL   	; get next char from input string, branch if end of line.
Macro: LDA.EQ [Source: macros.inc]
     1 4ADA B1 EA				LDA	(PSTR),Y
     2 4ADC F0 52				BEQ	FILL_ALL
Source: boot_sys_os.asm
   982 4ADE			                CMP.EQ  #SPC      FILL_ALL     	; Terminate if it is a space char
Macro: CMP.EQ [Source: macros.inc]
     1 4ADE C9 20				CMP	#SPC
     2 4AE0 F0 4E				BEQ	FILL_ALL
Source: boot_sys_os.asm
   983 4AE2			                CMP.EQ  #PATH_SEP SET_TERM_CHAR	; is it a path seperator char? If so, terminate
Macro: CMP.EQ [Source: macros.inc]
     1 4AE2 C9 5C				CMP	#PATH_SEP
     2 4AE4 F0 47				BEQ	SET_TERM_CHAR
Source: boot_sys_os.asm
   984 4AE6			                CMP.EQ  #DOT      FILL_NAME     ; is it a . char? If so, fill name with spaces
Macro: CMP.EQ [Source: macros.inc]
     1 4AE6 C9 2E				CMP	#DOT
     2 4AE8 F0 3A				BEQ	FILL_NAME
Source: boot_sys_os.asm
   985 4AEA			                CMP.EQ  #'*'      FILL_WILDCARD ; is it a * char? If so, fill name with '?'
Macro: CMP.EQ [Source: macros.inc]
     1 4AEA C9 2A				CMP	#'*'
     2 4AEC F0 2C				BEQ	FILL_WILDCARD
Source: boot_sys_os.asm
   986
   987 4AEE			                CPX.CS  BCNT NEXT_CHAR          ; branch if name length exceeds max length
Macro: CPX.CS [Source: macros.inc]
     1 4AEE E4 AB				CPX	BCNT			; 
     2 4AF0 B0 E6				BCS	NEXT_CHAR			; branch if C=1 (X-b1 >= 0)
Source: boot_sys_os.asm
   988 4AF2 20 0A 4D		                JSR     UPPERCASE           	; convert chars to upper case
   989 4AF5			                CMP.NE  #'?' GET_CHAR2      	; is it a ? char? Branch if not, check next allowed char
Macro: CMP.NE [Source: macros.inc]
     1 4AF5 C9 3F				CMP	#'?'
     2 4AF7 D0 05				BNE	GET_CHAR2
Source: boot_sys_os.asm
   990 4AF9 8D 11 18		                STA     TERM_CHAR           	; yes, store ? as termination char
   991 4AFC F0 D7		                BEQ     SET_CHAR            	; and char in name buffer
   992
   993 4AFE			GET_CHAR2       CMP.EQ  #MINUS SET_CHAR     ; is it a - char? Yes, store char in name buffer
Macro: CMP.EQ [Source: macros.inc]
     1 4AFE C9 2D				CMP	#MINUS
     2 4B00 F0 D3				BEQ	SET_CHAR
Source: boot_sys_os.asm
   994 4B02			                CMP.EQ  #ULINE SET_CHAR     ; is it a _ char? Yes, store char in name buffer
Macro: CMP.EQ [Source: macros.inc]
     1 4B02 C9 5F				CMP	#ULINE
     2 4B04 F0 CF				BEQ	SET_CHAR
Source: boot_sys_os.asm
   995 4B06					CMP.EQ	#'~' SET_CHAR       ; is it a ~ char? Yes, store char in name buffer
Macro: CMP.EQ [Source: macros.inc]
     1 4B06 C9 7E				CMP	#'~'
     2 4B08 F0 CB				BEQ	SET_CHAR
Source: boot_sys_os.asm
   996 4B0A					CMP.CC  #'0' PARSE_NAME_END ; is char in range 0..9? Branch if not, show error message
Macro: CMP.CC [Source: macros.inc]
     1 4B0A C9 30				CMP	#'0'			; 
     2 4B0C 90 32				BCC	PARSE_NAME_END			; branch if C=0 (A-b1 < 0)
Source: boot_sys_os.asm
   997 4B0E			                CMP.CC  #':' SET_CHAR	    ; yes, store char in name buffer
Macro: CMP.CC [Source: macros.inc]
     1 4B0E C9 3A				CMP	#':'			; 
     2 4B10 90 C3				BCC	SET_CHAR			; branch if C=0 (A-b1 < 0)
Source: boot_sys_os.asm
   998 4B12			                CMP.CC  #'A' PARSE_NAME_END ; is char in range A..Z? Branch if not, show error message
Macro: CMP.CC [Source: macros.inc]
     1 4B12 C9 41				CMP	#'A'			; 
     2 4B14 90 2A				BCC	PARSE_NAME_END			; branch if C=0 (A-b1 < 0)
Source: boot_sys_os.asm
   999 4B16			                CMP.CC  #'[' SET_CHAR	    ; yes, store char in name buffer
Macro: CMP.CC [Source: macros.inc]
     1 4B16 C9 5B				CMP	#'['			; 
     2 4B18 90 BB				BCC	SET_CHAR			; branch if C=0 (A-b1 < 0)
Source: boot_sys_os.asm
  1000
  1001 4B1A A9 3F 8D 11 18	FILL_WILDCARD   MVA     #'?' TERM_CHAR      ; store ? as termination char
  1002 4B1F 20 36 4B		                JSR     FILL_CHAR           ; fill with ? chars
  1003 4B22 B0 B5		                BCS     NEXT_CHAR2          ; branch always
  1004
  1005 4B24 20 34 4B		FILL_NAME       JSR     SET_SPC_CHAR        ; fill with space chars
  1006 4B27 A9 0B 85 AB		                MVA     #11 BCNT            ; set max char count to 11
  1007 4B2B B0 AC		                BCS     NEXT_CHAR2          ; branch always
  1008
  1009 4B2D 8D 11 18		SET_TERM_CHAR   STA     TERM_CHAR           ; store termination character
  1010 4B30 A9 0B 85 AB		FILL_ALL        MVA     #11 BCNT            ; set max char count to 11
  1011 4B34 A9 20		SET_SPC_CHAR    LDA     #SPC                ; set space char as filling char
  1012 4B36			FILL_CHAR       CPX.CS  BCNT PARSE_NAME_END ; branch if max char count exceeded
Macro: CPX.CS [Source: macros.inc]
     1 4B36 E4 AB				CPX	BCNT			; 
     2 4B38 B0 06				BCS	PARSE_NAME_END			; branch if C=1 (X-b1 >= 0)
Source: boot_sys_os.asm
  1013 4B3A 9D 42 4C E8		                STA     FILENAME,X+         ; no, store char in name buffer
  1014 4B3E 90 F6		                BCC     FILL_CHAR           ; and repeat
  1015
  1016 4B40 AD 11 18		PARSE_NAME_END  LDA     TERM_CHAR
  1017 4B43 60			                RTS
  1018 				                
  1019 				; **** Compare File Name With Mask *********************************************
  1020 				; Output: C = 0 - Names not equal; C = 1 - Names equal
  1021 				; ******************************************************************************
  1022 4B44 A0 0A		OS_COMP_NAME    LDY     #10                 		; compare all characters (0..10)
  1023 4B46 B9 42 4C		COMPARE_CHAR    LDA     FILENAME,Y          		; get char from compare mask
  1024 4B49			                CMP.NE  (CURR_DIR_ENTRY),Y COMPARE_NEQ	; compare character
Macro: CMP.NE [Source: macros.inc]
     1 4B49 D1 A8				CMP	(CURR_DIR_ENTRY),Y
     2 4B4B D0 05				BNE	COMPARE_NEQ
Source: boot_sys_os.asm
  1025 4B4D			                DEY.PL	COMPARE_CHAR        		; branch if more characters to compare
Macro: DEY.PL [Source: macros.inc]
     1 4B4D 88					DEY
     2 4B4E 10 F6				BPL	COMPARE_CHAR
Source: boot_sys_os.asm
  1026 						
  1027 4B50 38			COMPARE_EQU     SEC                         		; C=1, all characters are equal
  1028 4B51 60			                RTS
  1029 4B52 18			COMPARE_NEQ     CLC					; C=0, filename is different
  1030 4B53 60			                RTS
  1031 				                
  1032 				; **** Delete File *************************************************************
  1033 				; Input : A - First character of filename
  1034 				; Output: C = 0 - File is not deleted; C = 1 - Names equal
  1035 				; ******************************************************************************
  1036 4B54			OS_FILE_DELETED CMP.NE  #$E5 COMPARE_NEQ       		; is file deleted? Branch if not, C=0 and exit
Macro: CMP.NE [Source: macros.inc]
     1 4B54 C9 E5				CMP	#$E5
     2 4B56 D0 FA				BNE	COMPARE_NEQ
Source: boot_sys_os.asm
  1037 4B58 AC 13 18		                LDY     TERM_FLAG           		; termination flag already set?
  1038 4B5B D0 F3		                BNE     COMPARE_EQU         		; yes, C=1 and exit
  1039
  1040 4B5D 8D 13 18		                STA     TERM_FLAG           		; no, set counter termination flag
  1041 4B60					MVAY	6 CURR_DIR_BLK SEL_DIR_BLK	; SEL_DIR_BLK = CURR_DIR_BLK
Macro: MVAY [Source: macros.inc]
     1 4B60 A0 05			LDY	#6-1
     2 4B62 B9 24 18 99 6D 4B + lp	MVA	CURR_DIR_BLK,Y SEL_DIR_BLK,Y-
     3 4B69 10 F7			BPL	lp
Source: boot_sys_os.asm
  1042 4B6B 38			                SEC
  1043 4B6C 60			                RTS
  1044 				                
  1045 4B6D 00 00 00 00		SEL_DIR_BLK     .byte $00, $00, $00, $00
  1046 4B71 00 00		SEL_DIR_ENTRY   .byte $00, $00
  1047 				                
  1048 				; **** Directory Loop Call Back Functions **************************************
  1049 				; Input : A - First character of filename
  1050 				;         X - File Attributes
  1051 				; Output: C = 1 - File found; C = 0 - File not found
  1052 				; ******************************************************************************
  1053
  1054 				; **** Directory Exists - Call Back Routine ************************************
  1055 4B73 20 54 4B		CB_DIR_EXISTS   JSR     OS_FILE_DELETED
  1056
  1057 				; **** Find Sub Directory Name - Call Back Routine *****************************
  1058 4B76			CB_FIND_SUBDIR  CPX.EQ  #$0F CB_FIND_END       	; branch if a long filename entry
Macro: CPX.EQ [Source: macros.inc]
     1 4B76 E0 0F				CPX	#$0F
     2 4B78 F0 43				BEQ	CB_FIND_END
Source: boot_sys_os.asm
  1059 4B7A AD 42 4C		                LDA     FILENAME            	; do we search for the . directory?
  1060 4B7D			                CMP.NE  #DOT FIND_SUBDIR	; branch if not . or ..
Macro: CMP.NE [Source: macros.inc]
     1 4B7D C9 2E				CMP	#DOT
     2 4B7F D0 07				BNE	FIND_SUBDIR
Source: boot_sys_os.asm
  1061 						
  1062 4B81 AD 43 4C		                LDA     FILENAME+1		; get next byte
  1063 4B84			                CMP.EQ  #SPC FIND_SUBDIR_END   	; Space? Yes, do nothing, dir = '.', just exit.
Macro: CMP.EQ [Source: macros.inc]
     1 4B84 C9 20				CMP	#SPC
     2 4B86 F0 0D				BEQ	FIND_SUBDIR_END
Source: boot_sys_os.asm
  1064 						
  1065 4B88 8A			FIND_SUBDIR     TXA
  1066 4B89			                AND.EQ  #FA_DIRECTORY CB_FIND_END	; is it a directory we are looking for? Branch if not, exit
Macro: AND.EQ [Source: macros.inc]
     6 4B89 29 10				AND	#FA_DIRECTORY
     7 4B8B F0 30				BEQ	CB_FIND_END
Source: boot_sys_os.asm
  1067 4B8D 20 44 4B		                JSR     OS_COMP_NAME        		; yes, compare name with search mask
  1068 4B90 90 2C		                BCC     CB_FIND_END2        		; branch if C=0: name not equal, get next dir entry, just RTS
  1069
  1070 						; Emile: two errors here (corrected here and OS_SET_DIR is changed as well):
  1071 						; 1) only D_START_CLST ($1A) was used to get dir cluster nr, D_START_CLSTH ($14) also needs to be used 
  1072 						; 2) OS_SET_DIR expected 4 consecutive bytes and copied $1A, $1B, $1C & $1D into D_ACTUAL_DIR and CURR_DIR_BLK,
  1073 						;    with $1C & $1D not being cluster nr bytes.
  1074 4B92 20 01 4A		                JSR     OS_SET_DIR          	; make this directory the actual directory
  1075 4B95 38			FIND_SUBDIR_END SEC                         	; C=1: subdirectory found
  1076 4B96 60			                RTS				; return
  1077 				                
  1078 				; **** File Exists - Call Back Routine *****************************************
  1079 4B97 20 54 4B		CB_FILE_EXISTS  JSR     OS_FILE_DELETED
  1080
  1081 				; **** Find File Name - Call Back Routine **************************************
  1082 4B9A			CB_FIND_FILE    CPX.EQ  #$0F CB_FIND_END        		; branch if a long filename entry
Macro: CPX.EQ [Source: macros.inc]
     1 4B9A E0 0F				CPX	#$0F
     2 4B9C F0 1F				BEQ	CB_FIND_END
Source: boot_sys_os.asm
  1083 4B9E 8A			                TXA
  1084 4B9F			                AND.NE  #FA_DIRECTORY CB_FIND_END 		; is it a directory? Branch if so, get next dir entry
Macro: AND.NE [Source: macros.inc]
     6 4B9F 29 10				AND	#FA_DIRECTORY
     7 4BA1 D0 1A				BNE	CB_FIND_END
Source: boot_sys_os.asm
  1085 4BA3 20 44 4B		                JSR     OS_COMP_NAME        			; compare name with search mask
  1086 4BA6 90 16		                BCC     CB_FIND_END2        			; name not equal, get next dir entry
  1087 						
  1088 4BA8 A2 00		                LDX     #$00					; init. index in CURR_CLUSTER
  1089 4BAA A0 1A		                LDY     #D_START_CLST       			; get low bytes of start cluster address
  1090 4BAC B1 A8 C8 95 A0 E8	GET_FILE_CLST   MVA     (CURR_DIR_ENTRY),Y+  CURR_CLUSTER,X+	; and store it into current cluster
  1091 4BB2			                CPX.CC  #$02 GET_FILE_CLST     			; branch if not first two address bytes read
Macro: CPX.CC [Source: macros.inc]
     1 4BB2 E0 02				CPX	#$02			; 
     2 4BB4 90 F6				BCC	GET_FILE_CLST			; branch if C=0 (X-b1 < 0)
Source: boot_sys_os.asm
  1092 4BB6 A0 14		                LDY     #D_START_CLSTH      			; yes, get high bytes of start cluster address
  1093 4BB8			                CPX.CC  #$04 GET_FILE_CLST     			; branch if not all four bytes read
Macro: CPX.CC [Source: macros.inc]
     1 4BB8 E0 04				CPX	#$04			; 
     2 4BBA 90 F0				BCC	GET_FILE_CLST			; branch if C=0 (X-b1 < 0)
Source: boot_sys_os.asm
  1094 4BBC 60			                RTS                         			; yes, file found
  1095
  1096 4BBD 18			CB_FIND_END     CLC                         			; file not found
  1097 4BBE 60			CB_FIND_END2    RTS
  1098 				                
  1099 				; **** Find Free or Deleted Dir. Entry **************************************
  1100 4BBF			CB_FIND_FREE_DIR_ENTRY
  1101 4BBF A0 00				LDY	#D_FILENAME			; set index to filename
  1102 4BC1 B1 A8				LDA	(CURR_DIR_ENTRY),Y		; 1st char of filename
  1103 4BC3					CMP.EQ	#$E5 FND_EMPTY			; Branch if deleted entry found
Macro: CMP.EQ [Source: macros.inc]
     1 4BC3 C9 E5				CMP	#$E5
     2 4BC5 F0 05				BEQ	FND_EMPTY
Source: boot_sys_os.asm
  1104 						
  1105 4BC7			FFD_LP1		LDA.NE	(CURR_DIR_ENTRY),Y NOT_EMPTY	; branch if dir. entry is in use
Macro: LDA.NE [Source: macros.inc]
     1 4BC7 B1 A8				LDA	(CURR_DIR_ENTRY),Y
     2 4BC9 D0 0C				BNE	NOT_EMPTY
Source: boot_sys_os.asm
  1106 4BCB C8					INY
  1107 4BCC A9 00		FND_EMPTY	LDA	#$00				; empty rest of subdir, just to be sure
  1108 4BCE 91 A8 C8		FFD_LP2		STA	(CURR_DIR_ENTRY),Y+
  1109 4BD1					CPY.NE	#$20 FFD_LP2			; branch if not all 32 bytes cleared yet
Macro: CPY.NE [Source: macros.inc]
     1 4BD1 C0 20				CPY	#$20
     2 4BD3 D0 F9				BNE	FFD_LP2
Source: boot_sys_os.asm
  1110 						
  1111 4BD5 38			FF_EMPTY	SEC					; C=1, dir. entry is free or deleted
  1112 4BD6 60			                RTS                         		; return
  1113 4BD7 18			NOT_EMPTY     	CLC                         		; C=0, dir. entry is not empty
  1114 4BD8 60					RTS					; return
  1115
  1116 				; **** Data Area ***************************************************************
  1117 				; ******************************************************************************
  1118
  1119 				; Indirect Jump Pointer Of Current Command Address *****************************
  1120 4BD9 00 00		CMD_ADDR        .word      $0000
  1121 				                
  1122 				; String Data Area *************************************************************
  1123 4BDB 0D 20 57 65 6C 63 + MSG_BOOT        .by    CR ' Welcome to DOS65 for the JC2, V'
  1124 4BFC 30 2E 33 2E 30	                .byte  VERMAIN,DOT,VERPSUB,DOT,VERSSUB
  1125 4C01 2C 20 32 30 32 35 +                 .by    ', 2025 by Emile' CR
  1126 4C11 20 4F 72 69 67 69 + 		.by    ' Original design by Joerg Walke' CR CR $00
  1127 4C33 4F 75 74 20 6F 66 + MSG_SIZE_ERR    .by    'Out of memory' CR $00
  1128 = 4C42			FILENAME        .ds 	12
    88 4C4E					ICL 	"boot_sys_sh.asm"	; Shell portion of boot.sys
Source: boot_sys_sh.asm
     1 				;-------------------------------------------------------------------------------
     2 				; This file contains the SHELL portion of the BOOT.SYS file.
     3 				; Assembler: MADS-Assembler
     4 				;-------------------------------------------------------------------------------
     5
     6 				; ******************************************************************************
     7 				; Main Loop Of Command Interpreter *********************************************
     8 				; ******************************************************************************
     9 4C4E A9 08 8D D9 4B A9 + SH_CMD_PROMPT   MWA	#CMD_FOUND CMD_ADDR  ; CMD_ADDR = CMD_FOUND
    10 4C58 20 46 4D		                JSR     PRINT_PROMPT
    11 4C5B 20 60 4A		                JSR  	OS_STRING_IN         ; read input string
    12 4C5E 20 72 4C				JSR     GET_CMD              ; parse string
    13 4C61 90 06				BCC     CMD_EXTERNAL
    14 						
    15 4C63 20 6F 4C		                JSR     CMD_EXECUTE          ; execute internal command
    16 4C66 4C 4E 4C		                JMP     SH_CMD_PROMPT        ; endless loop
    17 						
    18 4C69 20 14 57		CMD_EXTERNAL    JSR     SH_RUN               ; internal command not found, load executable file from drive
    19 4C6C 4C 4E 4C		                JMP     SH_CMD_PROMPT        ; endless loop
    20 						
    21 4C6F 6C D9 4B		CMD_EXECUTE     JMP     (CMD_ADDR)           ; indirect jump to internal command call back function
    22 						
    23 				; Get Command String ***********************************************************
    24 4C72 20 AE 4F		GET_CMD         JSR     GET_CMD_STR          ; skip leading spaces
    25 4C75 D0 03		                BNE     GET_CMD0
    26
    27 4C77 4C 08 4D		                JMP     CMD_FOUND            ; empty command if first char is NULL
    28
    29 4C7A 20 0A 4D		GET_CMD0        JSR     UPPERCASE	     ; uppercase chars only
    30 4C7D AA			                TAX
    31 4C7E A0 00		                LDY     #$00
    32 4C80 8A			GET_CMD1        TXA                          	; try to find command in command table
    33 4C81					CMP.EQ	CHARS,Y GET_CMD2     	; branch if equal
Macro: CMP.EQ [Source: macros.inc]
     1 4C81 D9 1E 5A				CMP	CHARS,Y
     2 4C84 F0 0C				BEQ	GET_CMD2
Source: boot_sys_sh.asm
    34 4C86			                LDA.EQ  CHARS,Y SH_CMD_SET_DRV	; get [X,Y] pointer, branch if at end-of-string
Macro: LDA.EQ [Source: macros.inc]
     1 4C86 B9 1E 5A				LDA	CHARS,Y
     2 4C89 F0 57				BEQ	SH_CMD_SET_DRV
Source: boot_sys_sh.asm
    35 4C8B 8A			                TXA
    36 4C8C C8 C8 C8		        :3      INY			     	; Y += 3
    37 4C8F 4C 80 4C		                JMP     GET_CMD1	     	; branch always
    38
    39 4C92 C8			GET_CMD2        INY
    40 4C93 B9 1E 5A C8 85 E8	                MVA     CHARS,Y+ STOL        	; store in pointer LSB
    41 4C99 B9 1E 5A 85 E9	                MVA     CHARS,Y  STOH	     	; store in pointer MSB
    42 4C9E A0 00 8C 10 18			MVY	#$00 NEXTINDEX	     	; init. command index
    43 4CA3 A6 AC		GET_CMD_LOOP1   LDX     NCNT                 	; reset string index to first command char
    44 4CA5			                LDA.EQ  (STOL),Y SH_CMD_SET_DRV	; branch if command length is 0 (command not found)
Macro: LDA.EQ [Source: macros.inc]
     1 4CA5 B1 E8				LDA	(STOL),Y
     2 4CA7 F0 39				BEQ	SH_CMD_SET_DRV
Source: boot_sys_sh.asm
    45 4CA9 18 6D 10 18 8D 10 +                 ADD:STA NEXTINDEX		; set index to start of next command
    46 4CB0 E8			GET_CMD_LOOP2   INX                          	; point to next char in command string
    47 4CB1 C8			                INY                          	; point to next char in command table
    48 4CB2			                CPY.EQ  NEXTINDEX GET_CMD3   	; branch if y is pointing to the next command
Macro: CPY.EQ [Source: macros.inc]
     1 4CB2 CC 10 18				CPY	NEXTINDEX
     2 4CB5 F0 15				BEQ	GET_CMD3
Source: boot_sys_sh.asm
    49
    50 4CB7 BD 00 14		                LDA     STRBUF,X             	; load char from command string
    51 4CBA 20 0A 4D		                JSR     UPPERCASE	     	; and convert it to uppercase
    52 4CBD					CMP.EQ	(STOL),Y  GET_CMD_LOOP2	; compare char with char in command table and branch if equal
Macro: CMP.EQ [Source: macros.inc]
     1 4CBD D1 E8				CMP	(STOL),Y
     2 4CBF F0 EF				BEQ	GET_CMD_LOOP2
Source: boot_sys_sh.asm
    53
    54 4CC1 AC 10 18		                LDY     NEXTINDEX            	; else point y to next command
    55 4CC4 C8 C8		        :2      INY			     	; Y += 2
    56 4CC6 8C 10 18		                STY     NEXTINDEX
    57 4CC9 4C A3 4C		                JMP     GET_CMD_LOOP1	     	; branch always
    58
    59 4CCC B1 E8 8D D9 4B C8 + GET_CMD3        MWA	(STOL),Y CMD_ADDR    	; CMD_ADDR = (STOL),Y (STOL),Y+1
    60 4CD7			                LDA.EQ  STRBUF,X CMD_FOUND	; branch if STRBUF,X contains end-of-string
Macro: LDA.EQ [Source: macros.inc]
     1 4CD7 BD 00 14				LDA	STRBUF,X
     2 4CDA F0 2C				BEQ	CMD_FOUND
Source: boot_sys_sh.asm
    61 4CDC			                CMP.EQ	#SPC     CMD_FOUND	; branch if space found
Macro: CMP.EQ [Source: macros.inc]
     1 4CDC C9 20				CMP	#SPC
     2 4CDE F0 28				BEQ	CMD_FOUND
Source: boot_sys_sh.asm
    62 4CE0 18			CMD_NOT_FOUND   CLC
    63 4CE1 60			                RTS
    64 				                
    65 				; Check If Set-Drive Command (A: .. Z:) ****************************************
    66 4CE2 A6 AC		SH_CMD_SET_DRV  LDX     NCNT                 ; get first command char
    67 4CE4 BD 00 14		                LDA     STRBUF,X
    68 4CE7 20 0A 4D		                JSR     UPPERCASE            ; convert it to upper case
    69 4CEA			                CMP.CC  #'A' CMD_NOT_FOUND   ; branch if char is not between 'A' and 'Z'
Macro: CMP.CC [Source: macros.inc]
     1 4CEA C9 41				CMP	#'A'			; 
     2 4CEC 90 F2				BCC	CMD_NOT_FOUND			; branch if C=0 (A-b1 < 0)
Source: boot_sys_sh.asm
    70 4CEE			                CMP.CS  #'[' CMD_NOT_FOUND
Macro: CMP.CS [Source: macros.inc]
     1 4CEE C9 5B				CMP	#'['			; 
     2 4CF0 B0 EE				BCS	CMD_NOT_FOUND			; branch if C=1 (A-b1 >= 0)
Source: boot_sys_sh.asm
    71
    72 4CF2 A8			                TAY
    73 4CF3 BD 01 14		                LDA     STRBUF+1,X
    74 4CF6			                CMP.NE  #':' CMD_NOT_FOUND   ; branch if second char is not a ':'
Macro: CMP.NE [Source: macros.inc]
     1 4CF6 C9 3A				CMP	#':'
     2 4CF8 D0 E6				BNE	CMD_NOT_FOUND
Source: boot_sys_sh.asm
    75 4CFA 38			                SEC
    76 4CFB 98			                TYA
    77 4CFC E9 41		                SBC     #'A'                 ; make a drive (0..25) number out of drive letter (A..Z)
    78 4CFE			                LDXYI   OS_SET_DRIVE         ; set call back function for set drive command
Macro: LDXYI [Source: macros.inc]
     1 4CFE A2 8B			LDX	<OS_SET_DRIVE				; MADS makes this immediate
     2 4D00 A0 49			LDY	>OS_SET_DRIVE
Source: boot_sys_sh.asm
    79 4D02			                STXY    CMD_ADDR
Macro: STXY [Source: macros.inc]
     1 4D02 8E D9 4B			STX	CMD_ADDR
     2 4D05 8C DA 4B			STY	CMD_ADDR+1
Source: boot_sys_sh.asm
    80 4D08 38			CMD_FOUND       SEC
    81 4D09 60			                RTS
    82 				                
    83 				; **** Return Uppercase Character **********************************************
    84 				; Input:  A - Character
    85 				; Output: A - Uppercase Character
    86 				; ******************************************************************************
    87 4D0A			UPPERCASE       CMP.CC  #'a'   UPPERCASE_END	; exit if A < 'a'
Macro: CMP.CC [Source: macros.inc]
     1 4D0A C9 61				CMP	#'a'			; 
     2 4D0C 90 06				BCC	UPPERCASE_END			; branch if C=0 (A-b1 < 0)
Source: boot_sys_sh.asm
    88 4D0E			                CMP.CS  #'z'+1 UPPERCASE_END	; exit if A > 'z'
Macro: CMP.CS [Source: macros.inc]
     1 4D0E C9 7B				CMP	#'z'+1			; 
     2 4D10 B0 02				BCS	UPPERCASE_END			; branch if C=1 (A-b1 >= 0)
Source: boot_sys_sh.asm
    89 4D12 29 DF		                AND     #$DF			; make lower-case if 'a'..'z'
    90 4D14 60			UPPERCASE_END   RTS				; return
    91
    92 				; **** Print Two Digit Number **************************************************
    93 				; Input: A - Number (0..99)
    94 				; ******************************************************************************
    95 4D15 20 BD E0		NUMOUT          JSR     DEC2STR			; Converts into DIG0, DIG1 and DIG2
    96 4D18 A2 01		                LDX     #$01
    97 4D1A B5 F8		NEXT_NUMOUT     LDA     DIG0,X			
    98 4D1C 20 52 E0		                JSR     COUT
    99 4D1F					DEX.PL	NEXT_NUMOUT		; branch if not done yet
Macro: DEX.PL [Source: macros.inc]
     1 4D1F CA					DEX
     2 4D20 10 F8				BPL	NEXT_NUMOUT
Source: boot_sys_sh.asm
   100 4D22 60			                RTS				; return
   101 				                
   102 				; **** Print Current Drive *****************************************************
   103 				;
   104 				; ******************************************************************************
   105 4D23 AD 1E 18		PRINT_DRIVE     LDA     CURR_DRIVE	   ; 0=FDD1, 1=FDD2, @=SD/CF card
   106 4D26 18 69 41				ADD	#'A'		   ; 'A', 'B', 'C', ...
   107 4D29 20 52 E0		                JSR     COUT		   ; print char
   108 4D2C A9 3A		                LDA     #COLON		   ; ':'
   109 4D2E 4C 52 E0		                JMP     COUT		   ; print char and return
   110 				                
   111 				; **** Print Current Path ******************************************************
   112 				;
   113 				; ******************************************************************************
   114 4D31 A2 00 86 D8		PRINT_PATH      MVX	#0 SAVEX		; SAVEX = 0
   115 4D35 A6 D8		PR_PATH_LP	LDX	SAVEX
   116 4D37 BD 20 04				LDA     D_SUBDIR_NAME,X		; 
   117 4D3A 48					PHA
   118 4D3B 20 52 E0		                JSR     COUT		    	; print char
   119 4D3E 68					PLA
   120 4D3F F0 04				BEQ	PR_PATH_DN		; End-of-String?
   121 						
   122 4D41					INC.NE	SAVEX PR_PATH_LP	; Get next char, branch if not done yet
Macro: INC.NE [Source: macros.inc]
     1 4D41 E6 D8				INC	SAVEX
     2 4D43 D0 F0				BNE	PR_PATH_LP
Source: boot_sys_sh.asm
   123 4D45 60			PR_PATH_DN      RTS				; return
   124
   125 				; **** Print Drive and Path Prompt *********************************************
   126 				;
   127 				; ******************************************************************************
   128 4D46 20 5A E0		PRINT_PROMPT    JSR     CROUT		   ; CR
   129 4D49 20 23 4D		                JSR     PRINT_DRIVE	   ; e.g. 'C:'
   130 4D4C 20 31 4D		                JSR     PRINT_PATH	   ; '\'
   131 4D4F A9 3E		                LDA     #PROMPT		   ; '>'
   132 4D51 4C 52 E0		                JMP     COUT		   ; print char and return
   133 				                
   134 				; **** Print Drive Label *******************************************************
   135 				;
   136 				; ******************************************************************************
   137 4D54 48			PRINT_LABEL     PHA			   ; save A
   138 4D55			                PHY			   ; save Y
Macro: PHY [Source: macros.inc]
     1 4D55 98				TYA
     2 4D56 48				PHA
Source: boot_sys_sh.asm
   139 4D57			                PRSTR   MSG_LABEL	   ; 'Volume in drive '
Macro: PRSTR [Source: macros.inc]
     1 4D57 A2 10			LDX	<MSG_LABEL				; MADS makes this immediate
     2 4D59 A0 59			LDY	>MSG_LABEL
Source: boot_sys_sh.asm
     2 4D5B 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   140 4D5E 20 23 4D		                JSR     PRINT_DRIVE	   ; e.g. 'C'
   141 4D61			                PRSTR   MSG_LABEL2	   ; ' is '
Macro: PRSTR [Source: macros.inc]
     1 4D61 A2 21			LDX	<MSG_LABEL2				; MADS makes this immediate
     2 4D63 A0 59			LDY	>MSG_LABEL2
Source: boot_sys_sh.asm
     2 4D65 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   142 4D68 20 7E 4D		                JSR     PRINT_FILENAME1    ; print volume-label
   143 4D6B 20 5A E0		                JSR     CROUT		   ; CR 2x
   144 4D6E 20 5A E0		                JSR     CROUT
   145 4D71					PLY			   ; restore Y
Macro: PLY [Source: macros.inc]
     1 4D71 68				PLA
     2 4D72 A8				TAY
Source: boot_sys_sh.asm
   146 4D73 68			                PLA			   ; restore A
   147 4D74 60			                RTS
   148 				                
   149 				; **** Print Filename **********************************************************
   150 				;
   151 				; ******************************************************************************
   152 4D75 A2 2E		PRINT_FILENAME  LDX     #DOT					; Check if directory
   153 4D77					AND.EQ	F_ATTRIBS #FA_DIRECTORY PRINT_FILENAME2	; branch if F_ATTRIBS & FA_DIRECTORY = 0  (not a dir.)
Macro: AND.EQ [Source: macros.inc]
     2 4D77 AD 12 18				LDA	F_ATTRIBS
     3 4D7A 29 10				AND	#FA_DIRECTORY
     4 4D7C F0 02				BEQ	PRINT_FILENAME2
Source: boot_sys_sh.asm
   154 4D7E A2 20		PRINT_FILENAME1 LDX     #SPC                			; yes, set divider to ' '
   155 4D80 A0 00		PRINT_FILENAME2 LDY     #$00
   156 4D82			PRINT_FILENAME3 CPY.NE  #$08 PRINT_NEXT_CHAR			; branch if not at start of file extension
Macro: CPY.NE [Source: macros.inc]
     1 4D82 C0 08				CPY	#$08
     2 4D84 D0 07				BNE	PRINT_NEXT_CHAR
Source: boot_sys_sh.asm
   157 4D86 20 5E E0		                JSR     SPCOUT		    		; print space
   158 4D89 8A			                TXA
   159 4D8A 20 52 E0		                JSR     COUT                		; yes, print divider char
   160 4D8D B1 A8		PRINT_NEXT_CHAR LDA     (CURR_DIR_ENTRY),Y  		; load next character
   161 4D8F 20 52 E0		                JSR     COUT                		; print character (does not affect Y)
   162 4D92 C8			                INY
   163 4D93			                CPY.NE  #D_ATTRIBUTES PRINT_FILENAME3	; repeat if not all characters printed
Macro: CPY.NE [Source: macros.inc]
     1 4D93 C0 0B				CPY	#D_ATTRIBUTES
     2 4D95 D0 EB				BNE	PRINT_FILENAME3
Source: boot_sys_sh.asm
   164 4D97 60			                RTS			    		; return
   165 				                
   166 				; **** Print File Info *********************************************************
   167 				; Input: F_ATTRIBS = File Attributes
   168 				; ******************************************************************************
   169 4D98			PRINT_FILE_INFO AND.EQ	F_ATTRIBS #FA_DIRECTORY PRINT_SIZE	; branch if F_ATTRIBS & FA_DIRECTORY = 0 (not a dir.)
Macro: AND.EQ [Source: macros.inc]
     2 4D98 AD 12 18				LDA	F_ATTRIBS
     3 4D9B 29 10				AND	#FA_DIRECTORY
     4 4D9D F0 12				BEQ	PRINT_SIZE
Source: boot_sys_sh.asm
   170 				                
   171 				; Print Directory Attribute ****************************************************
   172 4D9F			                PRSTR   MSG_DIR_ENTRY	    ; print <DIR>
Macro: PRSTR [Source: macros.inc]
     1 4D9F A2 26			LDX	<MSG_DIR_ENTRY				; MADS makes this immediate
     2 4DA1 A0 59			LDY	>MSG_DIR_ENTRY
Source: boot_sys_sh.asm
     2 4DA3 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   173 4DA6 EE 17 18 D0 03 EE + 		INW	CURR_DIR_CNT	    ; increment total dir count
   174 4DAE 4C DB 4D				JMP     PRINT_ATTRIB
   175
   176 				; Print File Size **************************************************************
   177 4DB1 20 5E E0		PRINT_SIZE      JSR     SPCOUT
   178 4DB4 20 5E E0		                JSR     SPCOUT
   179 4DB7 EE 15 18 D0 03 EE +                 INW  	CURR_FILE_CNT       ; increment total file count (word)
   180 4DBF A2 00		NO_FCNT_CARRY   LDX     #$00
   181 4DC1 A0 1C		                LDY     #D_FILE_SIZE        ; index to file size
   182 4DC3 18			                CLC
   183 4DC4 08			                PHP
   184 4DC5 28			LOAD_SIZE       PLP
   185 4DC6 B1 A8 95 C0		                MVA     (CURR_DIR_ENTRY),Y NUM32,X	; load file size into NUM32
   186 4DCA 7D 19 18 9D 19 18	                ADC:STA CURR_USED_SIZE,X    		; add file size to total file size
   187 4DD0 08			                PHP
   188 4DD1 C8			                INY
   189 4DD2 E8			                INX
   190 4DD3					CPX.NE	#$04 LOAD_SIZE			; branch if not done yet
Macro: CPX.NE [Source: macros.inc]
     1 4DD3 E0 04				CPX	#$04
     2 4DD5 D0 EE				BNE	LOAD_SIZE
Source: boot_sys_sh.asm
   191 4DD7 28			                PLP
   192 4DD8 20 EF 4E		                JSR     PRINT_INT32         		; print file size
   193 				                
   194 				; Print File Attributes ********************************************************
   195 4DDB 20 5E E0		PRINT_ATTRIB    JSR     SPCOUT
   196 4DDE					BTST	CURR_CMD_PARAM 1 PRINT_DATE	; skip printing attributes is /A param is set
Macro: BTST [Source: macros.inc]
     4 4DDE AD 1F 18				LDA	CURR_CMD_PARAM
     5 4DE1 29 02				AND	#(1 << 1)
     6 4DE3 F0 17				BEQ	PRINT_DATE
Source: boot_sys_sh.asm
   197 4DE5 A2 07		                LDX     #$07
   198 4DE7 0E 12 18		GET_ATTRIB      ASL     F_ATTRIBS           		; move attribute bit into carry
   199 4DEA			                LDA.EQ  ATTRIB_VAL,X NEXT_ATTRIB	; branch if attribute is not printable
Macro: LDA.EQ [Source: macros.inc]
     1 4DEA BD F2 59				LDA	ATTRIB_VAL,X
     2 4DED F0 07				BEQ	NEXT_ATTRIB
Source: boot_sys_sh.asm
   200 4DEF B0 02		                BCS     SET_ATTRIB			; branch if printable
   201
   202 4DF1 A9 2D		CLEAR_ATTRIB    LDA     #'-'                		; attribute not set, print -
   203 4DF3 20 52 E0		SET_ATTRIB      JSR     COUT                		; print attribute
   204 4DF6			NEXT_ATTRIB     DEX.PL	GET_ATTRIB          		; repeat until all attributes printed
Macro: DEX.PL [Source: macros.inc]
     1 4DF6 CA					DEX
     2 4DF7 10 EE				BPL	GET_ATTRIB
Source: boot_sys_sh.asm
   205 4DF9 20 5E E0		                JSR     SPCOUT
   206 				                
   207 				; Print Date *******************************************************************
   208 				; Date Format: 15-09 Years from 1980 (0-127 -> 1980-2107)
   209 				;              08-05 Month of year (1-12)
   210 				;              04-00 Day of month (1-32)
   211 				; ******************************************************************************
   212 4DFC A0 18		PRINT_DATE      LDY     #D_LAST_WR_DATE     		; index to file last write date
   213 4DFE B1 A8 8D E6 4E	                MVA     (CURR_DIR_ENTRY),Y MONTH	; load file creation date low byte
   214 4E03 29 1F		                AND     #$1F                		; mask day value
   215 4E05 8D E7 4E		                STA     DAY
   216 4E08 C8			                INY
   217 4E09 B1 A8		                LDA     (CURR_DIR_ENTRY),Y  ; load file creation date high byte
   218 4E0B 4A			                LSR                         ; year in A
   219 4E0C 6E E6 4E		                ROR     MONTH
   220 4E0F 4E E6 4E 4E E6 4E +         :4      LSR     MONTH		    ; LSR 4
   221 4E1B 18 69 50				ADD	#80		    ; same as CLC + ADC, year correction value (add 1980)
   222 4E1E 8D E5 4E		                STA     YEAR
   223 4E21 AD E7 4E		                LDA     DAY
   224 4E24 20 15 4D		                JSR     NUMOUT
   225 4E27			                PRCH    '.'
Macro: PRCH [Source: macros.inc]
     1 4E27 A9 2E			LDA	#'.'
     2 4E29 20 52 E0			JSR	COUT
Source: boot_sys_sh.asm
   226 4E2C AD E6 4E		                LDA     MONTH
   227 4E2F 20 15 4D		                JSR     NUMOUT
   228 4E32			                PRCH    '.'
Macro: PRCH [Source: macros.inc]
     1 4E32 A9 2E			LDA	#'.'
     2 4E34 20 52 E0			JSR	COUT
Source: boot_sys_sh.asm
   229 4E37 AC E5 4E		                LDY     YEAR
   230 4E3A			                CPY.CC  #100 CENTURY_19	    ; branch if < 100
Macro: CPY.CC [Source: macros.inc]
     1 4E3A C0 64				CPY	#100			; 
     2 4E3C 90 0C				BCC	CENTURY_19			; branch if C=0 (Y-b1 < 0)
Source: boot_sys_sh.asm
   231
   232 4E3E A9 14		                LDA     #20
   233 4E40 20 15 4D		                JSR     NUMOUT
   234 4E43 98			                TYA
   235 4E44 38 E9 64				SUB	#100		    ; same as SEC + SBC
   236 4E47 4C 50 4E		                JMP     PRINT_YEAR
   237
   238 4E4A A9 13		CENTURY_19      LDA     #19
   239 4E4C 20 15 4D		                JSR     NUMOUT
   240 4E4F 98			                TYA
   241 4E50 20 15 4D		PRINT_YEAR      JSR     NUMOUT
   242 4E53 20 5E E0		                JSR     SPCOUT
   243 				                
   244 				; Print Time *******************************************************************
   245 				; Time Format: 15-11 Hours (0-23)
   246 				;              10-05 Minutes (0-59)
   247 				;              04-00 Seconds (0-29), 2-second intervals, so 29 gives 58 seconds.
   248 				; ******************************************************************************
   249 4E56 A0 16		PRINT_TIME      LDY     #D_LAST_WR_TIME     		; index to file Last write time
   250 4E58 B1 A8 8D E8 4E	                MVA     (CURR_DIR_ENTRY),Y MINUTE	; load file last write time low byte
   251 4E5D C8			                INY
   252 4E5E B1 A8		                LDA     (CURR_DIR_ENTRY),Y  		; load file last write time high byte
   253 				        .rept 3
   254 						LSR     
   255 				                ROR     MINUTE
   256 					.endr	
Source: REPT
   254 4E60 4A					LSR     
   254 4E61 6E E8 4E		                ROR     MINUTE
   254 4E64 4A					LSR     
   254 4E65 6E E8 4E		                ROR     MINUTE
   254 4E68 4A					LSR     
   254 4E69 6E E8 4E		                ROR     MINUTE
Source: boot_sys_sh.asm
   257 4E6C 4E E8 4E 4E E8 4E	        :2      LSR     MINUTE
   258 4E72 20 15 4D		                JSR     NUMOUT
   259 4E75			                PRCH     ':'		    ; Print :
Macro: PRCH [Source: macros.inc]
     1 4E75 A9 3A			LDA	#':'
     2 4E77 20 52 E0			JSR	COUT
Source: boot_sys_sh.asm
   260 4E7A AD E8 4E		                LDA     MINUTE
   261 4E7D 20 15 4D		                JSR     NUMOUT		    ; print minutes
   262
   263 				; Print Cluster Number *********************************************************
   264 				; Only with /C parameter: Prints Cluster number AND LBA number
   265 				; ******************************************************************************
   266 4E80					BTST	CURR_CMD_PARAM 3 PRINT_EXIT		; Skip printing cluster nr if /C parameter is set
Macro: BTST [Source: macros.inc]
     4 4E80 AD 1F 18				LDA	CURR_CMD_PARAM
     5 4E83 29 08				AND	#(1 << 3)
     6 4E85 F0 5D				BEQ	PRINT_EXIT
Source: boot_sys_sh.asm
   267 4E87 20 5E E0		                JSR	SPCOUT		    			; Print space
   268 4E8A					PRCLW	D_START_CLSTH CURR_DIR_ENTRY NUM32+2	; Print cluster nr (32-bit) and save it in NUM32
Macro: PRCLW [Source: macros.inc]
     1 4E8A A0 15				LDY	#D_START_CLSTH+1		; Print MSB of word
     1 4E8C B1 A8				LDA	(CURR_DIR_ENTRY),Y
     3 4E8E 85 C3				STA	NUM32+2+1
     5 4E90 20 91 E0				JSR	HEXOUT			; changes Y!
Source: boot_sys_sh.asm
     7 4E93 A0 14				LDY	#D_START_CLSTH			; Print LSB of word
     1 4E95 B1 A8				LDA	(CURR_DIR_ENTRY),Y
     3 4E97 85 C2				STA	NUM32+2
     5 4E99 20 91 E0				JSR	HEXOUT			; changes Y!
Source: boot_sys_sh.asm
Source: boot_sys_sh.asm
   269 4E9C					PRCLW	D_START_CLST  CURR_DIR_ENTRY NUM32
Macro: PRCLW [Source: macros.inc]
     1 4E9C A0 1B				LDY	#D_START_CLST+1		; Print MSB of word
     1 4E9E B1 A8				LDA	(CURR_DIR_ENTRY),Y
     3 4EA0 85 C1				STA	NUM32+1
     5 4EA2 20 91 E0				JSR	HEXOUT			; changes Y!
Source: boot_sys_sh.asm
     7 4EA5 A0 1A				LDY	#D_START_CLST			; Print LSB of word
     1 4EA7 B1 A8				LDA	(CURR_DIR_ENTRY),Y
     3 4EA9 85 C0				STA	NUM32
     5 4EAB 20 91 E0				JSR	HEXOUT			; changes Y!
Source: boot_sys_sh.asm
Source: boot_sys_sh.asm
   270 4EAE A9 00 C5 C3 D0 10 + 		CPD	#$00000000 NUM32			; NUM32 = 0L ?
   271 4EC4 D0 04				BNE	CLNRNOT0				; Branch if cluster nr > 0
   272 						
   273 4EC6 A9 02 85 C0				MVA	#2 NUM32				; If boot-sector then Cluster nr = 2
   274 4ECA 20 5E E0		CLNRNOT0	JSR	SPCOUT
   275 4ECD 20 04 41				JSR	CLSTR_TO_LBA	   			; Convert NUM32 Cluster nr into NUM32 LBA
   276 4ED0					PRHEX32	NUM32			        	; and print as 32-bit hex number
Macro: PRHEX32 [Source: macros.inc]
     1 4ED0 A5 C3			LDA	NUM32+2+1				; print MSB
     2 4ED2 20 91 E0			JSR	HEXOUT
     3 4ED5 A5 C2			LDA	NUM32+2
     4 4ED7 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_sh.asm
     1 4EDA A5 C1			LDA	NUM32+1				; print MSB
     2 4EDC 20 91 E0			JSR	HEXOUT
     3 4EDF A5 C0			LDA	NUM32
     4 4EE1 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_sh.asm
Source: boot_sys_sh.asm
   277 4EE4 60			PRINT_EXIT	RTS
   278
   279 4EE5 00			YEAR		.byte 	$00
   280 4EE6 00			MONTH		.byte 	$00
   281 4EE7 00			DAY 		.byte	$00
   282 4EE8 00			MINUTE		.byte 	$00
   283 				                
   284 				; **** Print 16 Bit Number *****************************************************
   285 				; Input: X,Y = Int16
   286 				; ******************************************************************************
   287 4EE9 20 5D 4F		PRINT_INT16     JSR     BIN16_TO_BCD
   288 4EEC 4C F2 4E		                JMP     PRINT_NUM
   289 				                
   290 				; **** Print 32 Bit Number *****************************************************
   291 				; Input: NUM32[0..3] = Int32
   292 				; Output: C = 0 - Number is 0; C = 1 - Number <> 0
   293 				; ******************************************************************************
   294 4EEF 20 67 4F		PRINT_INT32     JSR     BIN32_TO_BCD        ; convert NUM32 into BCD
   295 4EF2 A2 00		PRINT_NUM       LDX     #$00
   296 4EF4 A0 0A		                LDY     #10
   297 4EF6 18			                CLC                         ; save status bits
   298 4EF7 08			PRINT_NUM1      PHP                         ; store current carry flag
   299 4EF8 20 2E 4F		                JSR     PRINT_SEPARATOR
   300 4EFB BD FA 59		                LDA     BCD_VAL,X           ; load two decimal digits
   301 4EFE 48			                PHA                         ; store A
   302 4EFF 98			                TYA                         ; move digit counter into A
   303 4F00 4A			                LSR                         ; bit one into carry
   304 4F01 68			                PLA                         ; restore A
   305 4F02 90 05		                BCC     SET_DIGIT1          ; is it a even digit?
   306 						
   307 4F04 E8			                INX                         ; no, process digit 2
   308 4F05 29 0F		                AND     #$0F
   309 4F07 10 04		                BPL     SET_DIGIT2
   310 4F09 4A 4A 4A 4A		SET_DIGIT1 :4   LSR                         ; LSR4, shift upper digit of BCD into lower nibble
   311 4F0D 28			SET_DIGIT2      PLP
   312 4F0E B0 16		                BCS     PRINT_DIGIT         ; check if we processed at least one digit <> 0
   313 						
   314 4F10			                AND.NE  #$0F PRINT_DIGIT    ; branch if not a leading 0, print digit
Macro: AND.NE [Source: macros.inc]
     6 4F10 29 0F				AND	#$0F
     7 4F12 D0 12				BNE	PRINT_DIGIT
Source: boot_sys_sh.asm
   315 4F14 98			                TYA
   316 4F15			                CMP.NE  #1 PRINT_SPACE      ; is it the last digit? Branch if not, just print space char
Macro: CMP.NE [Source: macros.inc]
     1 4F15 C9 01				CMP	#1
     2 4F17 D0 07				BNE	PRINT_SPACE
Source: boot_sys_sh.asm
   317 4F19 A9 30		                LDA     #48                 ; yes, print 0
   318 4F1B 20 9A E0		                JSR     HEXDIG
   319 4F1E 18			                CLC                         ; number is 0
   320 4F1F 60			                RTS
   321 						
   322 4F20 20 5E E0		PRINT_SPACE     JSR     SPCOUT              ; print space
   323 4F23 18			                CLC
   324 4F24 90 04		                BCC     NEXT_DIGIT	    ; branch always
   325 						
   326 4F26 20 9A E0		PRINT_DIGIT     JSR     HEXDIG              ; print single digit
   327 4F29 38			                SEC                         ; no more leading 0s
   328 4F2A			NEXT_DIGIT      DEY.NE	PRINT_NUM1          ; repeat if more digits
Macro: DEY.NE [Source: macros.inc]
     1 4F2A 88					DEY
     2 4F2B D0 CA				BNE	PRINT_NUM1
Source: boot_sys_sh.asm
   329 4F2D 60			                RTS
   330 				                
   331 				; Print Thousands Separator ****************************************************
   332 4F2E 08			PRINT_SEPARATOR PHP                         ; save status bits
   333 4F2F			                CPY.EQ  #$09 PRINT_SEP      ; branch if at 9th digit, print separator
Macro: CPY.EQ [Source: macros.inc]
     1 4F2F C0 09				CPY	#$09
     2 4F31 F0 08				BEQ	PRINT_SEP
Source: boot_sys_sh.asm
   334 4F33			                CPY.EQ  #$06 PRINT_SEP      ; branch if at 6th digit, print separator
Macro: CPY.EQ [Source: macros.inc]
     1 4F33 C0 06				CPY	#$06
     2 4F35 F0 04				BEQ	PRINT_SEP
Source: boot_sys_sh.asm
   335 4F37			                CPY.NE  #$03 NO_SEP         ; branch if not at 3rd digit, exit
Macro: CPY.NE [Source: macros.inc]
     1 4F37 C0 03				CPY	#$03
     2 4F39 D0 0B				BNE	NO_SEP
Source: boot_sys_sh.asm
   336 						
   337 4F3B 28			PRINT_SEP       PLP                         ; restore status bits
   338 4F3C 90 05		                BCC     PRINT_SPC           ; leading zero, just print a space char
   339 						
   340 4F3E A9 2E		                LDA     #NUM_SEP
   341 4F40 4C 52 E0		                JMP     COUT                ; print thousands seperator
   342 						
   343 4F43 4C 5E E0		PRINT_SPC       JMP     SPCOUT
   344 4F46 28			NO_SEP          PLP                         ; clean up stack
   345 4F47 60			                RTS
   346 				                
   347 				;**** Convert BCD Number To 8 Bit Binary ***************************************
   348 				; INPUT:  A = BCD Number
   349 				; Output: A = Binary Number
   350 				; ******************************************************************************
   351 4F48 85 C0		BCD_TO_BIN      STA     NUM32               ; save BCD number
   352 4F4A 29 F0		                AND     #$F0                ; and clear ones digit in A
   353 4F4C 4A			                LSR                         ; calc tens digit * 8
   354 4F4D 85 C1		                STA     NUM32+1             ; and store result
   355 4F4F 4A 4A		        :2      LSR     		    ; calc tens digit * 2
   356 4F51 18 65 C1 85 C1			ADD:STA	NUM32+1		    ; add it with tens digit * 8 and store result
   357 4F56 A5 C0		                LDA     NUM32               ; reload BCD number int A
   358 4F58 29 0F		                AND     #$0F                ; and clear tens digit in A
   359 4F5A 65 C1		                ADC     NUM32+1             ; finally add both result
   360 4F5C 60			                RTS			    ; return
   361 				                
   362 				;**** Convert 16 Bit Binary Number To BCD **************************************
   363 				; INPUT:  Int[X:Y]      = 16 Bit Binary
   364 				; OUTPUT: BCD_VAL[4..0] = Result
   365 				; ******************************************************************************
   366 4F5D			BIN16_TO_BCD    STXY	NUM32		    ; Store [X:Y] in lower word
Macro: STXY [Source: macros.inc]
     1 4F5D 86 C0			STX	NUM32
     2 4F5F 84 C1			STY	NUM32+1
Source: boot_sys_sh.asm
   367 4F61 A2 00 86 C2 86 C3			MWX	#$00 NUM32+2	    ; clear upper word
   368 				                
   369 				;**** Convert 32 Bit Binary Number To BCD **************************************
   370 				; INPUT:  NUM32[0..3]   = 32 Bit Binary
   371 				; OUTPUT: BCD_VAL[4..0] = Result
   372 				;*******************************************************************************
   373 4F67 F8			BIN32_TO_BCD    SED                         ; set decimal mode
   374 4F68 A2 04		                LDX     #$04
   375 4F6A A9 00		                LDA     #$00                ; clear BCD result value
   376 4F6C 9D FA 59 CA		CLEAR_BCD       STA     BCD_VAL,X-
   377 4F70 10 FA		                BPL     CLEAR_BCD
   378
   379 4F72 A2 20		                LDX     #$20                ; 32 source bits
   380 4F74			CONV_BITS       ASL32	NUM32		    ; shift MSB of NUM32 into carry flag
Macro: ASL32 [Source: macros.inc]
     1 4F74 06 C0			ASL     NUM32		  		; SHL with C=0
     2 4F76 26 C1		        ROL     NUM32+1		  
     3 4F78 26 C2		        ROL     NUM32+2
     4 4F7A 26 C3		        ROL     NUM32+3		  
Source: boot_sys_sh.asm
   381 4F7C AD FE 59 6D FE 59 + 		LDA:ADC:STA BCD_VAL+4	    ; and shift carry back into BCD result
   382 4F85 AD FD 59 6D FD 59 + 		LDA:ADC:STA BCD_VAL+3	    ; by adding BCD_VAL = BCD_VAL + BCD_VAL + C
   383 4F8E AD FC 59 6D FC 59 + 		LDA:ADC:STA BCD_VAL+2	    ; ...
   384 4F97 AD FB 59 6D FB 59 + 		LDA:ADC:STA BCD_VAL+1	    ; ...
   385 4FA0 AD FA 59 6D FA 59 + 		LDA:ADC:STA BCD_VAL	    ; uses more code, but faster than looping
   386 4FA9			                DEX.NE	CONV_BITS           ; repeat until all 32 bits done
Macro: DEX.NE [Source: macros.inc]
     1 4FA9 CA					DEX
     2 4FAA D0 C8				BNE	CONV_BITS
Source: boot_sys_sh.asm
   387 4FAC D8			                CLD                         ; reset to binary mode
   388 4FAD 60			                RTS
   389
   390 				; **** Get Command String ******************************************************
   391 				;
   392 				; ******************************************************************************
   393 4FAE A2 01		GET_CMD_STR     LDX     #$01
   394 4FB0			GET_CMD_CHAR    LDA.EQ  STRBUF,X END_PARAM	; get char, branch if end-of-string
Macro: LDA.EQ [Source: macros.inc]
     1 4FB0 BD 00 14				LDA	STRBUF,X
     2 4FB3 F0 2D				BEQ	END_PARAM
Source: boot_sys_sh.asm
   395 4FB5			                CMP.NE	#SPC     END_PARAM	; branch if not a space
Macro: CMP.NE [Source: macros.inc]
     1 4FB5 C9 20				CMP	#SPC
     2 4FB7 D0 29				BNE	END_PARAM
Source: boot_sys_sh.asm
   396 4FB9 E8			SKIP_SPC_CHAR   INX
   397 4FBA 4C B0 4F		                JMP     GET_CMD_CHAR
   398 				                
   399 				; **** Get Parameter String ****************************************************
   400 				; Output: C = 1: Parameter; C = 0: Path
   401 				;         A    = $00 : End of parameter string
   402 				;         NCNT = Index to parameter
   403 				; ******************************************************************************
   404 4FBD A6 AC		GET_NEXT_PARAM  LDX     NCNT                ; get actual index into command line
   405 4FBF 20 CD 4F		                JSR     GET_PARM_CHAR
   406 4FC2					CMP.NE	#OPT_SEP PATH_STR   ; branch if not a '/'
Macro: CMP.NE [Source: macros.inc]
     1 4FC2 C9 2F				CMP	#OPT_SEP
     2 4FC4 D0 18				BNE	PATH_STR
Source: boot_sys_sh.asm
   407 4FC6 E8			                INX			    ; next char
   408 4FC7 BD 00 14		                LDA     STRBUF,X	    ; load parameter
   409 4FCA 4C E1 4F		                JMP     PARAM_STR	    ; OK and return
   410
   411 4FCD			GET_PARM_CHAR   LDA.EQ  STRBUF,X PATH_STR   	; get char, branch if end-of-string
Macro: LDA.EQ [Source: macros.inc]
     1 4FCD BD 00 14				LDA	STRBUF,X
     2 4FD0 F0 0C				BEQ	PATH_STR
Source: boot_sys_sh.asm
   412 4FD2					CMP.EQ	#SPC     SKIP_SPC_CHAR	; branch if a space
Macro: CMP.EQ [Source: macros.inc]
     1 4FD2 C9 20				CMP	#SPC
     2 4FD4 F0 E3				BEQ	SKIP_SPC_CHAR
Source: boot_sys_sh.asm
   413 4FD6					CMP.EQ	#OPT_SEP PARAM_STR	; branch if a '/'
Macro: CMP.EQ [Source: macros.inc]
     1 4FD6 C9 2F				CMP	#OPT_SEP
     2 4FD8 F0 07				BEQ	PARAM_STR
Source: boot_sys_sh.asm
   414 4FDA E8			                INX			    
   415 4FDB 4C CD 4F		                JMP     GET_PARM_CHAR
   416
   417 4FDE 18			PATH_STR        CLC			    ; C=0, it is a path
   418 4FDF 90 01		                BCC     END_PARAM	    ; branch always
   419
   420 4FE1 38			PARAM_STR       SEC			    ; C=1, it is a parameter
   421 4FE2 86 AC		END_PARAM       STX     NCNT		    ; save index in parameter string
   422 4FE4 48			                PHA
   423 4FE5 68			                PLA
   424 4FE6 60			                RTS			    ; return
   425
   426 				; **** Internal Command Handlers ***********************************************
   427
   428 				; **** Directory Loop Call Back Functions **************************************
   429 				; Input : A - First character of filename
   430 				;         X - File Attributes
   431 				; Output: C = 0 - Continue print loop, C = 1 - Break print loop
   432 				; ******************************************************************************
   433
   434 				; **** Print Directory Entry - Call Back Routine *******************************
   435 4FE7			CB_PRINT_DIR    CPX.EQ  #$0F CB_PRINT_CONT		; skip to next entry if long filename entry
Macro: CPX.EQ [Source: macros.inc]
     1 4FE7 E0 0F				CPX	#$0F
     2 4FE9 F0 64				BEQ	CB_PRINT_CONT
Source: boot_sys_sh.asm
   436 4FEB					CMP.EQ  #$E5 CB_PRINT_CONT  		; branch (skip to next entry) if entry is deleted
Macro: CMP.EQ [Source: macros.inc]
     1 4FEB C9 E5				CMP	#$E5
     2 4FED F0 60				BEQ	CB_PRINT_CONT
Source: boot_sys_sh.asm
   437 4FEF 8E 12 18		                STX     F_ATTRIBS           		; save attributes
   438 4FF2 8A			                TXA
   439 4FF3 4A			                LSR     
   440 4FF4 4A			CHK_HIDDEN      LSR                         		; check if hidden file
   441 4FF5 90 07		                BCC     CHK_SYSTEM	    		; branch if not a hidden file
   442
   443 4FF7			                BTST	CURR_CMD_PARAM 2 CB_PRINT_CONT	; Skip line counting if dir /H (display hidden files) is set
Macro: BTST [Source: macros.inc]
     4 4FF7 AD 1F 18				LDA	CURR_CMD_PARAM
     5 4FFA 29 04				AND	#(1 << 2)
     6 4FFC F0 51				BEQ	CB_PRINT_CONT
Source: boot_sys_sh.asm
   444 4FFE 4A			CHK_SYSTEM      LSR                         		; check if system file
   445 4FFF 4A			CHK_LABEL       LSR                         		; check if disk label
   446 5000 90 08		                BCC     PRINT_DIR_ENTRY			; branch if not a volume label
   447
   448 						; Print Volume Label
   449 5002 20 54 4D		                JSR     PRINT_LABEL         		; print disk label
   450 5005 EE 14 18		                INC     LINE_CNT
   451 5008 D0 2D		                BNE     CHK_LINE_COUNT     		 ; branch always
   452
   453 500A			PRINT_DIR_ENTRY LDA.NE  TERM_CHAR COMP_MASK		; check the termination char, if >0 then just compare file names
Macro: LDA.NE [Source: macros.inc]
     1 500A AD 11 18				LDA	TERM_CHAR
     2 500D D0 0F				BNE	COMP_MASK
Source: boot_sys_sh.asm
   454 500F 20 76 4B		                JSR     CB_FIND_SUBDIR      		; TC = 0, so check if directory entry
   455 5012 90 3B		                BCC     CB_PRINT_CONT       		; name is a file entry or includes wildcard chars, just exit
   456
   457 5014 A9 5C 8D 11 18	                MVA     #PATH_SEP TERM_CHAR 		; TERM_CHAR = name compared equal with a directory entry
   458 5019 20 13 49		                JSR     OS_DIR_LOOP         		; list files of sub directory
   459 501C 38			                SEC                         		; directory list finished
   460 501D 60			                RTS                         		; exit
   461
   462 501E 20 51 50		COMP_MASK       JSR     SH_COMP_MASK
   463 5021 90 2D		                BCC     CB_PRINT_END
   464
   465 5023 A9 01 85 EE		PRINT_ITEM      MVA     #1 PSAV		    		; set file found flag
   466 5027 20 75 4D		                JSR     PRINT_FILENAME      		; print filename
   467 502A 20 98 4D		                JSR     PRINT_FILE_INFO     		; print file size, date and time
   468 502D 20 5A E0		                JSR     CROUT
   469 5030			                BTST    CURR_CMD_PARAM 0 CB_PRINT_CONT	; Skip line counting if dir /P parameter is set
Macro: BTST [Source: macros.inc]
     4 5030 AD 1F 18				LDA	CURR_CMD_PARAM
     5 5033 29 01				AND	#(1 << 0)
     6 5035 F0 18				BEQ	CB_PRINT_CONT
Source: boot_sys_sh.asm
   470 5037 EE 14 18		CHK_LINE_COUNT  INC     LINE_CNT
   471 503A A9 19		                LDA     #25
   472 503C					CMP.CS	LINE_CNT CB_PRINT_CONT		; reached one screen page? Branch if not, just exit
Macro: CMP.CS [Source: macros.inc]
     1 503C CD 14 18				CMP	LINE_CNT			; 
     2 503F B0 0E				BCS	CB_PRINT_CONT			; branch if C=1 (A-b1 >= 0)
Source: boot_sys_sh.asm
   473 5041 A9 00 8D 14 18	                MVA     #$00 LINE_CNT       		; reset line counter
   474 5046 20 E1 53		                JSR     SH_PAUSE            		; wait for key press
   475 5049			                CMP.NE	#27 CB_PRINT_CONT   		; ESC pressed? Branch if not
Macro: CMP.NE [Source: macros.inc]
     1 5049 C9 1B				CMP	#27
     2 504B D0 02				BNE	CB_PRINT_CONT
Source: boot_sys_sh.asm
   476 504D 38			                SEC                         		; break dir loop
   477 504E 60			                RTS
   478 504F 18			CB_PRINT_CONT   CLC                         		; get next next entry
   479 5050 60			CB_PRINT_END    RTS
   480
   481 				; **** Compare File Name With Mask Using Wildcards *****************************
   482 				;
   483 				; ******************************************************************************
   484 5051			SH_COMP_MASK    CMP.EQ	#PATH_SEP COMP_NAME_EQU			; Termination char = path separator? Branch if it is, skip compare
Macro: CMP.EQ [Source: macros.inc]
     1 5051 C9 5C				CMP	#PATH_SEP
     2 5053 F0 10				BEQ	COMP_NAME_EQU
Source: boot_sys_sh.asm
   485 5055 A0 0A		                LDY     #10                 			; compare all characters
   486 5057 B9 42 4C		COMP_NAME_CHAR  LDA     FILENAME,Y          			; get char from compare mask
   487 505A					CMP.EQ	#'?' SKIP_NAME_CHAR			; Skip comparing with a '?' char
Macro: CMP.EQ [Source: macros.inc]
     1 505A C9 3F				CMP	#'?'
     2 505C F0 04				BEQ	SKIP_NAME_CHAR
Source: boot_sys_sh.asm
   488 505E					CMP.NE	(CURR_DIR_ENTRY),Y COMP_NAME_NEQ	; Compare char, if not equal, exit with C=0
Macro: CMP.NE [Source: macros.inc]
     1 505E D1 A8				CMP	(CURR_DIR_ENTRY),Y
     2 5060 D0 05				BNE	COMP_NAME_NEQ
Source: boot_sys_sh.asm
   489 						
   490 5062			SKIP_NAME_CHAR  DEY.PL	COMP_NAME_CHAR      			; more character to compare
Macro: DEY.PL [Source: macros.inc]
     1 5062 88					DEY
     2 5063 10 F2				BPL	COMP_NAME_CHAR
Source: boot_sys_sh.asm
   491 5065 38			COMP_NAME_EQU   SEC                         			; all characters are equal, set Carry = 1
   492 5066 60			                RTS
   493 5067 18			COMP_NAME_NEQ   CLC
   494 5068 60			                RTS
   495
   496 				; ******************************************************************************
   497 				; ******************************************************************************
   498 5069 00 00 00 00		SAVED_ACT_DIR   .byte      $00, $00, $00, $00
   499 506D 00 00 00 00		SAVED_DIR_BLK   .byte      $00, $00, $00, $00
   500 				; + DRIVE
   501 				                
   502 5071 A0 03		SAVE_ACT_DIR    LDY     #$03		   		; Save D_ACTUAL_DIR and CURR_DIR_BLK
   503 5073 B9 04 04 99 69 50	SAVE_DIR_ADDR   MVA	D_ACTUAL_DIR,Y SAVED_ACT_DIR,Y	; SAVED_ACT_DIR = D_ACTUAL_DIR
   504 5079 B9 24 18 99 6D 50 + 		MVA	CURR_DIR_BLK,Y SAVED_DIR_BLK,Y-	; SAVED_DIR_BLK = CURR_DIR_BLK
   505 5080 10 F1		                BPL     SAVE_DIR_ADDR			; branch if not finished
   506 5082 60			                RTS					; return
   507 				                
   508 5083 A0 03		LOAD_ACT_DIR    LDY     #$03
   509 5085 B9 69 50 99 04 04	LOAD_DIR_ADDR   MVA	SAVED_ACT_DIR,Y D_ACTUAL_DIR,Y	; D_ACTUAL_DIR = SAVED_ACTUAL_DIR
   510 508B B9 6D 50 99 24 18 + 		MVA	SAVED_DIR_BLK,Y CURR_DIR_BLK,Y-	; CURR_DIR_BLK = SAVED_DIR_BLK
   511 5092 10 F1		                BPL     LOAD_DIR_ADDR			; branch if not finished
   512 5094 60			                RTS					; return
   513 				                
   514 				; **** Get Parameters from Command Line ****************************************
   515 				; Input:  Ptr[X:Y] to Parameter String
   516 				; Output: C = 0 - Error; C = 1 - No Error
   517 				; ******************************************************************************
   518 5095 20 02 51		SH_GET_PARMS    JSR     SET_PARM_MASK	    ; set pointer to parameter mask
   519 5098 A9 00		                LDA     #$00                ; set current command parameter value to 0
   520 509A 8D 1F 18		GET_PARM        STA     CURR_CMD_PARAM
   521 509D A0 01 84 AA		GET_PARM2       MVY     #$01 MASK           ; reset bit mask to 00000001
   522 50A1 88			                DEY                         ; param mask pointer is set to 0
   523 50A2 20 BD 4F		                JSR     GET_NEXT_PARAM      ; find next command parameter in command line
   524 50A5 F0 3B		                BEQ     GET_PARMS_END       ; reached end of command line
   525 50A7 B0 06		                BCS     PARSE_PARM          ; C=1: parameter found? branch if parameter
   526 						
   527 50A9 20 E4 50		                JSR     SH_GET_PATH         ; no, parse path parameter
   528 50AC B0 EF		                BCS     GET_PARM2           ; more parameters
   529
   530 50AE 60			                RTS			    ; return
   531 						
   532 50AF 20 0A 4D		PARSE_PARM      JSR     UPPERCASE	    ; convert to uppercase
   533 50B2 8D 12 18		                STA     F_ATTRIBS           ; no, save current parameter as F_ATTRIBS
   534 50B5 B1 E8		COMP_PARM       LDA     (STOL),Y            ; load a char from param mask (STOL = Ptr to param mask)
   535 50B7			                CMP.EQ	#SPC PARM_ERR	    ; is it a ' '? Branch if all allowed param chars are compared -> unknown param
Macro: CMP.EQ [Source: macros.inc]
     1 50B7 C9 20				CMP	#SPC
     2 50B9 F0 12				BEQ	PARM_ERR
Source: boot_sys_sh.asm
   536 50BB					CMP.NE  F_ATTRIBS NEXT_MASK ; Compare actual parameter char with param mask. Branch if not equal, get next char from param mask
Macro: CMP.NE [Source: macros.inc]
     1 50BB CD 12 18				CMP	F_ATTRIBS
     2 50BE D0 08				BNE	NEXT_MASK
Source: boot_sys_sh.asm
   537 50C0 A5 AA		                LDA     MASK                ; load bit mask
   538 50C2 0D 1F 18		                ORA     CURR_CMD_PARAM      ; and set actual parameter bit
   539 50C5 4C 9A 50		                JMP     GET_PARM            ; get next parameter from command line
   540
   541 50C8 C8			NEXT_MASK       INY                         ; point to next char in param mask
   542 50C9 06 AA		                ASL     MASK                ; shift bit mask to next position
   543 50CB D0 E8		                BNE     COMP_PARM	    ; branch if more to do
   544
   545 50CD 20 5A E0		PARM_ERR        JSR     CROUT		    ; print CR
   546 50D0			                LDXYI   MSG_PARAM_ERR       ; load error message
Macro: LDXYI [Source: macros.inc]
     1 50D0 A2 85			LDX	<MSG_PARAM_ERR				; MADS makes this immediate
     2 50D2 A0 59			LDY	>MSG_PARAM_ERR
Source: boot_sys_sh.asm
   547 50D4 20 71 4A		                JSR     OS_PRINT_ERR        ; and print it
   548 50D7 AD 12 18		                LDA     F_ATTRIBS
   549 50DA 20 52 E0		                JSR     COUT                ; print unknown parameter char
   550 50DD 20 5A E0		                JSR     CROUT		    ; print CR
   551 50E0 18			                CLC			    ; C=0: error
   552 50E1 60			                RTS
   553 50E2 38			GET_PARMS_END   SEC			    ; C=1: OK
   554 50E3 60			                RTS
   555 				                
   556 				; ******************************************************************************
   557 50E4 A6 AC		SH_GET_PATH     LDX     NCNT                ; get pointer path string into X:Y
   558 50E6 A0 14		                LDY     #> STRBUF
   559 50E8 20 76 4A		                JSR     OS_PARSE_PATH
   560 50EB B0 14		                BCS     GET_PATH_END
   561 50ED D0 03		SH_ERROR        BNE     PARSE_ERR1
   562
   563 50EF 4C A9 57		                JMP     SH_NAME_ERR
   564
   565 50F2			PARSE_ERR1      CMP.NE  #PATH_SEP PARSE_ERR2
Macro: CMP.NE [Source: macros.inc]
     1 50F2 C9 5C				CMP	#PATH_SEP
     2 50F4 D0 03				BNE	PARSE_ERR2
Source: boot_sys_sh.asm
   566 50F6 4C A2 57		                JMP     SH_DIR_ERR
   567
   568 50F9			PARSE_ERR2      CMP.NE  #$FF GET_PATH_ERR
Macro: CMP.NE [Source: macros.inc]
     1 50F9 C9 FF				CMP	#$FF
     2 50FB D0 03				BNE	GET_PATH_ERR
Source: boot_sys_sh.asm
   569 50FD 4C 9B 57		                JMP     SH_PATH_ERR
   570 5100 18			GET_PATH_ERR    CLC
   571 5101 60			GET_PATH_END    RTS
   572
   573 				; **** Set Pointer To Parameter Mask *******************************************
   574 				; Input: Ptr[X:Y] = Pointer to Parameter Mask
   575 				; ******************************************************************************
   576 5102			SET_PARM_MASK   STXY	STOL			; save pointer to command param mask
Macro: STXY [Source: macros.inc]
     1 5102 86 E8			STX	STOL
     2 5104 84 E9			STY	STOL+1
Source: boot_sys_sh.asm
   577 5106 A9 00 8D 1F 18			MVA	#0 CURR_CMD_PARAM	; set current command parameter value to 0
   578 510B A9 5C 8D 11 18			MVA	#PATH_SEP TERM_CHAR	; TERM_CHAR = PATH_SEP
   579 5110 60			                RTS
   580
   581 				; Allowed Directory Options ****************************************************
   582 5111 50 41 48 43 20	DIR_PARMS       .by    'PAHC '               	; param mask for DIR command
   583 5116 20			NO_PARMS        .by    ' '
   584
   585 				; **** DIR Command *************************************************************
   586 				; Prints a directory. The following optional parameters can be used:
   587 				; /P : 
   588 				; /A : Show attributes
   589 				; /H : Show hidden files
   590 				; /C : Show cluster number and LBA number
   591 				; ******************************************************************************
   592 5117 20 5A E0		SH_DIR          JSR     CROUT			; print CR
   593 511A 20 71 50		                JSR     SAVE_ACT_DIR        	; save actual-dir cluster nr
   594 511D			                LDXYI   DIR_PARMS
Macro: LDXYI [Source: macros.inc]
     1 511D A2 11			LDX	<DIR_PARMS				; MADS makes this immediate
     2 511F A0 51			LDY	>DIR_PARMS
Source: boot_sys_sh.asm
   595 5121 20 95 50		                JSR     SH_GET_PARMS		; Get parameters from command-line
   596 5124 B0 03		                BCS     SH_DIR_START		; branch if parameter found
   597
   598 5126 4C 83 50		                JMP     LOAD_ACT_DIR        	; restore actual directory LBA
   599
   600 5129 A2 00		SH_DIR_START    LDX     #$00
   601 512B 8A			                TXA
   602 512C 8D 14 18		                STA     LINE_CNT            	; reset line counter
   603 512F 85 EE		                STA     PSAV                	; reset file found flag
   604 5131 9D 15 18 E8		CLEAR_CNT       STA     CURR_FILE_CNT,X+     	; clear file count, dir count and byte count
   605 5135			                CPX.NE  #$08 CLEAR_CNT		; branch if not 8 bytes cleared yet
Macro: CPX.NE [Source: macros.inc]
     1 5135 E0 08				CPX	#$08
     2 5137 D0 F8				BNE	CLEAR_CNT
Source: boot_sys_sh.asm
   606 5139			                LDXYI   CB_PRINT_DIR  		; print call-back routine
Macro: LDXYI [Source: macros.inc]
     1 5139 A2 E7			LDX	<CB_PRINT_DIR				; MADS makes this immediate
     2 513B A0 4F			LDY	>CB_PRINT_DIR
Source: boot_sys_sh.asm
   607 513D 20 07 49		                JSR     OS_FIND_ALL         	; find and print directory entries
   608 5140 20 83 50		                JSR     LOAD_ACT_DIR        	; restore actual directory LBA
   609 5143			                LDA.NE  PSAV PRINT_RESULT      	; Branch if any files found, print dir. result
Macro: LDA.NE [Source: macros.inc]
     1 5143 A5 EE				LDA	PSAV
     2 5145 D0 03				BNE	PRINT_RESULT
Source: boot_sys_sh.asm
   610 5147 4C 94 57		                JMP     SH_FILE_ERR         	; no, print error
   611
   612 514A 20 5A E0		PRINT_RESULT    JSR     CROUT			; Print CR
   613 514D EE 14 18 EE 14 18	        :2      INC     LINE_CNT		; LINE_CNT += 2
   614 5153 20 37 50		                JSR     CHK_LINE_COUNT		; if LINE_CNT > 25 then SH_PAUSE
   615 				                
   616 				; Print Total File Count
   617 5156			                LDXY	CURR_FILE_CNT		; [X,Y] = Current nr of files
Macro: LDXY [Source: macros.inc]
     1 5156 AE 15 18			LDX	CURR_FILE_CNT
     2 5159 AC 16 18			LDY	CURR_FILE_CNT+1
Source: boot_sys_sh.asm
   618 515C 20 E9 4E		                JSR     PRINT_INT16		; print as word
   619 515F			                PRSTR   MSG_FILE_COUNT		; print 'file(s) '
Macro: PRSTR [Source: macros.inc]
     1 515F A2 36			LDX	<MSG_FILE_COUNT				; MADS makes this immediate
     2 5161 A0 59			LDY	>MSG_FILE_COUNT
Source: boot_sys_sh.asm
     2 5163 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   620
   621 				; Print Total Used Bytes In Directory
   622 5166			                LDXYI   CURR_USED_SIZE		; Total filesize
Macro: LDXYI [Source: macros.inc]
     1 5166 A2 19			LDX	<CURR_USED_SIZE				; MADS makes this immediate
     2 5168 A0 18			LDY	>CURR_USED_SIZE
Source: boot_sys_sh.asm
   623 516A 20 66 41		                JSR     LOAD_32			; NUM32 = total filesize
   624 516D 20 EF 4E		                JSR     PRINT_INT32		; print as int32
   625 5170			                PRSTR   MSG_BYTE_USED		; print ' bytes'
Macro: PRSTR [Source: macros.inc]
     1 5170 A2 4C			LDX	<MSG_BYTE_USED				; MADS makes this immediate
     2 5172 A0 59			LDY	>MSG_BYTE_USED
Source: boot_sys_sh.asm
     2 5174 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   626
   627 				; Print Total Directory Count
   628 5177					LDXY	CURR_DIR_CNT		; nr of directories
Macro: LDXY [Source: macros.inc]
     1 5177 AE 17 18			LDX	CURR_DIR_CNT
     2 517A AC 18 18			LDY	CURR_DIR_CNT+1
Source: boot_sys_sh.asm
   629 517D 20 E9 4E		                JSR     PRINT_INT16		; Print as word
   630 5180			                PRSTR   MSG_DIR_COUNT		; print ' dir(s)'
Macro: PRSTR [Source: macros.inc]
     1 5180 A2 41			LDX	<MSG_DIR_COUNT				; MADS makes this immediate
     2 5182 A0 59			LDY	>MSG_DIR_COUNT
Source: boot_sys_sh.asm
     2 5184 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   631 5187					MVAX	4 FREE_KB NUM32		; NUM32 = #Free KB
Macro: MVAX [Source: macros.inc]
     1 5187 A2 03			LDX	#4-1
     2 5189 BD 6D 58 95 C0 CA	lp	MVA	FREE_KB,X NUM32,X-
     3 518F 10 F8			BPL	lp
Source: boot_sys_sh.asm
   632 5191 20 EF 4E				JSR	PRINT_INT32		; Print as decimal number
   633 5194					PRSTR	TXT_KB			; Print ' KB free'
Macro: PRSTR [Source: macros.inc]
     1 5194 A2 86			LDX	<TXT_KB				; MADS makes this immediate
     2 5196 A0 58			LDY	>TXT_KB
Source: boot_sys_sh.asm
     2 5198 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   634 519B 60					RTS				; return
   635 						
   636 				; **** Create Directory (MKDIR) Command ****************************************
   637 				;
   638 				; ******************************************************************************
   639 519C 20 71 50		SH_MKDIR        JSR     SAVE_ACT_DIR        	; save actual directory LBA
   640 519F			                LDXYI   NO_PARMS          	; we don't need parameters, evtl. /H hidden /S system
Macro: LDXYI [Source: macros.inc]
     1 519F A2 16			LDX	<NO_PARMS				; MADS makes this immediate
     2 51A1 A0 51			LDY	>NO_PARMS
Source: boot_sys_sh.asm
   641 51A3 20 95 50		                JSR     SH_GET_PARMS        	; get path
   642 51A6 90 13		                BCC     SH_MKDIR_END	    	; branch if no dirname was given
   643
   644 51A8 A9 10		                LDA     #FA_DIRECTORY		; create directory
   645 51AA 20 CE 47		                JSR     OS_CREATE           	; create directory
   646 51AD B0 0C		                BCS     SH_MKDIR_END        	; if no errors, clean up and exit
   647
   648 51AF			MKDIR_ERR       CMP.EQ  #$FF DIR_EXISTS_ERR    	; if error code = -1 then dir already exists
Macro: CMP.EQ [Source: macros.inc]
     1 51AF C9 FF				CMP	#$FF
     2 51B1 F0 05				BEQ	DIR_EXISTS_ERR
Source: boot_sys_sh.asm
   649
   650 51B3 20 B7 57		                JSR     SH_WRITE_ERR        	; it was a write error
   651 51B6 90 03		                BCC     SH_MKDIR_END        	; branch always
   652
   653 51B8 20 B0 57		DIR_EXISTS_ERR  JSR     SH_D_EXIST_ERR		; Print 'Dir already exists'
   654 51BB 4C 83 50		SH_MKDIR_END    JMP     LOAD_ACT_DIR        	; restore actual directory LBA and return
   655
   656 				; **** Check if Current Dir. ***************************************************
   657 				; Check if directory entered is current dir (..).
   658 				; Output: C=0: not a current dir, C=1: is current dir.
   659 				; ******************************************************************************
   660 51BE A0 00		IS_FNAME_CURDIR	LDY	#0
   661 51C0 B9 42 4C				LDA	FILENAME,Y
   662 51C3					CMP.NE	#'.' NOT_FNAME
Macro: CMP.NE [Source: macros.inc]
     1 51C3 C9 2E				CMP	#'.'
     2 51C5 D0 21				BNE	NOT_FNAME
Source: boot_sys_sh.asm
   663 51C7 C8					INY
   664 51C8					LDA.NE	FILENAME,Y NOT_FNAME	; Load filename char, branch if not a current dir (.)
Macro: LDA.NE [Source: macros.inc]
     1 51C8 B9 42 4C				LDA	FILENAME,Y
     2 51CB D0 1B				BNE	NOT_FNAME
Source: boot_sys_sh.asm
   665 51CD F0 17				BEQ	IS_FNAME		; branch always if it is a current dir (.)
   666
   667 				; **** Check if Parent Dir. ************************************************
   668 				; Check if current directory is parent dir (..).
   669 				; Output: C=0: not a parent dir, C=1: is parent dir.
   670 				; ******************************************************************************
   671 51CF A0 00		IS_FNAME_PARENT	LDY	#0
   672 51D1 B9 42 4C				LDA	FILENAME,Y
   673 51D4					CMP.NE	#'.' NOT_FNAME
Macro: CMP.NE [Source: macros.inc]
     1 51D4 C9 2E				CMP	#'.'
     2 51D6 D0 10				BNE	NOT_FNAME
Source: boot_sys_sh.asm
   674 51D8 C8					INY
   675 51D9 B9 42 4C				LDA	FILENAME,Y
   676 51DC					CMP.NE	#'.' NOT_FNAME
Macro: CMP.NE [Source: macros.inc]
     1 51DC C9 2E				CMP	#'.'
     2 51DE D0 08				BNE	NOT_FNAME
Source: boot_sys_sh.asm
   677 51E0 C8					INY
   678 51E1					LDA.NE	FILENAME,Y NOT_FNAME	; get filename char, branch if not end-of-string
Macro: LDA.NE [Source: macros.inc]
     1 51E1 B9 42 4C				LDA	FILENAME,Y
     2 51E4 D0 02				BNE	NOT_FNAME
Source: boot_sys_sh.asm
   679
   680 51E6 38			IS_FNAME	SEC				; C=1: is parent (..) directory
   681 51E7 60					RTS
   682 51E8 18			NOT_FNAME	CLC				; The filename is not . or ..
   683 51E9 60					RTS
   684 						
   685 				; **** Convert filename to FN83 type filename **********************************
   686 				; INPUT: ssptr_l/ssptr_h pointer to filename
   687 				; OUTPUT: converted filename in FN83
   688 				; ******************************************************************************
   689 51EA A0 00		FNAME2FN83	LDY	#0
   690 51EC B1 78		CPFN83_1	LDA	(ssptr_l),Y		; BASIC pointer to filename
   691 51EE					CMP.EQ	#'.' FN83_DOTFND	; branch if a dot is found
Macro: CMP.EQ [Source: macros.inc]
     1 51EE C9 2E				CMP	#'.'
     2 51F0 F0 07				BEQ	FN83_DOTFND
Source: boot_sys_sh.asm
   692 						
   693 51F2 C8			CPFNCNT		INY
   694 51F3					CPY.NE	#D_ATTRIBUTES CPFN83_1	; branch if not at end-of-filename yet
Macro: CPY.NE [Source: macros.inc]
     1 51F3 C0 0B				CPY	#D_ATTRIBUTES
     2 51F5 D0 F5				BNE	CPFN83_1
Source: boot_sys_sh.asm
   695 51F7 F0 18				BEQ	EXT_DN			; branch always if no dot was found
   696
   697 51F9			FN83_DOTFND	; Found a dot
   698 51F9 A2 08				LDX	#8
   699 51FB C8					INY				; points to char next to '.'
   700 51FC B1 78		CPFN83_2	LDA	(ssptr_l),Y		; Get char of extension
   701 51FE 20 0A 4D				JSR	UPPERCASE		; Convert to upper-case (only affects A)
   702 5201					STA.EQ	FILENAME,X EXT_DN	; Store in extension, branch if '\0' (done)
Macro: STA.EQ [Source: macros.inc]
     1 5201 9D 42 4C				STA	FILENAME,X
     2 5204 F0 0B				BEQ	EXT_DN
Source: boot_sys_sh.asm
   703 5206 C8					INY
   704 5207 E8					INX
   705 5208					CPX.NE	#D_ATTRIBUTES CPFN83_2	; branch if not done with extension
Macro: CPX.NE [Source: macros.inc]
     1 5208 E0 0B				CPX	#D_ATTRIBUTES
     2 520A D0 F0				BNE	CPFN83_2
Source: boot_sys_sh.asm
   706 						
   707 520C A9 00 9D 42 4C			MVA	#0 FILENAME,X		; Add '\0' to filename
   708 5211 A0 00		EXT_DN		LDY	#0
   709 5213 B1 78		CPFN83_3	LDA	(ssptr_l),Y		; Get char of Filename
   710 5215 20 0A 4D				JSR	UPPERCASE		; Convert to upper-case (only affects A)
   711 5218 99 42 4C				STA	FILENAME,Y		; Store in result
   712 521B					CMP.EQ	#'.' CPFN83_4		; branch if filename copied
Macro: CMP.EQ [Source: macros.inc]
     1 521B C9 2E				CMP	#'.'
     2 521D F0 06				BEQ	CPFN83_4
Source: boot_sys_sh.asm
   713 521F C8					INY
   714 5220					CPY.NE	#8 CPFN83_3		; branch if not all chars copied
Macro: CPY.NE [Source: macros.inc]
     1 5220 C0 08				CPY	#8
     2 5222 D0 EF				BNE	CPFN83_3
Source: boot_sys_sh.asm
   715 5224 60					RTS				; return
   716 						
   717 5225 A9 20 99 42 4C C8	CPFN83_4	MVA	#' ' FILENAME,Y+	; fill remainder with spaces
   718 522B					CPY.NE	#8   CPFN83_4		; branch if not all chars copied
Macro: CPY.NE [Source: macros.inc]
     1 522B C0 08				CPY	#8
     2 522D D0 F6				BNE	CPFN83_4
Source: boot_sys_sh.asm
   719 522F 60			CPFN_DN		RTS				; return
   720 						
   721 				; **** Add subdir name to D_SUBDIR_NAME ****************************************
   722 				; Check if directory entered is current dir (..).
   723 				; Output: C=0: not a current dir, C=1: is current dir.
   724 				; ******************************************************************************
   725 5230 A0 00		ADD_SUBDIR_NAME	LDY	#0
   726 5232			FIND_EOS	LDA.EQ	D_SUBDIR_NAME,Y SUBDIR_EOS	; get char of subdir name, branch if end-of-string
Macro: LDA.EQ [Source: macros.inc]
     1 5232 B9 20 04				LDA	D_SUBDIR_NAME,Y
     2 5235 F0 04				BEQ	SUBDIR_EOS
Source: boot_sys_sh.asm
   727 5237 C8					INY
   728 5238 D0 F8				BNE	FIND_EOS			; branch always
   729 523A 60					RTS
   730
   731 523B			SUBDIR_EOS	CPY.EQ	#1 CP_INIT			; branch if root-dir
Macro: CPY.EQ [Source: macros.inc]
     1 523B C0 01				CPY	#1
     2 523D F0 06				BEQ	CP_INIT
Source: boot_sys_sh.asm
   732 523F A9 5C 99 20 04			MVA	#BSLASH D_SUBDIR_NAME,Y		; add '\' to subdir name
   733 5244 C8					INY
   734 5245 A2 00		CP_INIT		LDX	#0
   735 5247 BD 42 4C 99 20 04	CP_FNAME	MVA	FILENAME,X D_SUBDIR_NAME,Y
   736 524D F0 06				BEQ	SUBDIR_X			; exit if $00 found
   737 						
   738 524F C8					INY					; index in D_SUBDIR_NAME
   739 5250 E8					INX					; index in FILENAME
   740 5251					CPX.NE	#D_ATTRIBUTES CP_FNAME		; branch if not at max filename yet
Macro: CPX.NE [Source: macros.inc]
     1 5251 E0 0B				CPX	#D_ATTRIBUTES
     2 5253 D0 F2				BNE	CP_FNAME
Source: boot_sys_sh.asm
   741 5255 60			SUBDIR_X	RTS					; return if done
   742 						
   743 				; **** Del subdir name from D_SUBDIR_NAME **************************************
   744 				; ******************************************************************************
   745 5256 A0 00		DEL_SUBDIR_NAME	LDY	#0
   746 5258			FIND_EOS2	LDA.EQ	D_SUBDIR_NAME,Y SUBDIR_LP1	; get char of subdir name, branch if end-of-string
Macro: LDA.EQ [Source: macros.inc]
     1 5258 B9 20 04				LDA	D_SUBDIR_NAME,Y
     2 525B F0 04				BEQ	SUBDIR_LP1
Source: boot_sys_sh.asm
   747 525D C8					INY
   748 525E D0 F8				BNE	FIND_EOS2			; branch always
   749 5260 60			DEL_SUBDIR_X	RTS
   750
   751 5261 B9 20 04		SUBDIR_LP1	LDA	D_SUBDIR_NAME,Y			; get char from D_SUBDIR_NAME
   752 5264					CMP.EQ	#BSLASH BSLASH_FND		; branch if filename separator found
Macro: CMP.EQ [Source: macros.inc]
     1 5264 C9 5C				CMP	#BSLASH
     2 5266 F0 04				BEQ	BSLASH_FND
Source: boot_sys_sh.asm
   753 5268					DEY.NE	SUBDIR_LP1			; branch always
Macro: DEY.NE [Source: macros.inc]
     1 5268 88					DEY
     2 5269 D0 F6				BNE	SUBDIR_LP1
Source: boot_sys_sh.asm
   754 526B C8					INY					; Y = 0->1, leave '\' for root-dir
   755 526C A9 00 99 20 04	BSLASH_FND	MVA	#0 D_SUBDIR_NAME,Y		; Replace '\' with \0 for subdirs in D_SUBDIR_NAME
   756 5271 60			DSNM_X		RTS					; and return
   757
   758 				; **** Change Directory Command ************************************************
   759 				;
   760 				; ******************************************************************************
   761 5272 20 71 50		SH_CD           JSR     SAVE_ACT_DIR        	; save actual directory LBA
   762 5275			                LDXYI   NO_PARMS
Macro: LDXYI [Source: macros.inc]
     1 5275 A2 16			LDX	<NO_PARMS				; MADS makes this immediate
     2 5277 A0 51			LDY	>NO_PARMS
Source: boot_sys_sh.asm
   763 5279 20 95 50		                JSR     SH_GET_PARMS		; get subdir name
   764 527C 90 26		                BCC     SH_CD_END		; C=0: no name entered
   765
   766 527E			                LDA.NE  TERM_CHAR SH_CD_END	; branch if termination char > 0
Macro: LDA.NE [Source: macros.inc]
     1 527E AD 11 18				LDA	TERM_CHAR
     2 5281 D0 21				BNE	SH_CD_END
Source: boot_sys_sh.asm
   767 5283 20 FD 48		                JSR     OS_FIND_PATH		; loop through dir to find path
   768 5286 90 28		                BCC     SH_CD_ERR		; branch if subdir name was not found
   769 						
   770 5288 A0 00				LDY	#0			; add '\0' to string
   771 528A B9 42 4C		TERM_FNAME_LP	LDA	FILENAME,Y		; find end-of-string first
   772 528D					CMP.EQ	#' ' TERM_FNAME		; branch if a space found
Macro: CMP.EQ [Source: macros.inc]
     1 528D C9 20				CMP	#' '
     2 528F F0 05				BEQ	TERM_FNAME
Source: boot_sys_sh.asm
   773 5291 C8					INY
   774 5292					CPY.NE	#D_ATTRIBUTES TERM_FNAME_LP	; branch if not at max. len of filename
Macro: CPY.NE [Source: macros.inc]
     1 5292 C0 0B				CPY	#D_ATTRIBUTES
     2 5294 D0 F4				BNE	TERM_FNAME_LP
Source: boot_sys_sh.asm
   775 						
   776 5296 A9 00 99 42 4C	TERM_FNAME	MVA	#$00 FILENAME,Y		; terminate string with \0
   777 529B 20 CF 51				JSR	IS_FNAME_PARENT		; is dir .. ?
   778 529E 90 05				BCC	TST_CURDIR		; branch if not . or .. entered
   779 						
   780 52A0 20 56 52				JSR	DEL_SUBDIR_NAME		; remove last subdir from D_SUBDIR_NAME
   781 52A3 38			SH_CD_EXIT_OK	SEC				; C=1: OK
   782 52A4 60			SH_CD_END	RTS
   783
   784 52A5 20 BE 51		TST_CURDIR	JSR	IS_FNAME_CURDIR		; is dir . ?
   785 52A8 B0 F9				BCS	SH_CD_EXIT_OK		; branch if dir is . (current dir)
   786 						
   787 52AA 20 30 52				JSR	ADD_SUBDIR_NAME		; Normal subdir name, add to D_SUBDIR_NAME
   788 52AD 4C A3 52				JMP	SH_CD_EXIT_OK		; branch always
   789 						
   790 52B0 20 83 50		SH_CD_ERR       JSR     LOAD_ACT_DIR        	; error - restore actual directory LBA
   791 52B3 20 5A E0		                JSR     CROUT			; print CR
   792 52B6 4C 9B 57		                JMP     SH_PATH_ERR		; Print 'Path not found'
   793
   794 				; **** Release the FAT clusters for a file  ************************************
   795 				; Algorithm:
   796 				;       SCNT = 1;
   797 				; loop: CURR_CLUSTER = FAT[CURR_CLUSTER];
   798 				;       FAT[CURR_CLUSTER] = 0L; // 0L = free entry
   799 				;       if (CURR_CLUSTER == 0FFFFFFF) SCNT++; goto loop;
   800 				; ******************************************************************************
   801 52B9 A2 00 8E 90 58	CLR_FAT32_FILE 	MVX 	#0 SIS_CNT			; #clusters cleared
   802 52BE			CLR_FAT32_LP1	LDXYI   D_START_FAT1      		; load base block address of FAT into NUM32[0:3]
Macro: LDXYI [Source: macros.inc]
     1 52BE A2 14			LDX	<D_START_FAT1				; MADS makes this immediate
     2 52C0 A0 04			LDY	>D_START_FAT1
Source: boot_sys_sh.asm
   803 52C2 20 66 41		                JSR     LOAD_32		    		; NUM32 = LBA nr. of FAT
   804 52C5					LDXYI	(CURR_CLUSTER+1)			; SUM32 = CURR_CLUSTER into SUM32
Macro: LDXYI [Source: macros.inc]
     1 52C5 A2 A1			LDX	<(CURR_CLUSTER+1)				; MADS makes this immediate
     2 52C7 A0 00			LDY	>(CURR_CLUSTER+1)
Source: boot_sys_sh.asm
   805 52C9 20 60 41				JSR     LOAD_S32            		; load CURR_CLUSTER[1:3] into SUM[0:2] = FAT block index
   806 52CC 20 2E 53				JSR	PRTST1				; DEBUG
   807 52CF A2 00 86 C7				MVX	#$00 SUM32+3			; clear garbage byte SUM[3]: SUM32 = CURR_CLUSTER / 256
   808 52D3 A0 03		                LDY     #$03
   809 52D5 A5 A0		                LDA     CURR_CLUSTER        		; load CURR_CLUSTER[0] = FAT entry index byte
   810 52D7 0A			                ASL                         		; shift bit 7 into carry flag and multiply entry index by 2
   811 52D8 48			                PHA                         		; save entry index to stack
   812 52D9 36 C4 E8		CLR32_LP        ROL     SUM32,X+             		; shift bit 7 of entry index into bit 0 of block index
   813 52DC			                DEY.NE  CLR32_LP	    		; branch if not done yet
Macro: DEY.NE [Source: macros.inc]
     1 52DC 88					DEY
     2 52DD D0 FA				BNE	CLR32_LP
Source: boot_sys_sh.asm
   814 						
   815 						; A FAT entry is 4 bytes and there are 128 FAT entries in one FAT-sector
   816 52DF 20 94 41		                JSR     ADD_32_32	    		; NUM32 = START_FAT1 + CURR_CLUSTER / 128
   817 52E2 20 22 41		                JSR     LOAD_FAT_BLK	    		; Load FAT sector into standard buffer ($600)
   818 52E5 68			                PLA                         		; restore entry index
   819 52E6 A2 04		                LDX     #$04                		; four bytes to read for a FAT32 entry
   820 52E8 0A			                ASL                         		; multiply entry index by 2 (4 in total now)
   821 52E9 A8			                TAY                         		; store entry index into Y
   822 52EA 20 91 E0				JSR	HEXOUT				; DEBUG
   823 52ED A2 04 86 AC		                MVX	#4 NCNT				; 1 FAT entry = 4 bytes
   824 52F1 A2 00				LDX	#0				; init. CURR_CLUSTER index
   825 52F3 20 EF 40		LP_FAT_ENTRY    JSR     READ_ENTRY_BYTE     		; read entry byte
   826 52F6 9D 2A 53				STA     TEMP_CLUSTER,X      		; store byte in TEMP_CLUSTER to follow link
   827 52F9 20 4D 53				JSR	WR_ENTRY_BYTE			; FAT[CURR_CLUSTER] = 0
   828 52FC C8					INY					; Increment FAT index counter
   829 52FD E8			                INX					; Increment CURR_CLUSTER counter
   830 52FE			                DEC.NE  NCNT LP_FAT_ENTRY   		; loop until all bytes copied
Macro: DEC.NE [Source: macros.inc]
     1 52FE C6 AC				DEC	NCNT
     2 5300 D0 F1				BNE	LP_FAT_ENTRY
Source: boot_sys_sh.asm
   831 5302					MVAX	4 TEMP_CLUSTER CURR_CLUSTER	; CURR_CLUSTER = TEMP_CLUSTER
Macro: MVAX [Source: macros.inc]
     1 5302 A2 03			LDX	#4-1
     2 5304 BD 2A 53 95 A0 CA	lp	MVA	TEMP_CLUSTER,X CURR_CLUSTER,X-
     3 530A 10 F8			BPL	lp
Source: boot_sys_sh.asm
   832 530C EE 90 58				INC	SIS_CNT				; #clusters cleared + 1
   833 530F A9 0F C5 A3 D0 10 + 		CPD	#$0FFFFFFF CURR_CLUSTER		; CURR_CLUSTER == $0FFFFFFF ?
   834 5325 D0 97				BNE	CLR_FAT32_LP1			; branch if file has more clusters to clear
   835 						
   836 5327 4C 07 43				JMP	OS_SAVE_FAT			; Write updated FAT buffer back to disk and return
   837
   838 532A 00 00 00 00		TEMP_CLUSTER	.dword	$00000000
   839 						
   840 532E			PRTST1		PRCH	'<'
Macro: PRCH [Source: macros.inc]
     1 532E A9 3C			LDA	#'<'
     2 5330 20 52 E0			JSR	COUT
Source: boot_sys_sh.asm
   841 5333					PRHEX32	CURR_CLUSTER
Macro: PRHEX32 [Source: macros.inc]
     1 5333 A5 A3			LDA	CURR_CLUSTER+2+1				; print MSB
     2 5335 20 91 E0			JSR	HEXOUT
     3 5338 A5 A2			LDA	CURR_CLUSTER+2
     4 533A 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_sh.asm
     1 533D A5 A1			LDA	CURR_CLUSTER+1				; print MSB
     2 533F 20 91 E0			JSR	HEXOUT
     3 5342 A5 A0			LDA	CURR_CLUSTER
     4 5344 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_sh.asm
Source: boot_sys_sh.asm
   842 5347					PRCH	'>'
Macro: PRCH [Source: macros.inc]
     1 5347 A9 3E			LDA	#'>'
     2 5349 20 52 E0			JSR	COUT
Source: boot_sys_sh.asm
   843 534C 60					RTS
   844
   845 				; **** Write a Single FAT Entry Byte From Block Buffer *************************
   846 				; INPUT : Y - Index To FAT Entry Byte
   847 				; OUTPUT: A = Read Byte from FAT table
   848 				; ******************************************************************************
   849 534D			WR_ENTRY_BYTE 	AND.NE  #$01 CURR_CLUSTER+1 CLR_UPPER_PAGE	; check bit 0 (= bit 7 of CURR_CLUSTER[0:3] because of ASL in FAT32 routine)
Macro: AND.NE [Source: macros.inc]
     2 534D A9 01				LDA	#$01
     3 534F 25 A1				AND	CURR_CLUSTER+1
     4 5351 D0 06				BNE	CLR_UPPER_PAGE
Source: boot_sys_sh.asm
   850 5353 A9 00 99 00 06	                MVA	#0 FAT_BUF,Y				; write entry byte from lower half of block buffer
   851 5358 60			                RTS			    			; return
   852 5359 A9 00 99 00 07	CLR_UPPER_PAGE  MVA     #0 FAT_BUF+256,Y    			; write entry byte from upper half of block buffer
   853 535E 60			                RTS			    			; return
   854
   855 				; **** Delete Command **********************************************************
   856 				;
   857 				; ******************************************************************************
   858 535F 20 71 50		SH_DEL          JSR     SAVE_ACT_DIR        			; save actual directory LBA
   859 5362			                LDXYI   NO_PARMS          			; we don't need parameters, just the filename
Macro: LDXYI [Source: macros.inc]
     1 5362 A2 16			LDX	<NO_PARMS				; MADS makes this immediate
     2 5364 A0 51			LDY	>NO_PARMS
Source: boot_sys_sh.asm
   860 5366 20 95 50		                JSR     SH_GET_PARMS        			; get path
   861 5369 90 5F		                BCC     SH_DEL_X	    			; branch if no filename was given
   862
   863 536B 20 03 49		                JSR     OS_FIND_FILE				; Now find file to delete
   864 536E 90 5D		                BCC     SH_DEL_ERR				; branch if file not found
   865
   866 						; OS_FIND_FILE did already set CURR_CLUSTER to the file starting-cluster
   867 5370 A0 00		SH_DEL_FILE	LDY	#D_FILENAME
   868 5372 A9 E5 91 A8				MVA	#$E5 (CURR_DIR_ENTRY),Y			; $E5 first char. is a deleted file
   869 5376 A0 14				LDY	#D_START_CLSTH
   870 5378 A9 00 91 A8 C8 91 + 		MWA	#$00 (CURR_DIR_ENTRY),Y			; delete high word of file-size
   871
   872 537F AD 28 18				LDA	DBG_PRINT				; 1 = Print debug info
   873 5382 F0 31				BEQ	SH_DEL_NO_DBG				; branch if no debug
   874
   875 5384					PRSTR	TXT_SH_DEL1
Macro: PRSTR [Source: macros.inc]
     1 5384 A2 D0			LDX	<TXT_SH_DEL1				; MADS makes this immediate
     2 5386 A0 53			LDY	>TXT_SH_DEL1
Source: boot_sys_sh.asm
     2 5388 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   876 538B					PRHEX16	CURR_DIR_BLK
Macro: PRHEX16 [Source: macros.inc]
     1 538B AD 25 18			LDA	CURR_DIR_BLK+1				; print MSB
     2 538E 20 91 E0			JSR	HEXOUT
     3 5391 AD 24 18			LDA	CURR_DIR_BLK
     4 5394 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_sh.asm
   877 5397					PRSTR	TXT_SH_DEL2
Macro: PRSTR [Source: macros.inc]
     1 5397 A2 DA			LDX	<TXT_SH_DEL2				; MADS makes this immediate
     2 5399 A0 53			LDY	>TXT_SH_DEL2
Source: boot_sys_sh.asm
     2 539B 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   878 539E					PRHEX32	CURR_CLUSTER
Macro: PRHEX32 [Source: macros.inc]
     1 539E A5 A3			LDA	CURR_CLUSTER+2+1				; print MSB
     2 53A0 20 91 E0			JSR	HEXOUT
     3 53A3 A5 A2			LDA	CURR_CLUSTER+2
     4 53A5 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_sh.asm
     1 53A8 A5 A1			LDA	CURR_CLUSTER+1				; print MSB
     2 53AA 20 91 E0			JSR	HEXOUT
     3 53AD A5 A0			LDA	CURR_CLUSTER
     4 53AF 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_sh.asm
Source: boot_sys_sh.asm
   879 53B2 20 5A E0				JSR	CROUT
   880 53B5			SH_DEL_NO_DBG	LDXYI	CURR_DIR_BLK				; CURR_DIR_BLK is LBA of current dir block
Macro: LDXYI [Source: macros.inc]
     1 53B5 A2 24			LDX	<CURR_DIR_BLK				; MADS makes this immediate
     2 53B7 A0 18			LDY	>CURR_DIR_BLK
Source: boot_sys_sh.asm
   881 53B9 20 F4 42		                JSR     OS_SAVE_DIR	    			; write this dir entry back to disk
   882 53BC 90 0C				BCC	SH_DEL_X				; Branch on error
   883 						
   884 53BE 20 B9 52		SH_DEL_CONT	JSR	CLR_FAT32_FILE				; Set all FAT entries for this file to 00000000 (free)
   885 53C1 20 3C 46				JSR	INIT_FREE_CLUSTER			; FREE_CLUSTER = 2L
   886 53C4 20 4D 46				JSR     OS_NEXT_FREE_CLUSTER			; Get first free cluster in FREE_CLUSTER
   887
   888 						; Update SIS with #clusters freed and first-free cluster nr
   889 53C7 20 91 58				JSR	SIS_ADD					; Update SIS and write back
   890 53CA 4C 83 50		SH_DEL_X        JMP     LOAD_ACT_DIR        			; error - restore actual directory LBA and return
   891
   892 53CD 4C 94 57		SH_DEL_ERR	JMP	SH_FILE_ERR				; Print 'File not found' and return
   893
   894 53D0 53 48 5F 44 45 4C + TXT_SH_DEL1	.by	'SH_DEL: $' $00
   895 53DA 2C 20 24 00		TXT_SH_DEL2	.by	', $' $00
   896
   897 				; **** Clear Screen Command ****************************************************
   898 				;
   899 				; ******************************************************************************
   900 53DE 4C B5 E0		SH_CLS          JMP     CLRSCRN
   901
   902 				; **** Pause Command ***********************************************************
   903 				; Output: A - pressed key char
   904 				;         C = 0 ESC key pressed, C = 1 else
   905 				; ******************************************************************************
   906 53E1			SH_PAUSE        PRSTR   MSG_PAUSE          	; print pause message
Macro: PRSTR [Source: macros.inc]
     1 53E1 A2 FF			LDX	<MSG_PAUSE				; MADS makes this immediate
     2 53E3 A0 58			LDY	>MSG_PAUSE
Source: boot_sys_sh.asm
     2 53E5 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
   907 53E8 20 47 E0		                JSR     CIN                  	; wait until any key pressed
   908 53EB 48			                PHA
   909 53EC 20 5A E0		                JSR     CROUT
   910 53EF 68			                PLA
   911 53F0 60			                RTS
   912 				                
   913 				; **** Echo Command ************************************************************
   914 				;
   915 				; ******************************************************************************
   916 53F1			SH_ECHO         LDA.EQ  STRBUF,X SH_ECHO_END	; get char, branch if end-of-string
Macro: LDA.EQ [Source: macros.inc]
     1 53F1 BD 00 14				LDA	STRBUF,X
     2 53F4 F0 09				BEQ	SH_ECHO_END
Source: boot_sys_sh.asm
   917 53F6 8A			                TXA
   918 53F7 A8			                TAY
   919 53F8 C8			                INY
   920 53F9 20 85 E0		                JSR     WRSTR
   921 53FC 20 5A E0		                JSR     CROUT
   922 53FF 60			SH_ECHO_END     RTS
   923
   924 				; **** Goto Command ************************************************************
   925 				;
   926 				; ******************************************************************************
   927 5400 60			SH_GOTO         RTS
   928
   929 				; **** If Command **************************************************************
   930 				;
   931 				; ******************************************************************************
   932 5401 20 3C 46		SH_IF           JSR 	INIT_FREE_CLUSTER	; FREE_CLUSTER = 2L
   933 5404 20 4D 46		                JSR 	OS_NEXT_FREE_CLUSTER
   934 5407 A0 03				LDY 	#3
   935 5409			PRINT_CURR_CLST PHY				; save Y
Macro: PHY [Source: macros.inc]
     1 5409 98				TYA
     2 540A 48				PHA
Source: boot_sys_sh.asm
   936 540B B9 20 18				LDA 	FREE_CLUSTER,Y		; 
   937 540E 20 91 E0		                JSR 	HEXOUT			; Print FREE_CLUSTER
   938 5411					PLY				; restore Y
Macro: PLY [Source: macros.inc]
     1 5411 68				PLA
     2 5412 A8				TAY
Source: boot_sys_sh.asm
   939 5413					DEY.PL	PRINT_CURR_CLST		; print if not done yet
Macro: DEY.PL [Source: macros.inc]
     1 5413 88					DEY
     2 5414 10 F3				BPL	PRINT_CURR_CLST
Source: boot_sys_sh.asm
   940 5416 60					RTS
   941
   942 				; **** Rem Command *************************************************************
   943 				;
   944 				; ******************************************************************************
   945 5417			SH_REM          PHW	BLKBUF			; DEBUG: For testing SIS routines
Macro: PHW [Source: macros.inc]
     1 5417 A5 DC			LDA	BLKBUF
     2 5419 48				PHA
     3 541A A5 DD			LDA	BLKBUF+1
     4 541C 48				PHA
Source: boot_sys_sh.asm
   946 541D 20 F1 57				JSR	GET_SIS
   947 5420					PLW	BLKBUF
Macro: PLW [Source: macros.inc]
     1 5420 68				PLA
     2 5421 85 DD			STA	BLKBUF+1
     3 5423 68				PLA
     4 5424 85 DC			STA	BLKBUF
Source: boot_sys_sh.asm
   948 5426 60			SH_REM_X	RTS
   949 				                
   950 				; **** BASIC Command ***********************************************************
   951 				; Executes Basic in ROM. Return with 'DOS' command.
   952 				; ******************************************************************************
   953 5427 20 86 FD		SH_BASIC        JSR	MON2RAM			; Select Monitor RAM, disable ROM
   954 542A 20 0A E0				JSR	SWITCH_TO_ROM		; Enable BASIC ROM
   955 542D 4C 0B 1E				JMP	MON_RAM_BLOCK.BAS_JMP	; Run BAS_JMP_CODE from Monitor RAM area
   956
   957 				; ------------------------------------------------------------------------------
   958 				; This routine copies the MON_RAM_BLOCK code below to the Monitor RAM-area at 
   959 				; $1C00 - $1FFF. The entire boot.sys code (this code!) is stored in RAM-BANK 0
   960 				; (= DOS RAM-BANK) by the boot-loader.
   961 				; Note: MON_RAM_BLOCK code-size should be < 256 bytes!
   962 				; This routine is called by OS_MAIN, the DOS Entry-point.
   963 				; ------------------------------------------------------------------------------
   964 5430 20 86 FD		CP_MON_RAM	JSR	MON2RAM				; Select Monitor RAM, disable ROM
   965 						; Do not use RAMB_DOS here: 1) RAMB_DOS is default when starting boot.sys 2) is not yet copied to Monitor RAM
   966 5433 A9 76 85 E8 A9 54 + 		MWA	#MON_RAM_START STOL		; Start of bytes to copy
   967 543B A9 00 85 CC A9 1E + 		MWA	#MON_RAM_BLOCK.RAMB_DOS END_PTR	; Store in Monitor RAM area
   968 5443 A0 00				LDY	#0
   969 5445 B1 E8		MON_RAM_LP	LDA	(STOL),Y			; Get byte from MON_RAM_BLOCK
   970 5447 91 CC				STA	(END_PTR),Y			; Store in Monitor RAM area
   971 5449 E6 CC D0 02 E6 CD			INW	END_PTR				; END_PTR++
   972 544F E6 E8 D0 02 E6 E9			INW	STOL				; STOL/STOH ++
   973 5455 A5 E9 C9 55 D0 04 + 		CPW	STOL #MON_RAM_END		; End-address reached?
   974 545F 90 E4				BCC	MON_RAM_LP			; Branch if STOL < end-address
   975
   976 						; ----------------------------------------------------------------------------------------------
   977 						; This PATCH does the following:
   978 						; - Copy the address of OWN_RD_LBLK_BUF into the JMP CMDDEV of DEV_RD_LBLK_BUF (replaces CMDDEV)
   979 						; - Copy the address of OWN_RD_LBLK     into the JMP CMDDEV of DEV_RD_LBLK (replaces CMDDEV)
   980 						; This ensures that the first blocks of boot.sys are read in using the BIOS CF routines,
   981 						; but any subsequent read uses the new routines in MON_RAM_BLOCK.
   982 						; A permanent solution would be to replace the BIOS routines with the ones in MON_RAM_BLOCK.
   983 						;
   984 						; NOTE: This is necessary because at boot, only the first block (with DEV_RD_LBLK(_BUF)) is
   985 						;       loaded, but there's not enough space in this first block for the updated routines.
   986 						; ----------------------------------------------------------------------------------------------
   987 5461 A9 66 8D 4E 41 A9 + 		MWA	#MON_RAM_BLOCK.OWN_RD_LBLK_BUF DEV_RD_LBLK_BUF+3
   988 546B A9 69 8D 53 41 A9 + 		MWA	#MON_RAM_BLOCK.OWN_RD_LBLK     DEV_RD_LBLK+3
   989 5475 60					RTS					; Return
   990
   991 5476			MON_RAM_START	; Start of Code-block that should be copied into Monitor RAM.
   992 				;-------------------------------------------------------------------------------------------------------
   993 1E00			MON_RAM_BLOCK	.local, $1E00			; Assemble into Monitor RAM ($1E00-$1FFD)
   994 				; Note that FILE_BUFF is located at $1C00-1DFF (512 bytes)!
   995 				;-------------------------------------------------------------------------------------------------------
   996 1E00 A2 00		RAMB_DOS	LDX	#0			; RAM-BANK 0 is the main RAM-BANK, used by DOS
   997 1E02 F0 02				BEQ	RAMB_JMP		; branch always
   998
   999 1E04 A2 04		RAMB_BAS	LDX	#4			; RAM-BANK 4 is the 1st RAM-BANK
  1000 1E06 20 53 FD		RAMB_JMP	JSR	SET_RAMBANK		; Enable RAM-BANK for BASIC-programs and return
  1001 1E09 EA					NOP
  1002 1E0A 60					RTS
  1003
  1004 				;--------------------------------------------------------------------------------
  1005 				; This function gets copied to Monitor RAM, so that a possible RAM-BANK switch
  1006 				; does not affect the boot.sys code (which is in page 0 of the RAM-BANK area).
  1007 				;--------------------------------------------------------------------------------
  1008 1E0B 20 04 1E		BAS_JMP		JSR	RAMB_BAS		; Enable RAM-BANK for BASIC-programs
  1009 1E0E A5 02				LDA	Wrmjph	    	    	; Is BASIC Warm-start vector already set?
  1010 1E10					CMP.NE	#$B1 SH_BCOLD 	    	; If not in this range, branch and do a BASIC cold start
Macro: CMP.NE [Source: macros.inc]
     1 1E10 C9 B1				CMP	#$B1
     2 1E12 D0 03				BNE	SH_BCOLD
Source: boot_sys_sh.asm
  1011 						
  1012 1E14 6C 01 00				JMP	(Wrmjpl)	    	; Basic Warm-start
  1013 1E17 4C 00 B0		SH_BCOLD	JMP	LAB_COLD	    	; Basic Cold-start
  1014
  1015 				;--------------------------------------------------------------------------------
  1016 				; The RAM-BANK MUST be switched to MAIN RAM-bank 0, because the DOS code is there.
  1017 				; If the switch back is not done, the return jump will crash.
  1018 				;--------------------------------------------------------------------------------
  1019 1E1A 20 00 1E		DOS_JMP_RET	JSR	RAMB_DOS		; Enable main RAM-BANK for DOS
  1020 1E1D 4C 97 42				JMP	OS_SHELL_ENTRY		; Default return for Monitor and BASIC
  1021
  1022 				; **** CFC_LOAD routine for CF-IDE driver **************************************
  1023 				; Called with a CMD_LOAD from the CFC Device-driver through a JMP (CF_LOAD_VEC).
  1024 				; ******************************************************************************
  1025 1E20 20 00 1E		CFC_LOAD	JSR	RAMB_DOS		; Enable main RAM-BANK for DOS
  1026 1E23					PRSTR	TXT_LOAD		; Print 'CFC_LOAD'
Macro: PRSTR [Source: macros.inc]
     1 1E23 A2 B8			LDX	<TXT_LOAD				; MADS makes this immediate
     2 1E25 A0 56			LDY	>TXT_LOAD
Source: boot_sys_sh.asm
     2 1E27 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
  1027 1E2A 20 EA 51				JSR	FNAME2FN83		; Convert filename to FN83 filename
  1028 						;PRCH	'['
  1029 						;LDXYI	FILENAME		; 
  1030 						;JSR	OS_STRING_OUT		; Print FN83 filename
  1031 						;PRCH	']'
  1032 1E2D 20 71 50				JSR     SAVE_ACT_DIR        	; save actual directory LBA
  1033 1E30 20 23 57				JSR	SH_LOAD_BAS		; Load .bas file in memory
  1034 1E33 20 04 1E				JSR	RAMB_BAS		; Enable BASIC RAM-BANK again
  1035 1E36 38					SEC				; C=1: OK
  1036 1E37 60					RTS				; return to BASIC
  1037
  1038 				; **** Copy Second and other blocks of File to Memory **************************
  1039 				; Input: PSTR   : pointer to memory-source
  1040 				;        END_PTR: pointer to memory-destination
  1041 				; This routine copies a page (512 B) from one memory-location to another.
  1042 				; Since this routines is in Monitor-RAM, it is save to switch RAM-Banks.
  1043 				; Call tree: CFC_LOAD -> SH_LOAD_BAS -> OS_LOAD_FILE -> LOAD_NEXT_BLKS -> COPY_BLK_DEST
  1044 				; ******************************************************************************
  1045 1E38 20 04 1E		CP_BLK_DEST	JSR	RAMB_BAS			; Select BASIC RAM-BANK
  1046 1E3B A0 00				LDY	#0				; Init. index
  1047 1E3D B1 EA 91 CC		CP_BLK0_LP	MVA	(PSTR),Y (END_PTR),Y		; Get byte from buffer and store in destination
  1048 1E41 E6 CC D0 02 E6 CD			INW	END_PTR				; Increment destination pointer (macro)
  1049 1E47 E6 EA D0 02 E6 EB			INW	PSTR				; Increment buffer pointer (macro)
  1050 1E4D A5 EB				LDA	PSTR+1				; MSB of buffer pointer
  1051 1E4F					CMP.NE	#>FILE_BUFF+2 CP_BLK0_LP		; branch if not 2 pages (512 bytes) increased yet
Macro: CMP.NE [Source: macros.inc]
     1 1E4F C9 1E				CMP	#>FILE_BUFF+2
     2 1E51 D0 EA				BNE	CP_BLK0_LP
Source: boot_sys_sh.asm
  1052 1E53					PRCH	'.'
Macro: PRCH [Source: macros.inc]
     1 1E53 A9 2E			LDA	#'.'
     2 1E55 20 52 E0			JSR	COUT
Source: boot_sys_sh.asm
  1053 1E58 4C 00 1E				JMP	RAMB_DOS			; Select DOS RAM-BANK again and return
  1054
  1055 				; **** CFC_SAVE routine for CF-IDE driver **************************************
  1056 				; Called with a CMD_SAVE from the CFC Device-driver through a JMP (CF_SAVE_VEC).
  1057 				; ******************************************************************************
  1058 1E5B 20 00 1E		CFC_SAVE	JSR	RAMB_DOS			; Enable main RAM-BANK for DOS
  1059 1E5E 20 21 56				JSR	CFC_SAVE_CNT			; Call CFC_SAVE function in DOS RAM area
  1060 1E61 20 04 1E				JSR	RAMB_BAS			; Switch back to BASIC RAM-BANK area
  1061 1E64 38					SEC					; C=1: OK
  1062 1E65 60					RTS					; return to BASIC
  1063
  1064 				;----------------------------------------------------------------------------
  1065 				; Command: CMD_READ_BUF, Read Single Data Block from Logical Address to Std. Block Buffer
  1066 				; Input  :  X,Y = Ptr[LO:HI] to 32 Bit LBA Source Address
  1067 				; Output :  C   = 0 Error, C = 1 Data OK
  1068 				;	    A   = Error Code
  1069 				;----------------------------------------------------------------------------
  1070 1E66 20 8B F6		OWN_RD_LBLK_BUF	JSR	INIT_BLKBUF		; set pointer to block buffer
  1071 										; fall through to CF_RD_LBLK
  1072
  1073 				;----------------------------------------------------------------------------
  1074 				; Command: CMD_READ, Read Single Data Block from Logical Address
  1075 				; Input  : X,Y = Ptr[LO:HI] to 32 Bit LBA Source Address
  1076 				;	   BLKBUF,BLKBUFH = 16 Bit Destination Address
  1077 				; Output : C = 0 Error, C = 1 Data OK
  1078 				;	   A = Error Code
  1079 				;----------------------------------------------------------------------------
  1080 1E69 20 E9 1E		OWN_RD_LBLK	JSR	CF_WAIT_BSY0		; Wait until BSY = 0
  1081 1E6C 90 29				BCC	OWN_RD_X		; Branch on error
  1082 1E6E 20 85 FC				JSR	LOAD_LBA_CF		; Load LBA into CF-card
  1083 										; fall through to OWN_RD_BLK
  1084
  1085 				;----------------------------------------------------------------------------
  1086 				; Read Single Data Block
  1087 				; Input:  BLKBUF,BLKBUFH = 16 Bit Destination Address
  1088 				; Output: C = 0 Error, C = 1 Read OK
  1089 				;	  A = Error Code
  1090 				;----------------------------------------------------------------------------
  1091 1E71 A9 01		OWN_RD_BLK	LDA 	#$01
  1092 1E73 8D 82 0C				STA 	CFREG2			; Read one Sector
  1093 1E76 A9 20				LDA 	#$20			; Read Sector Command
  1094 1E78 8D 87 0C				STA 	CFREG7			; CF command register
  1095 1E7B 20 E9 1E				JSR	CF_WAIT_BSY0		; Wait until BSY = 0
  1096 1E7E 90 17				BCC	OWN_RD_X		; Branch on error
  1097 						
  1098 1E80 A2 01		CF_RD_INFO	LDX	#$01			; initialize page counter
  1099 1E82 A0 00				LDY	#$00			; initialize byte counter
  1100 1E84 20 32 1F		CF_RD_BLK0	JSR	CF_WAIT_DRQ1		; Wait until DRQ and RDY are set
  1101 1E87 90 0E				BCC	OWN_RD_X		; Branch on timeout error
  1102 						
  1103 1E89 AD 80 0C				LDA 	CFREG0			; read data-bytes
  1104 1E8C 91 DC				STA 	(BLKBUF),Y		; store in buffer
  1105 1E8E C8					INY				; next byte
  1106 1E8F D0 F3				BNE 	CF_RD_BLK0		; branch if more bytes to read
  1107
  1108 1E91 E6 DD				INC	BLKBUF+1		; yes, increment block buffer page
  1109 1E93 CA					DEX
  1110 1E94 10 EE				BPL	CF_RD_BLK0		; two pages read? no, read next byte
  1111 						
  1112 1E96 38					SEC				; yes, all data read, set C = 1 (no error)
  1113 1E97 60			OWN_RD_X	RTS
  1114
  1115 				; **** Write Logical Block *****************************************************
  1116 				; Input: [X,Y] points to 32-bit destination LBA
  1117 				;        BLKBUF,BLKBUFH = 16 Bit Source Address
  1118 				; Routine is placed in Monitor RAM, because it may SAVE memory in the RAM-BANK area. 
  1119 				; Call-tree: CFC_SAVE -> CFC_SAVE_CNT -> OS_SAVE_FILE -> DEV_WR_LBLK
  1120 				; ******************************************************************************
  1121 1E98 20 CE 55		DEV_WR_LBLK	JSR	CHECK_LBA			; Check for LBA errors
  1122 1E9B 90 0F				BCC	DEV_NO_WR			; branch if LBA error
  1123 1E9D					PHX					; Save X register
Macro: PHX [Source: macros.inc]
     1 1E9D 8A				TXA
     2 1E9E 48				PHA
Source: boot_sys_sh.asm
  1124 1E9F 20 04 1E				JSR	RAMB_BAS			; Switch to BASIC RAM-BANK area (disabling DOS area)
  1125 1EA2					PLX					; Get X register back
Macro: PLX [Source: macros.inc]
     1 1EA2 68				PLA
     2 1EA3 AA				TAX
Source: boot_sys_sh.asm
  1126 						
  1127 						;LDA     #CMD_WRITE			; Call Device-driver Write routine
  1128 				                ;JSR     CMDDEV				; Call device-driver
  1129 1EA4 20 B5 1E				JSR	OWN_WR_LBLK
  1130 1EA7 08					PHP					; Save Carry flag
  1131 1EA8 20 00 1E				JSR	RAMB_DOS			; Enable main RAM-BANK for DOS again and return
  1132 1EAB 28					PLP					; Get Carry flag
  1133 1EAC 60			DEV_NO_WR	RTS					; Return
  1134
  1135 				; **** Write Logical Block From Standard Buffer ********************************
  1136 				; Input: [X,Y] points to 32-bit LBA
  1137 				; It is called from OS_SAVE_FAT only.
  1138 				; ******************************************************************************
  1139 1EAD 20 CE 55		DEV_WR_LBLK_BUF JSR	CHECK_LBA			; Check for LBA errors
  1140 1EB0 90 FA				BCC	DEV_NO_WR			; branch if LBA error
  1141 						; LDA    	#CMD_WRITE_BUF	  		; Call Device-driver Write routine
  1142 				                ; JMP    	CMDDEV				; Call device-driver and return
  1143 						; Fall-through to OWN_WR_LBLK_BUF
  1144 						
  1145 				;----------------------------------------------------------------------------
  1146 				; Command: WRITE_BUF, Write Single Data Block from Std. Block Buffer to Logical Address
  1147 				; Input  : X,Y = Ptr[LO:HI] to 32 Bit LBA Destination Address
  1148 				; Output : C = 0 Error, C = 1 Data OK
  1149 				;	   A = Error Code
  1150 				;----------------------------------------------------------------------------
  1151 1EB2 20 8B F6		OWN_WR_LBLK_BUF	JSR	INIT_BLKBUF		; set pointer to block buffer
  1152 										; fall through to CR_WR_LBLK
  1153
  1154 				;----------------------------------------------------------------------------
  1155 				; Command: CMD_WRITE, Write Single Data Block to Logical Address
  1156 				; Input  : X,Y = Ptr[LO:HI] to 32 Bit LBA Destination Address
  1157 				;	   BLKBUF,BLKBUFH = 16 Bit Source Address
  1158 				; Output : C = 0 Error, C = 1 Data OK
  1159 				;	   A = Error Code
  1160 				;----------------------------------------------------------------------------
  1161 1EB5 20 E9 1E		OWN_WR_LBLK	JSR	CF_WAIT_BSY0		; Wait until BSY = 0
  1162 1EB8 90 2E				BCC	OWN_WR_X		; Branch on error
  1163 1EBA 20 85 FC				JSR	LOAD_LBA_CF		; Load LBA into CF-card
  1164 										; fall through to CF_WR_BLK
  1165
  1166 				;----------------------------------------------------------------------------
  1167 				; Write Single Data Block
  1168 				; Input:  BLKBUF,BLKBUFH = 16 Bit Source Address
  1169 				; Output: C = 0 Error, C = 1 Write OK
  1170 				;	  A = Error Code
  1171 				;----------------------------------------------------------------------------
  1172 1EBD A9 01		OWN_WR_BLK	LDA 	#$01
  1173 1EBF 8D 82 0C				STA 	CFREG2			; Read one Sector
  1174 1EC2 A9 30				LDA 	#$30			; Write Sector Command
  1175 1EC4 8D 87 0C				STA 	CFREG7			; CF command register
  1176 1EC7 20 E9 1E				JSR	CF_WAIT_BSY0		; Wait until BSY = 0
  1177 1ECA 90 1C				BCC	OWN_WR_X		; Branch on timeout error
  1178 1ECC A2 01		CF_WR_INFO	LDX	#$01			; initialize page counter
  1179 1ECE A0 00				LDY	#$00			; initialize byte counter
  1180 1ED0 20 32 1F		CF_WR_BLK0	JSR	CF_WAIT_DRQ1		; Wait until DRQ and RDY are set
  1181 1ED3 90 13				BCC	OWN_WR_X		; Branch on timeout error
  1182
  1183 1ED5 B1 DC				LDA 	(BLKBUF),Y		; read from buffer
  1184 1ED7 8D 80 0C				STA 	CFREG0			; Write to CF-card
  1185 1EDA C8					INY				; next byte
  1186 1EDB D0 F3				BNE 	CF_WR_BLK0		; branch if more bytes to write
  1187
  1188 1EDD E6 DD				INC	BLKBUF+1		; yes, increment block buffer page
  1189 1EDF CA					DEX
  1190 1EE0 10 EE				BPL	CF_WR_BLK0		; two pages read? no, read next byte
  1191 						
  1192 1EE2					PRCH	'.'
Macro: PRCH [Source: macros.inc]
     1 1EE2 A9 2E			LDA	#'.'
     2 1EE4 20 52 E0			JSR	COUT
Source: boot_sys_sh.asm
  1193 1EE7 38					SEC				; yes, all data read, set C = 1 (no error)
  1194 1EE8 60			OWN_WR_X	RTS
  1195 						
  1196 				;----------------------------------------------------------------------------
  1197 				; This routine waits until the CF-card is ready.
  1198 				;----------------------------------------------------------------------------
  1199 1EE9 A9 00		CF_WAIT_BSY0	LDA 	#0
  1200 1EEB 85 D6				STA 	MSEC		; msec counter
  1201
  1202 1EED AD 87 0C		CF_BSY_LP	LDA 	CFREG7		; read status register
  1203 1EF0 29 80				AND 	#$80		; check busy flag
  1204 1EF2 F0 0D				BEQ 	CF_OKE		; branch if BSY flag is cleared
  1205 						
  1206 1EF4 A9 0A				LDA 	#10		; delay = 10 msec.
  1207 1EF6 20 4D E1				JSR 	DELAY		; delay 10 msec.
  1208 1EF9 E6 D6				INC 	MSEC		; msec-counter
  1209 1EFB A5 D6				LDA 	MSEC
  1210 1EFD F0 04				BEQ 	CFBTO		; branch after 2550 msec. and no reset
  1211 1EFF D0 EC				BNE 	CF_BSY_LP	; branch always
  1212 						
  1213 1F01 38			CF_OKE		SEC			; C=1, OK
  1214 1F02 60					RTS			; BSY = 0, just return
  1215 					
  1216 1F03 8E 30 1F		CFBTO		STX 	SAVX		; Save X register
  1217 1F06 8C 31 1F				STY 	SAVY		; Save Y register
  1218 1F09 A2 1E				LDX 	#<TXT_HWERR    	; Print HW error
  1219 1F0B A0 1F				LDY 	#>TXT_HWERR
  1220 1F0D 20 82 F6		CFPRIT		JSR 	OS_STRING_OUT  	; print		
  1221 1F10 AD 87 0C				LDA 	CFREG7		; Status register
  1222 1F13 20 91 E0				JSR 	HEXOUT		; Print and return
  1223 1F16 AE 30 1F				LDX	SAVX		; Restore X register
  1224 1F19 AC 31 1F				LDY	SAVY		; Restore Y register
  1225 1F1C 18					CLC			; C=0, error
  1226 1F1D 60			CF_END		RTS			; return
  1227
  1228 1F1E 42 53 59 3D 31 2C + TXT_HWERR       .by     'BSY=1, $' $00
  1229 1F27 44 52 51 3D 30 2C + TXT_HWERR2      .by     'DRQ=0, $' $00
  1230 1F30 00			SAVX		.byte	$00
  1231 1F31 00			SAVY		.byte	$00
  1232
  1233 				; -------------------------------------------------------------------------------------
  1234 1F32 A9 00		CF_WAIT_DRQ1	LDA 	#0
  1235 1F34 85 D6				STA 	MSEC		; msec counter
  1236
  1237 1F36 AD 87 0C		CF_DRQ_LP	LDA 	CFREG7		; read status register
  1238 1F39 29 50				AND 	#$50		; check for RDY and DSC flags
  1239 1F3B C9 50				CMP 	#$50		; BSY and DSC flags both set?
  1240 1F3D F0 C2				BEQ 	CF_OKE		; branch if RDY and DSC are both set
  1241
  1242 1F3F A9 01				LDA 	#1		; delay = 1 msec.
  1243 1F41 20 4D E1				JSR 	DELAY		; delay 1 msec.
  1244 1F44 E6 D6				INC 	MSEC		; msec-counter
  1245 1F46 A5 D6				LDA 	MSEC
  1246 1F48 F0 02				BEQ 	CFDRQTO		; branch after 255 msec. and no RDY/DRQ set
  1247 1F4A D0 EA				BNE 	CF_DRQ_LP	; branch always
  1248
  1249 1F4C 8E 30 1F		CFDRQTO		STX 	SAVX		; Save X register
  1250 1F4F 8C 31 1F				STY 	SAVY		; Save Y register
  1251 1F52 A2 27				LDX 	#<TXT_HWERR2   	; Print HW error
  1252 1F54 A0 1F				LDY 	#>TXT_HWERR2
  1253 1F56 D0 B5				BNE	CFPRIT		; branch always
  1254
  1255 				;-------------------------------------------------------------------------------------------------------
  1256 				.endl		; MON_RAM_BLOCK
  1257 				;-------------------------------------------------------------------------------------------------------
  1258 55CE			MON_RAM_END
  1259
  1260 				;-------------------------------------------------------------------------------------------------------
  1261 				; Checks if LBA to write to is < $20, which means boot-sector area.
  1262 				; This indicates an error and should not happen.
  1263 				; Input : [X,Y] points to 32-bit LBA
  1264 				; Output: C=1, LBA >= $20. C=0, LBA < $20, error 
  1265 				;-------------------------------------------------------------------------------------------------------
  1266 55CE 86 D8		CHECK_LBA	STX	SAVEX			; ZP-var
  1267 55D0 84 D9				STY	SAVEY			; ZP-var, SAVEY = SAVEX + 1
  1268 55D2 A0 03				LDY	#3
  1269 						
  1270 55D4			CHK_LBA_LP	LDA.NE	(SAVEX),Y CHK_LBA_OK	; Branch if LBA >= $20
Macro: LDA.NE [Source: macros.inc]
     1 55D4 B1 D8				LDA	(SAVEX),Y
     2 55D6 D0 16				BNE	CHK_LBA_OK
Source: boot_sys_sh.asm
  1271 55D8					DEY.NE	CHK_LBA_LP		; Branch if not all LBA-bytes checked
Macro: DEY.NE [Source: macros.inc]
     1 55D8 88					DEY
     2 55D9 D0 F9				BNE	CHK_LBA_LP
Source: boot_sys_sh.asm
  1272 55DB B1 D8				LDA	(SAVEX),Y		; LBA LSB
  1273 55DD					CMP.CS	#$20 CHK_LBA_X		; Branch if LBA LSB >= $20
Macro: CMP.CS [Source: macros.inc]
     1 55DD C9 20				CMP	#$20			; 
     2 55DF B0 0E				BCS	CHK_LBA_X			; branch if C=1 (A-b1 >= 0)
Source: boot_sys_sh.asm
  1274
  1275 55E1					PRSTR	TXT_LBA_ERR
Macro: PRSTR [Source: macros.inc]
     1 55E1 A2 F4			LDX	<TXT_LBA_ERR				; MADS makes this immediate
     2 55E3 A0 55			LDY	>TXT_LBA_ERR
Source: boot_sys_sh.asm
     2 55E5 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
  1276 55E8 20 08 56				JSR	STACK_DUMP		; Print stack-dump
  1277 55EB 18					CLC
  1278 55EC 90 01				BCC	CHK_LBA_X		; Branch always
  1279 						
  1280 55EE 38			CHK_LBA_OK	SEC				; C=1, LBA oke
  1281 55EF A6 D8		CHK_LBA_X	LDX	SAVEX
  1282 55F1 A4 D9				LDY	SAVEY
  1283 55F3 60					RTS
  1284
  1285 55F4 45 72 72 6F 72 3A + TXT_LBA_ERR	.by	'Error: LBA < $20!' CR $00
  1286 5607 00			SAVX		.byte	$00			; SAVEX = ZP, SAVX is RAM-BANK RAM
  1287
  1288 5608 BA			STACK_DUMP	TSX
  1289 5609 E8					INX
  1290 560A BD 00 01		STRACE		LDA	$100,X			; stack trace
  1291 560D 8E 07 56				STX	SAVX
  1292 5610 20 91 E0				JSR	HEXOUT
  1293 5613 A9 2C				LDA	#','
  1294 5615 20 52 E0				JSR	COUT
  1295 5618 AE 07 56				LDX	SAVX
  1296 561B E8					INX
  1297 561C D0 EC				BNE	STRACE
  1298 561E 4C 5A E0				JMP	CROUT			; Print CR and return
  1299
  1300 				; **** CFC_SAVE routine for CF-IDE driver **************************************
  1301 				; Called from CFC_SAVE which is located in Monitor RAM.
  1302 				; ******************************************************************************
  1303 5621			CFC_SAVE_CNT	PRSTR	TXT_SAVE		; Print 'CFC_SAVE'
Macro: PRSTR [Source: macros.inc]
     1 5621 A2 C3			LDX	<TXT_SAVE				; MADS makes this immediate
     2 5623 A0 56			LDY	>TXT_SAVE
Source: boot_sys_sh.asm
     2 5625 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
  1304 5628					PRHEX16	$2000			; Print end-address
Macro: PRHEX16 [Source: macros.inc]
     1 5628 AD 01 20			LDA	$2000+1				; print MSB
     2 562B 20 91 E0			JSR	HEXOUT
     3 562E AD 00 20			LDA	$2000
     4 5631 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_sh.asm
  1305 5634 20 5E E0				JSR	SPCOUT		
  1306 5637 20 EA 51				JSR	FNAME2FN83		; Convert filename to FN83 filename
  1307 563A					PRCH	'['
Macro: PRCH [Source: macros.inc]
     1 563A A9 5B			LDA	#'['
     2 563C 20 52 E0			JSR	COUT
Source: boot_sys_sh.asm
  1308 563F					LDXYI	FILENAME		; 
Macro: LDXYI [Source: macros.inc]
     1 563F A2 42			LDX	<FILENAME				; MADS makes this immediate
     2 5641 A0 4C			LDY	>FILENAME
Source: boot_sys_sh.asm
  1309 5643 20 82 F6				JSR	OS_STRING_OUT		; Print FN83 filename
  1310 5646					PRCH	']'
Macro: PRCH [Source: macros.inc]
     1 5646 A9 5D			LDA	#']'
     2 5648 20 52 E0			JSR	COUT
Source: boot_sys_sh.asm
  1311 564B AD 00 20 8D E0 56 + 		MWA	$2000 SAVE_LEN		; SAVE_LEN = end-address
  1312 5657 38 AD E0 56 E9 00 + 		SBW	SAVE_LEN #$2000		; Get net file-size
  1313 5668 AD E1 56 8D E2 56			MVA	SAVE_LEN+1 SAVE_SECS	; SAVE_SECS now contains #pages of 256 bytes
  1314 566E 4E E2 56				LSR	SAVE_SECS		; SAVE_SECS now contains #sectors of 512 bytes needed
  1315 5671					LDA.EQ	SAVE_LEN NO_ADD_SEC	; branch if LSB of SAVE_LEN is 0
Macro: LDA.EQ [Source: macros.inc]
     1 5671 AD E0 56				LDA	SAVE_LEN
     2 5674 F0 03				BEQ	NO_ADD_SEC
Source: boot_sys_sh.asm
  1316
  1317 5676 EE E2 56				INC	SAVE_SECS		; Add 1 to SAVE_SECS if LSB of SAVE_LEN is not 0
  1318 5679			NO_ADD_SEC	PRSTR	TXT_SECND1		; Print ', size: '
Macro: PRSTR [Source: macros.inc]
     1 5679 A2 CF			LDX	<TXT_SECND1				; MADS makes this immediate
     2 567B A0 56			LDY	>TXT_SECND1
Source: boot_sys_sh.asm
     2 567D 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
  1319 5680					LDXY	SAVE_LEN		; Size in bytes
Macro: LDXY [Source: macros.inc]
     1 5680 AE E0 56			LDX	SAVE_LEN
     2 5683 AC E1 56			LDY	SAVE_LEN+1
Source: boot_sys_sh.asm
  1320 5686 20 E9 4E				JSR	PRINT_INT16		; Print it
  1321 5689					PRSTR	TXT_SECND2		; Print ', sec: '
Macro: PRSTR [Source: macros.inc]
     1 5689 A2 D8			LDX	<TXT_SECND2				; MADS makes this immediate
     2 568B A0 56			LDY	>TXT_SECND2
Source: boot_sys_sh.asm
     2 568D 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
  1322 5690 AD E2 56				LDA	SAVE_SECS		; Get sector count
  1323 5693 20 15 4D				JSR	NUMOUT			; Print #sectors needed
  1324 5696 20 5A E0				JSR	CROUT			; Print CR
  1325 						
  1326 5699					PRSTR	TXT_OS_CREATE		; Print 'OS_CREATE'
Macro: PRSTR [Source: macros.inc]
     1 5699 A2 E3			LDX	<TXT_OS_CREATE				; MADS makes this immediate
     2 569B A0 56			LDY	>TXT_OS_CREATE
Source: boot_sys_sh.asm
     2 569D 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
  1327 56A0 A9 20				LDA	#FA_ARCHIVE		; File is modified 
  1328 56A2 20 CE 47				JSR	OS_CREATE		; Create file in current dir. and update FAT
  1329 56A5 90 10				BCC	SV_CNT_X		; Branch (exit) on error
  1330 						
  1331 56A7					PRSTR	TXT_OS_SAVFILE		; Print 'OS_SAVE_FILE'
Macro: PRSTR [Source: macros.inc]
     1 56A7 A2 EF			LDX	<TXT_OS_SAVFILE				; MADS makes this immediate
     2 56A9 A0 56			LDY	>TXT_OS_SAVFILE
Source: boot_sys_sh.asm
     2 56AB 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
  1332 56AE 20 F9 44				JSR	OS_SAVE_FILE		; Save contents of file
  1333 56B1 90 04				BCC	SV_CNT_X		; Branch if error
  1334 						
  1335 56B3 20 D2 58				JSR	SIS_DEL			; Subtract #allocated clusters from SIS and write back to disk
  1336 56B6 38					SEC				; C=1: OK
  1337 56B7 60			SV_CNT_X	RTS				; return
  1338
  1339 56B8 43 46 43 5F 4C 4F + TXT_LOAD	.by	'CFC_LOAD: ' $00
  1340 56C3 43 46 43 5F 53 41 + TXT_SAVE	.by	'CFC_SAVE: $' $00
  1341 56CF 2C 20 73 69 7A 65 + TXT_SECND1	.by	', size: ' $00
  1342 56D8 2C 20 73 65 63 3A + TXT_SECND2	.by	', sec: ' $00
  1343 56E0 00 00		SAVE_LEN	.word	$0000			; #bytes to save
  1344 56E2 00			SAVE_SECS	.byte	$00			; #sectors (of 512 B) to save
  1345 56E3 4F 53 5F 43 52 45 + TXT_OS_CREATE	.by	'OS_CREATE:' CR $00
  1346 56EF 4F 53 5F 53 41 56 + TXT_OS_SAVFILE 	.by	'OS_SAVE_FILE:' CR $00
  1347
  1348 				; **** BRUN Command ************************************************************
  1349 				;
  1350 				; ******************************************************************************
  1351 56FE 20 71 50		SH_BRUN         JSR     SAVE_ACT_DIR        	; save actual directory LBA
  1352 5701			                LDXYI   NO_PARMS            	; no command parameters
Macro: LDXYI [Source: macros.inc]
     1 5701 A2 16			LDX	<NO_PARMS				; MADS makes this immediate
     2 5703 A0 51			LDY	>NO_PARMS
Source: boot_sys_sh.asm
  1353 5705 20 95 50		                JSR     SH_GET_PARMS
  1354 5708 90 05		                BCC     SH_BRUN_END
  1355
  1356 570A 20 03 49		                JSR     OS_FIND_FILE
  1357 570D 90 00		                BCC     SH_BRUN_END		; branch if file not found
  1358
  1359 				                ;JSR     OS_LOAD_BIN
  1360 570F 20 83 50		SH_BRUN_END     JSR     LOAD_ACT_DIR        	; restore actual directory LBA
  1361 5712 60			                RTS
  1362 				                
  1363 				; **** BLOAD Command ***********************************************************
  1364 				;
  1365 				; ******************************************************************************
  1366 5713 60			SH_BLOAD        RTS
  1367
  1368 				; ******************************************************************************
  1369 5714 20 71 50		SH_RUN          JSR     SAVE_ACT_DIR        ; save actual directory LBA
  1370 5717			                LDXYI   NO_PARMS            ; no command parameters
Macro: LDXYI [Source: macros.inc]
     1 5717 A2 16			LDX	<NO_PARMS				; MADS makes this immediate
     2 5719 A0 51			LDY	>NO_PARMS
Source: boot_sys_sh.asm
  1371 571B 20 02 51		                JSR     SET_PARM_MASK
  1372 571E 20 E4 50		                JSR     SH_GET_PATH         ; get file path
  1373 5721 90 5C		                BCC     SH_RUN_END
  1374
  1375 						; This is the entry-point for loading a .BAS file into memory
  1376 5723 AD 4A 4C		SH_LOAD_BAS     LDA     FILENAME+8
  1377 5726			                CMP.NE  #SPC SH_RUN1        	; branch if given filename has no extension
Macro: CMP.NE [Source: macros.inc]
     1 5726 C9 20				CMP	#SPC
     2 5728 D0 0B				BNE	SH_RUN1
Source: boot_sys_sh.asm
  1378 572A					MVAY	3 EXT_COM FILENAME+8	; copy .COM extension to FILENAME
Macro: MVAY [Source: macros.inc]
     1 572A A0 02			LDY	#3-1
     2 572C B9 15 5A 99 4A 4C + lp	MVA	EXT_COM,Y FILENAME+8,Y-
     3 5733 10 F7			BPL	lp
Source: boot_sys_sh.asm
  1379
  1380 						; Check for .COM file
  1381 5735 A0 02		SH_RUN1         LDY     #$02
  1382 5737 B9 15 5A		CMP_EXT_COM     LDA     EXT_COM,Y           	; check if COM file
  1383 573A					CMP.NE	FILENAME+8,Y CHK_BASF	; Not a .COM file, check .BAS file next
Macro: CMP.NE [Source: macros.inc]
     1 573A D9 4A 4C				CMP	FILENAME+8,Y
     2 573D D0 0A				BNE	CHK_BASF
Source: boot_sys_sh.asm
  1384 573F			                DEY.PL	CMP_EXT_COM	    	; branch if not done yet
Macro: DEY.PL [Source: macros.inc]
     1 573F 88					DEY
     2 5740 10 F5				BPL	CMP_EXT_COM
Source: boot_sys_sh.asm
  1385 				                
  1386 5742 A9 01 8D 54 44			MVA	#1 FTYPE	    	; 1 = .COM file
  1387 5747 D0 26				BNE	SH_RUN_FF	    	; branch always, check if file exists
  1388
  1389 5749 A0 02		CHK_BASF	LDY     #$02
  1390 574B B9 1B 5A		CMP_EXT_BAS     LDA     EXT_BAS,Y           	; check if .BAS file
  1391 574E			                CMP.NE  FILENAME+8,Y CHK_EXEF	; Not a .BAS file, check .EXE file next
Macro: CMP.NE [Source: macros.inc]
     1 574E D9 4A 4C				CMP	FILENAME+8,Y
     2 5751 D0 0A				BNE	CHK_EXEF
Source: boot_sys_sh.asm
  1392 5753			                DEY.PL  CMP_EXT_BAS	    	; branch if not done yet
Macro: DEY.PL [Source: macros.inc]
     1 5753 88					DEY
     2 5754 10 F5				BPL	CMP_EXT_BAS
Source: boot_sys_sh.asm
  1393 				                
  1394 5756 A9 00 8D 54 44			MVA	#0 FTYPE	    	; 0 = .BAS file
  1395 575B F0 12				BEQ	SH_RUN_FF	    	; branch always, check if file exists
  1396
  1397 575D A0 02		CHK_EXEF	LDY     #$02
  1398 575F B9 18 5A		CMP_EXT_EXE     LDA     EXT_EXE,Y           	; check if .EXE file
  1399 5762			                CMP.NE  FILENAME+8,Y SH_RUN_END	; all 3 extensions do not exist
Macro: CMP.NE [Source: macros.inc]
     1 5762 D9 4A 4C				CMP	FILENAME+8,Y
     2 5765 D0 18				BNE	SH_RUN_END
Source: boot_sys_sh.asm
  1400 5767			                DEY.PL	CMP_EXT_EXE	    	; branch if not done yet
Macro: DEY.PL [Source: macros.inc]
     1 5767 88					DEY
     2 5768 10 F5				BPL	CMP_EXT_EXE
Source: boot_sys_sh.asm
  1401 				                
  1402 576A A9 02 8D 54 44			MVA	#2 FTYPE	    	; 2 = .EXE file
  1403 576F 20 03 49		SH_RUN_FF       JSR     OS_FIND_FILE        	; check if file with this extension exists
  1404 5772 B0 08		                BCS     SH_RUN3             	; yes, load file
  1405
  1406 5774 20 5A E0		SH_RUN_ERR      JSR     CROUT		    	; print CR
  1407 5777 20 94 57		                JSR     SH_FILE_ERR         	; file does not exist
  1408 577A 90 03		                BCC     SH_RUN_END	    	; branch always
  1409
  1410 577C 20 67 44		SH_RUN3         JSR     OS_LOAD_FILE	    	; Load .bas file or load/run .com/.exe file
  1411 577F 4C 83 50		SH_RUN_END      JMP     LOAD_ACT_DIR        	; restore actual directory LBA and return
  1412 				                
  1413 				; **** Print version info  *****************************************************
  1414 				; Output: -
  1415 				; ******************************************************************************
  1416 5782			SH_VER		PRSTR	MSG_BOOT			; Print Title Info
Macro: PRSTR [Source: macros.inc]
     1 5782 A2 DB			LDX	<MSG_BOOT				; MADS makes this immediate
     2 5784 A0 4B			LDY	>MSG_BOOT
Source: boot_sys_sh.asm
     2 5786 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
  1417 5789 60					RTS
  1418 						
  1419 				; **** Monitor call-back Routine ************************************************
  1420 578A			SH_MONITOR      PRSTR   MSG_MONITOR
Macro: PRSTR [Source: macros.inc]
     1 578A A2 D6			LDX	<MSG_MONITOR				; MADS makes this immediate
     2 578C A0 59			LDY	>MSG_MONITOR
Source: boot_sys_sh.asm
     2 578E 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
  1421 5791 4C 03 E0		                JMP     MON_WARM_START
  1422 				                
  1423 				.macro	PR_ERR	msg
  1424 						LDXYI	:msg
  1425 						JMP	OS_PRINT_ERR
  1426 				.endm
  1427 				; **** Error Routines **********************************************************
  1428 5794			SH_FILE_ERR     PR_ERR	MSG_FILE_ERR		; 'File not Found' error message
Macro: PR_ERR [Source: boot_sys_sh.asm]
     1 5794 A2 65			LDX	<MSG_FILE_ERR				; MADS makes this immediate
     2 5796 A0 59			LDY	>MSG_FILE_ERR
Source: boot_sys_sh.asm
     2 5798 4C 71 4A				JMP	OS_PRINT_ERR
Source: boot_sys_sh.asm
  1429 579B			SH_PATH_ERR     PR_ERR  MSG_PATH_ERR  		; 'Path not Found' error message
Macro: PR_ERR [Source: boot_sys_sh.asm]
     1 579B A2 75			LDX	<MSG_PATH_ERR				; MADS makes this immediate
     2 579D A0 59			LDY	>MSG_PATH_ERR
Source: boot_sys_sh.asm
     2 579F 4C 71 4A				JMP	OS_PRINT_ERR
Source: boot_sys_sh.asm
  1430 57A2			SH_DIR_ERR      PR_ERR  MSG_DIR_ERR  		; 'Invalid Directory' error message
Macro: PR_ERR [Source: boot_sys_sh.asm]
     1 57A2 A2 A8			LDX	<MSG_DIR_ERR				; MADS makes this immediate
     2 57A4 A0 59			LDY	>MSG_DIR_ERR
Source: boot_sys_sh.asm
     2 57A6 4C 71 4A				JMP	OS_PRINT_ERR
Source: boot_sys_sh.asm
  1431 57A9			SH_NAME_ERR     PR_ERR  MSG_NAME_ERR  		; 'Invalid Filename' error message...
Macro: PR_ERR [Source: boot_sys_sh.asm]
     1 57A9 A2 96			LDX	<MSG_NAME_ERR				; MADS makes this immediate
     2 57AB A0 59			LDY	>MSG_NAME_ERR
Source: boot_sys_sh.asm
     2 57AD 4C 71 4A				JMP	OS_PRINT_ERR
Source: boot_sys_sh.asm
  1432 57B0			SH_D_EXIST_ERR  PR_ERR  MSG_D_EXIST_ERR 	; 'Directory already exists' error message...
Macro: PR_ERR [Source: boot_sys_sh.asm]
     1 57B0 A2 BB			LDX	<MSG_D_EXIST_ERR				; MADS makes this immediate
     2 57B2 A0 59			LDY	>MSG_D_EXIST_ERR
Source: boot_sys_sh.asm
     2 57B4 4C 71 4A				JMP	OS_PRINT_ERR
Source: boot_sys_sh.asm
  1433 57B7			SH_WRITE_ERR    PR_ERR  MSG_WRITE_ERR 		; 'Write error' message
Macro: PR_ERR [Source: boot_sys_sh.asm]
     1 57B7 A2 E4			LDX	<MSG_WRITE_ERR				; MADS makes this immediate
     2 57B9 A0 59			LDY	>MSG_WRITE_ERR
Source: boot_sys_sh.asm
     2 57BB 4C 71 4A				JMP	OS_PRINT_ERR
Source: boot_sys_sh.asm
  1434 				                
  1435 				; Inits BLKBUF to SIS_BUFF **************************************
  1436 				; Prepare for DEV_RD_LBLK and DEV_WR_LBLK routines
  1437 				; ***************************************************************
  1438 57BE A9 00 85 DC A9 5B + INIT_SIS_BUF	MWA	#SIS_BUFF BLKBUF	; macro BLKBUF = SIS_BUF
  1439 57C6 60					RTS
  1440
  1441 				;-------------------------------------------------------------------------------
  1442 				; Convert #Clusters to KB in FREE_KB
  1443 				; D_SECT_PER_CLST = 1: 2 CL =  2 SEC = 1 KB: SHR 1
  1444 				;                   2: 2 CL =  4 SEC = 2 KB: -
  1445 				;		    4: 2 CL =  8 SEC = 4 KB: SHL 1
  1446 				;		    8: 2 CL = 16 SEC = 8 KB: SHL 2 etcetera
  1447 				;-------------------------------------------------------------------------------
  1448 57C7 AD 0B 04		CL2KB		LDA	D_SECT_PER_CLST			; #sectors per cluster
  1449 57CA					CMP.EQ	#2 CL2KB_X			; 2 sec/cl, just exit
Macro: CMP.EQ [Source: macros.inc]
     1 57CA C9 02				CMP	#2
     2 57CC F0 22				BEQ	CL2KB_X
Source: boot_sys_sh.asm
  1450 57CE					CMP.EQ	#1 CL2KB_1			; 1 sec/cl, SHR 1
Macro: CMP.EQ [Source: macros.inc]
     1 57CE C9 01				CMP	#1
     2 57D0 F0 12				BEQ	CL2KB_1
Source: boot_sys_sh.asm
  1451 57D2 4A 4A			:2	LSR					; init nr of shifts		
  1452 57D4			CL2KB_SHL	ASL32	FREE_KB				; SHL 1 of FREE_KB
Macro: ASL32 [Source: macros.inc]
     1 57D4 0E 6D 58			ASL     FREE_KB		  		; SHL with C=0
     2 57D7 2E 6E 58		        ROL     FREE_KB+1		  
     3 57DA 2E 6F 58		        ROL     FREE_KB+2
     4 57DD 2E 70 58		        ROL     FREE_KB+3		  
Source: boot_sys_sh.asm
  1453 57E0 4A					LSR
  1454 57E1 D0 F1				BNE	CL2KB_SHL			; branch if not done with shifting
  1455 57E3 60					RTS					; return
  1456 						
  1457 57E4			CL2KB_1		LSR32	FREE_KB				; SHR 1 of FREE_KB
Macro: LSR32 [Source: macros.inc]
     1 57E4 4E 70 58			LSR     FREE_KB+3		  		; SHR with C=0
     2 57E7 6E 6F 58		        ROR     FREE_KB+2
     3 57EA 6E 6E 58		        ROR     FREE_KB+1
     4 57ED 6E 6D 58		        ROR     FREE_KB
Source: boot_sys_sh.asm
  1458 57F0 60			CL2KB_X		RTS					; return
  1459 						
  1460 				; Get Info from System Information Sector **************************************
  1461 57F1 20 BE 57		GET_SIS		JSR	INIT_SIS_BUF			; Init SIS Buffer for CMD_READ command
  1462 57F4					LDXYI	D_PART_START			; macro Ptr(X,Y) = D_PART_START ($0400)
Macro: LDXYI [Source: macros.inc]
     1 57F4 A2 00			LDX	<D_PART_START				; MADS makes this immediate
     2 57F6 A0 04			LDY	>D_PART_START
Source: boot_sys_sh.asm
  1463 57F8 20 50 41				JSR 	DEV_RD_LBLK           		; Read Volume ID again
  1464 57FB					MVAX	4 D_PART_START SYS_INFO_LBA	; SYS_INFO_LBA = D_PART_START
Macro: MVAX [Source: macros.inc]
     1 57FB A2 03			LDX	#4-1
     2 57FD BD 00 04 9D 69 58 + lp	MVA	D_PART_START,X SYS_INFO_LBA,X-
     3 5804 10 F7			BPL	lp
Source: boot_sys_sh.asm
  1465 5806 18 AD 69 58 6D 30 + 		ADW	SYS_INFO_LBA SIS_OFFSET		; SYS_INFO_LBA = D_PART_START + *SIS_OFFSET
  1466 5819 AD 6B 58				LDA	SYS_INFO_LBA+2			; update high word of SYS_INFO_LBA
  1467 581C 69 00				ADC	#0
  1468 581E 8D 6B 58				STA	SYS_INFO_LBA+2
  1469 5821 AD 6C 58				LDA	SYS_INFO_LBA+3
  1470 5824 69 00				ADC	#0
  1471 5826 8D 6C 58				STA	SYS_INFO_LBA+3
  1472 						
  1473 5829 20 BE 57				JSR	INIT_SIS_BUF			; Init SIS Buffer for CMD_READ command
  1474 582C					LDXYI	SYS_INFO_LBA			; Read Sys. Info. Sector into SIS-buffer
Macro: LDXYI [Source: macros.inc]
     1 582C A2 69			LDX	<SYS_INFO_LBA				; MADS makes this immediate
     2 582E A0 58			LDY	>SYS_INFO_LBA
Source: boot_sys_sh.asm
  1475 5830 20 50 41				JSR 	DEV_RD_LBLK           		; Read SIS sector
  1476 5833 AD 28 18				LDA	DBG_PRINT
  1477 5836 F0 22				BEQ	FREE_KB_UPDATE
  1478 5838					PRSTR	TXT_FFREE_CLST			; print 'First Free Cluster:$'
Macro: PRSTR [Source: macros.inc]
     1 5838 A2 71			LDX	<TXT_FFREE_CLST				; MADS makes this immediate
     2 583A A0 58			LDY	>TXT_FFREE_CLST
Source: boot_sys_sh.asm
     2 583C 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
  1479 583F					PRHEX32	SIS_BUFF+$01EC
Macro: PRHEX32 [Source: macros.inc]
     1 583F AD EF 5C			LDA	SIS_BUFF+$01EC+2+1				; print MSB
     2 5842 20 91 E0			JSR	HEXOUT
     3 5845 AD EE 5C			LDA	SIS_BUFF+$01EC+2
     4 5848 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_sh.asm
     1 584B AD ED 5C			LDA	SIS_BUFF+$01EC+1				; print MSB
     2 584E 20 91 E0			JSR	HEXOUT
     3 5851 AD EC 5C			LDA	SIS_BUFF+$01EC
     4 5854 20 91 E0			JSR	HEXOUT				; print LSB
Source: boot_sys_sh.asm
Source: boot_sys_sh.asm
  1480 5857 20 5A E0				JSR	CROUT
  1481 585A			FREE_KB_UPDATE	MVAX	4 SIS_BUFF+$01E8 FREE_KB	
Macro: MVAX [Source: macros.inc]
     1 585A A2 03			LDX	#4-1
     2 585C BD E8 5C 9D 6D 58 + lp	MVA	SIS_BUFF+$01E8,X FREE_KB,X-
     3 5863 10 F7			BPL	lp
Source: boot_sys_sh.asm
  1482 5865 20 C7 57				JSR	CL2KB				; Convert #clusters to KB and store in FREE_KB
  1483 5868 60					RTS
  1484 						
  1485 5869 00 00 00 00		SYS_INFO_LBA	.dword	$00000000
  1486 586D 00 00 00 00		FREE_KB		.dword	$00000000
  1487 5871 46 69 72 73 74 20 + TXT_FFREE_CLST	.by	'First free cluster:$' $00
  1488 5886 20 4B 42 20 66 72 + TXT_KB		.by	' KB free' CR $00
  1489 5890 00			SIS_CNT		.byte	$00				; SIS counter, counts #clusters freed or allocated
  1490
  1491 				; Write Info back to System Information Sector **************************************
  1492 5891			SIS_ADD		PRSTR	SISP
Macro: PRSTR [Source: macros.inc]
     1 5891 A2 F5			LDX	<SISP				; MADS makes this immediate
     2 5893 A0 58			LDY	>SISP
Source: boot_sys_sh.asm
     2 5895 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
  1493 5898 AD E8 5C 18 6D 90 + 		ADB	SIS_BUFF+$01E8 SIS_CNT		; add SIS_CNT to #free clusters in SIS-buffer
  1494 58A2 90 03				SCC					; 'skip if C is clear' macro
  1495 58A4 EE E9 5C				INC	SIS_BUFF+$01E9
  1496 58A7 90 03				SCC	
  1497 58A9 EE EA 5C				INC	SIS_BUFF+$01EA
  1498 58AC 90 03				SCC	
  1499 58AE EE EB 5C				INC	SIS_BUFF+$01EB
  1500 58B1 AD 90 58		SIS_WRITE	LDA	SIS_CNT				; Print SIS_CNT
  1501 58B4 20 91 E0				JSR	HEXOUT
  1502 58B7 20 5A E0				JSR	CROUT
  1503 58BA					MVAX	4 FREE_CLUSTER SIS_BUFF+$01EC	; SIS First free cluster = FREE_CLUSTER
Macro: MVAX [Source: macros.inc]
     1 58BA A2 03			LDX	#4-1
     2 58BC BD 20 18 9D EC 5C + lp	MVA	FREE_CLUSTER,X SIS_BUFF+$01EC,X-
     3 58C3 10 F7			BPL	lp
Source: boot_sys_sh.asm
  1504 58C5 20 BE 57				JSR	INIT_SIS_BUF			; Init SIS Buffer for CMD_WRITE command
  1505 58C8					LDXYI	SYS_INFO_LBA 			; Sys. Info. Sector LBA
Macro: LDXYI [Source: macros.inc]
     1 58C8 A2 69			LDX	<SYS_INFO_LBA				; MADS makes this immediate
     2 58CA A0 58			LDY	>SYS_INFO_LBA
Source: boot_sys_sh.asm
  1506 						; LDA     #CMD_WRITE			; Call Device-driver Write routine
  1507 				                ;JSR     CMDDEV				; Call device-driver
  1508 58CC 20 B5 1E				JSR	MON_RAM_BLOCK.OWN_WR_LBLK
  1509 58CF 4C 5A 58				JMP	FREE_KB_UPDATE			; Update FREE_KB and return
  1510
  1511 58D2			SIS_DEL		PRSTR	SISM
Macro: PRSTR [Source: macros.inc]
     1 58D2 A2 FA			LDX	<SISM				; MADS makes this immediate
     2 58D4 A0 58			LDY	>SISM
Source: boot_sys_sh.asm
     2 58D6 20 82 F6			JSR	OS_STRING_OUT
Source: boot_sys_sh.asm
  1512 58D9 AD E8 5C 38 ED 90 + 		SBB	SIS_BUFF+$01E8 SIS_CNT		; subtract SIS_CNT from #free clusters in SIS-buffer
  1513 58E3 B0 03				SCS					; 'skip if C is set' macro
  1514 58E5 CE E9 5C				DEC	SIS_BUFF+$01E9
  1515 58E8 B0 03				SCS
  1516 58EA CE EA 5C				DEC	SIS_BUFF+$01EA
  1517 58ED B0 03				SCS
  1518 58EF CE EB 5C				DEC	SIS_BUFF+$01EB
  1519 58F2 4C B1 58				JMP	SIS_WRITE			; write back to disk
  1520 						
  1521 58F5 53 49 53 2B 00	SISP		.by	'SIS+' $00
  1522 58FA 53 49 53 2D 00	SISM		.by	'SIS-' $00
  1523 						
  1524 				; **** Data Area ***************************************************************
  1525 				; ******************************************************************************
  1526
  1527 				; String Data Area *************************************************************
  1528 58FF 50 72 65 73 73 20 + MSG_PAUSE       .by    'Press any key...' $00
  1529 5910 56 6F 6C 75 6D 65 + MSG_LABEL       .by    'Volume in drive ' $00
  1530 5921 20 69 73 20 00	MSG_LABEL2      .by    ' is ' $00
  1531 5926 20 20 20 20 20 20 + MSG_DIR_ENTRY   .by    '          <DIR>' $00
  1532 5936 20 46 69 6C 65 28 + MSG_FILE_COUNT  .by    ' File(s)  ' $00
  1533 5941 20 44 69 72 28 73 + MSG_DIR_COUNT   .by    ' Dir(s)   ' $00
  1534 594C 20 62 79 74 65 73 + MSG_BYTE_USED   .by    ' bytes' CR $00
  1535 5954 44 72 69 76 65 20 + MSG_DRIVE_ERR   .by    'Drive not found' CR $00
  1536 5965 46 69 6C 65 20 6E + MSG_FILE_ERR    .by    'File not found' CR $00
  1537 5975 50 61 74 68 20 6E + MSG_PATH_ERR    .by    'Path not found' CR $00
  1538 5985 55 6E 6B 6E 6F 77 + MSG_PARAM_ERR   .by    'Unknown option ' OPT_SEP $00
  1539 5996 49 6E 76 61 6C 69 + MSG_NAME_ERR    .by    'Invalid filename' CR $00
  1540 59A8 49 6E 76 61 6C 69 + MSG_DIR_ERR     .by    'Invalid directory' CR $00
  1541 59BB 0D 44 69 72 65 63 + MSG_D_EXIST_ERR .by    CR 'Directory already exists' CR $00
  1542 59D6 0D 48 65 78 20 4D + MSG_MONITOR     .by    CR 'Hex Monitor' CR $00
  1543 59E4 0D 57 72 69 74 65 + MSG_WRITE_ERR   .by    CR 'Write Error' CR $00
  1544
  1545 				; ############################################
  1546 59F2 52 48 53 00 00 41 + ATTRIB_VAL      .byte      82, 72, 83, 0, 0, 65, 0, 0
  1547 59FA 00 00 00 00 00	BCD_VAL         .byte      $00, $00, $00, $00, $00
  1548 59FF 53 59 53 54 45 4D + SYSTEM_DIR      .by    'SYSTEM     '
  1549 5A0A 2E 2E 2E 2E 2E 2E + NAME_SAVE       .by    '...........'
  1550 5A15 43 4F 4D		EXT_COM         .by    'COM'
  1551 5A18 45 58 45		EXT_EXE		.by    'EXE'
  1552 5A1B 42 41 53		EXT_BAS		.by    'BAS'
  1553 				                
  1554 				; Command Table ****************************************************************
  1555 5A1E 42 3D 5A		CHARS		dta	'B' , a(CMD_BASIC)		; byte, word
  1556 5A21 43 52 5A				dta	'C' , a(CMD_CD)		
  1557 5A24 44 5C 5A				dta	'D' , a(CMD_DIR)		
  1558 5A27 45 67 5A				dta	'E' , a(CMD_ECHO)		
  1559 5A2A 47 6E 5A				dta	'G' , a(CMD_GOTO)		
  1560 5A2D 49 75 5A				dta	'I' , a(CMD_IF)		
  1561 5A30 4D 7A 5A				dta	'M' , a(CMD_MKDIR)		
  1562 5A33 50 87 5A				dta	'P' , a(CMD_PAUSE)		
  1563 5A36 52 8F 5A				dta	'R' , a(CMD_REM)
  1564 5A39 56 95 5A				dta	'V' , a(CMD_VER)
  1565 5A3C 00					.byte 	$00
  1566
  1567 5A3D 05 41 53 49 43 27 + CMD_BASIC	dta	5, c'ASIC', a(SH_BASIC)		; byte, string, word, EOT
  1568 5A44 05 4C 4F 41 44 13 + CMD_BLOAD	dta	5, c'LOAD', a(SH_BLOAD)		; 
  1569 5A4B 04 52 55 4E FE 56 + CMD_BRUN	dta	4, c'RUN' , a(SH_BRUN)   , $00	; 
  1570 5A52 02 44 72 52		CMD_CD		dta	2, c'D'   , a(SH_CD) 		; 
  1571 5A56 03 4C 53 DE 53 00	CMD_CLS		dta	3, c'LS'  , a(SH_CLS)    , $00	; 
  1572 5A5C 03 49 52 17 51	CMD_DIR		dta	3, c'IR'  , a(SH_DIR) 		; 
  1573 5A61 03 45 4C 5F 53 00	CMD_DEL		dta	3, c'EL'  , a(SH_DEL)    , $00	; 
  1574 5A67 04 43 48 4F F1 53 + CMD_ECHO	dta	4, c'CHO' , a(SH_ECHO)   , $00	; 
  1575 5A6E 04 4F 54 4F 00 54 + CMD_GOTO	dta	4, c'OTO' , a(SH_GOTO)   , $00	; 
  1576 5A75 02 46 01 54 00	CMD_IF		dta	2, c'F'   , a(SH_IF)     , $00	; 
  1577 5A7A 05 4B 44 49 52 9C + CMD_MKDIR	dta	5, c'KDIR', a(SH_MKDIR)		; 
  1578 5A81 03 4F 4E 8A 57 00	CMD_MON		dta	3, c'ON'  , a(SH_MONITOR), $00	; 
  1579 5A87 05 41 55 53 45 E1 + CMD_PAUSE	dta	5, c'AUSE', a(SH_PAUSE)  , $00	; 
  1580 5A8F 03 45 4D 17 54 00	CMD_REM		dta	3, c'EM'  , a(SH_REM)    , $00	; 
  1581 5A95 03 45 52 82 57 00	CMD_VER		dta	3, c'ER'  , a(SH_VER)    , $00  ;
    89 				                
    90 				; End Of Program Marker ********************************************************
    91 5A9B 00			BOOT_SYS_END    BRK
    92 5A9C					ORG ((*/256)+1)*256		; next free page
    93 = 5B00			SIS_BUFF	.ds 	512			; SIS Buffer 
    94 						END
