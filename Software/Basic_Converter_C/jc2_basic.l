%{
/* Lexical analyser for JC2 BASIC programs
   Copyright (C) 2025 by Emile

This is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with RetroBASIC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

#include "jc2_basic.h"
#include "jc2_basic.tab.h" // Generated by Bison from jc2_basic.y

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;

%}

%option noyywrap
%option caseless
%option yylineno
 //%option nodefault

%x STRING REMSTMT

%%

 /* end of file */
"\032"  {
          yyterminate();
        }
<<EOF>> {
          yyterminate();
        }

 /* statements */
 /* REM statements are odd because they consist of a token and a line of text, but
    the rest of the line is part of the statement. If you want to keep the REM part as
    a separate token, this is the simplest solution. See:
    https://stackoverflow.com/questions/59117309/rest-of-line-in-bison/59122569#59122569
  */
REM       { BEGIN(REMSTMT); return REM; } // $91
CALL      { return CALL; }    // $9C
CLEAR     { return CLEAR; }   // $A2
CLS       { return CLS; }     // $AE
COLOR     { return COLOR; }   // $BC NEW
CONT      { return CONT; }    // $A0 NEW
DEC       { return DEC; }     // $88 NEW
DEF       { return DEF; }     // $99
DATA      { return DATA; }    // $83
DIM       { return DIM; }     // $85
DO        { return DO; }      // $9D NEW
DOKE      { return DOKE; }    // $9B NEW
ELSE      { return ELSE; }    // $C1 NEW
END       { return END; }     // $80
FLASH     { return FLASH; }   // $B1
FN        { return FN; }      // $C3
FOR       { return FOR; }     // $81
GET       { return GET; }     // $A5
GOSUB     { return GOSUB; }   // $8D
GOTO      { return GOTO; }    // $89
HOME      { return HOME; }    // $AD NEW
IF        { return IF; }      // $8B
IN#       { return IN_; }     // $B3 NEW
INC       { return INC; }     // $95 NEW
INPUT     { return INPUT; }   // $84
INVERSE   { return INVERSE; } // $B0 NEW
LET       { return LET; }     // $87
LINE      { return LINE; }    // $B9 NEW
LIST      { return LIST; }    // $A1 NEW
LOAD      { return LOAD; }    // $97 NEW
LOCATE    { return LOCATE; }  // $B2 NEW
LOOP      { return LOOP; }    // $9E NEW
NEXT      { return NEXT; }    // $82
NEW       { return NEW; }     // $A3
NORMAL    { return NORMAL; }  // $AF NEW
NULL      { return _NULL; }   // $94 NEW
OFF       { return OFF; }     // $CA NEW
ON        { return ON; }      // $93
OVAL      { return OVAL; }    // $BA NEW
POKE      { return POKE; }    // $9A
PIXEL     { return PIXEL; }   // $B8 NEW
PLIST     { return PLIST; }   // $AC NEW
PR#       { return PR_; }     // $B4 NEW
PRINT     { return PRINT; }   // $9F
READ      { return READ; }    // $86
RECT      { return RECT; }    // $BB NEW
RESTORE   { return RESTORE; } // $8C
SOUND     { return SOUND; }  // $8E Was RETIRQ
RES2      { return RES2; }    // $8F Was RETNMI
RETURN    { return RETURN; }  // $90
RUN       { return RUN; }     // $8A
SAVE      { return SAVE; }    // $98 NEW
SCREEN    { return SCREEN; }  // $B7 NEW
STEP      { return STEP; }    // $C7
STOP      { return STOP; }    // $92
SWAP      { return SWAP; }    // $A6 NEW
THEN      { return THEN; }    // $C5
TO        { return TO; }      // $C2
UNTIL     { return UNTIL; }   // $C8 NEW
WAIT      { return WAIT; }    // $96 NEW
WIDTH     { return WIDTH; }   // $A4 NEW
WHILE     { return WHILE; }   // $C9 NEW

 /* math functions */
ABS\(       { return ABS; }   // $DB
ATN\(       { return ATN; }   // $E6
COS\(       { return COS; }   // $E3
EXP\(       { return EXP; }   // $E2
INT\(       { return INT; }   // $DA
LOG\(       { return LOG; }   // $E1
PI          { return PI; }    // $F6
SIN\(       { return SIN; }   // $E4
SGN\(       { return SGN; }   // $D9
SQR\(       { return SQR; }   // $DF
RND\(       { return RND; }   // $E0
TAN\(       { return TAN; }   // $E5
TWOPI       { return TWOPI; } // $F7
VAL\(       { return VAL; }   // $DC

 /* string-related functions */
ASC\(       { return ASC; }    // $DD
BIN\$\(     { return BINSTR; } // $F2
CHR\$\(     { return CHR; }    // $F0
HEX\$\(     { return HEXSTR; } // $F1
LCASE\$\(   { return LCASE; }  // $EF
LEFT\$\(    { return LEFT; }   // $F9
LEN\(       { return LEN; }    // $EA
MID\$\(     { return MID; }    // $FB
RIGHT\$\(   { return RIGHT; }  // $FA
STR\$\(     { return STR; }    // $EB
UCASE\$\(   { return UCASE; }  // $EE
VARPTR\(    { return VARPTR; } // $F8 NEW

 /* system functions */
FRE\(       { return FRE; }   // $DD
BEEP        { return BEEP; }  // $AB NEW
DEEK\(      { return DEEK; }  // $E8 NEW
DELAY       { return DELAY; } // $BD NEW
RES3        { return RES3; }  // $A9 Was IRQ
RES4        { return RES4; }  // $AA Was NMI
SPC\(       { return SPC; }   // $C4
PEEK\(      { return PEEK; }  // $E7
POS\(       { return POS; }   // $DE
SADD\(      { return SADD; }  // $E9 NEW
TAB\(       { return TAB; }   // $C0 NEW
USR\(       { return USR; }   // $DC

 /* various operators and punctuation */
\+        { return PLUS; }  // $CB
\-        { return MINUS; } // $CC
\*        { return MUL; }   // $CD
\/        { return DIV; }   // $CE
MOD_#     { return MOD; }   // $CF NEW
\^        { return POWER; } // $D0
\>\>      { return SHR; }   // $D4
\<\<      { return SHL; }   // $D5
\>        { return GT; }    // $D6
=         { return EQUAL; } // $D7
\<        { return LT; }    // $D8
MAX\(     { return MAX; }   // $F4
MIN\(     { return MIN; }   // $F5

 /* binary operators */
AND       { return AND; }     // $D1
BITCLR    { return BITCLR; }  // $A8 NEW
BITSET    { return BITSET; }  // $A7 NEW
BITTST\(  { return BITTST; }  // $F3 NEW
EOR       { return EOR; }     // $D2
OR        { return OR; }      // $D3
NOT       { return NOT; }     // $C6
PORT      { return PORTOUT; } // $B6 PORTOUT NEW
PORT\(    { return PORTIN; }  // $FC PORTIN  NEW
PORTIO    { return PORTIO; }  // $B5 NEW

 /* Reserved functions */
I2COUT    { return I2COUT; } // $BE NEW
DOS       { return DOS;    } // $BF Was RES4
I2CIN\(   { return I2CIN;  } // $FD NEW
RES5\(    { return RES5;   } // $FE NEW
RES6\(    { return RES6;   } // $FF NEW

 /* line numbers */
^[1-9][0-9]*[ ] {
            yylval.i = atoi(yytext);
            return LINE_NUMBER;
          }

 /* REM Statement */
<REMSTMT>\n { BEGIN(INITIAL); return '\n'; }
<REMSTMT>.  { return yytext[0]; }

 /* Strings */
\"         { BEGIN(STRING);  return '\"'; }
<STRING>\" { BEGIN(INITIAL); return '\"'; }
<STRING>.  { return yytext[0]; }

 /* preserve line ends */
[\n]        { return '\n'; }

 /* eat other whitespace */
[\t\r]     {  }

. return yytext[0];

%%
